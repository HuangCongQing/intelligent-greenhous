###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         11/Dec/2018  11:18:28 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Components\mt\MT_ZDO.c                      #
#    Command line       =  -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg"            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xAA34                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\m #
#                          t\MT_ZDO.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\C #
#                          O2_Fan\List\" -lA "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π #
#                          §æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas              #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\CO2_Fan\List\"        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\C #
#                          O2_Fan\Obj\" -e --no_code_motion --debug           #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03 #
#                          -≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\" -I                  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\Source\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\ #
#                          03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                  #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\ZMain\TI2530 #
#                          DB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ #
#                          ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\include\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥ #
#                          £”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\target\CC2530EB\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\include\" -I          #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\high_level\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\low_level\srf04\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\low_level\srf04\singl #
#                          e_chip\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03 #
#                          -œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                    #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mt\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\0 #
#                          3-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                   #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\osal\include\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\osal\mcu\ccsoc\" -I                           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\services\saddr\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\services\sdata\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\af\" -I             #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\nwk\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sapi\" -I           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sec\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sys\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\zdo\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\" -I                 #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\f8w\" -Ohz           #
#                          --require_prototypes                               #
#    List file          =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\CO #
#                          2_Fan\List\MT_ZDO.lst                              #
#    Object file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\CO #
#                          2_Fan\Obj\MT_ZDO.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2010-07-22 12:46:26 -0700 (Thu, 22 Jul 2010) $
      4            Revision:       $Revision: 23106 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          
     56          #if !defined( WIN32 )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #if defined ( MT_SYS_KEY_MANAGEMENT )
     61            #include "ZDSecMgr.h"
     62          #endif
     63          
     64          #include "nwk_util.h"
     65          
     66          /**************************************************************************************************
     67           * CONSTANTS
     68           **************************************************************************************************/
     69          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     70          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     71          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     72          #define MT_ZDO_BEACON_IND_LEN             21
     73          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     74          #define MT_ZDO_JOIN_CNF_LEN               5
     75          
     76          #define MTZDO_RESPONSE_BUFFER_LEN   100
     77          
     78          #define MTZDO_MAX_MATCH_CLUSTERS    16
     79          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     80          
     81          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     82          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     83          
     84          #define MT_ZDO_STATUS_LEN   1
     85          
     86          /**************************************************************************************************
     87           * GLOBAL VARIABLES
     88           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     91          
     92          /**************************************************************************************************
     93           * LOCAL VARIABLES
     94           **************************************************************************************************/
     95          
     96          /**************************************************************************************************
     97           * LOCAL FUNCTIONS
     98           **************************************************************************************************/
     99          #if defined (MT_ZDO_FUNC)
    100          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    101          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    102          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    103          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    104          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    105          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    106          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    107          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    108          void MT_ZdoUserDescRequest(uint8 *pBuf);
    109          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    110          void MT_ZdoUserDescSet(uint8 *pBuf);
    111          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    112          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    113          void MT_ZdoBindRequest(uint8 *pBuf);
    114          void MT_ZdoUnbindRequest(uint8 *pBuf);
    115          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    116          #if defined ( MT_SYS_KEY_MANAGEMENT )
    117          void MT_ZdoSetLinkKey(uint8 *pBuf);
    118          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    119          void MT_ZdoGetLinkKey(uint8 *pBuf);
    120          #endif /* MT_SYS_KEY_MANAGEMENT */
    121          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    122          void MT_ZdoJoinReq(uint8 *pBuf);
    123          /* Call back function */
    124          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    125          void *MT_ZdoBeaconIndCB ( void *pStr );
    126          void *MT_ZdoJoinCnfCB ( void *pStr );
    127          #if defined (MT_ZDO_MGMT)
    128          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    129          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    130          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    131          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    132          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    134          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    135          #endif /* MT_ZDO_MGMT */
    136          void MT_ZdoStartupFromApp(uint8 *pBuf);
    137          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    138          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    139          #endif /* MT_ZDO_FUNC */
    140          
    141          #if defined (MT_ZDO_CB_FUNC)
    142          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    143          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    144          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    145          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    146          void* MT_ZdoSrcRtgCB( void *pStr );
    147          #endif /* MT_ZDO_CB_FUNC */
    148          
    149          #if defined (MT_ZDO_FUNC)
    150          /***************************************************************************************************
    151           * @fn      MT_ZdoInit
    152           *
    153           * @brief   MT ZDO initialization
    154           *
    155           * @param   none
    156           *
    157           * @return  none
    158           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    160          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    161          #ifdef MT_ZDO_CB_FUNC
    162            /* Register with ZDO for indication callbacks */
    163            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    164          #endif
    165          }
   \   000000   02....       LJMP    ?BRET
    166          
    167          /***************************************************************************************************
    168           * @fn      MT_ZdoCommandProcessing
    169           *
    170           * @brief
    171           *
    172           *   Process all the ZDO commands that are issued by test tool
    173           *
    174           * @param   pBuf - pointer to the msg buffer
    175           *
    176           *          | LEN  | CMD0  | CMD1  |  DATA  |
    177           *          |  1   |   1   |   1   |  0-255 |
    178           *
    179           * @return  status
    180           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    182          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    183            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    184          
    185            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   603F         JZ      ??MT_ZdoCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   6041         JZ      ??MT_ZdoCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   6043         JZ      ??MT_ZdoCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   6045         JZ      ??MT_ZdoCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6047         JZ      ??MT_ZdoCommandProcessing_4
   \   00001C   14           DEC     A
   \   00001D   6049         JZ      ??MT_ZdoCommandProcessing_5
   \   00001F   14           DEC     A
   \   000020   604B         JZ      ??MT_ZdoCommandProcessing_6
   \   000022   14           DEC     A
   \   000023   604D         JZ      ??MT_ZdoCommandProcessing_7
   \   000025   14           DEC     A
   \   000026   604F         JZ      ??MT_ZdoCommandProcessing_8
   \   000028   24FE         ADD     A,#-0x2
   \   00002A   6050         JZ      ??MT_ZdoCommandProcessing_9
   \   00002C   14           DEC     A
   \   00002D   6052         JZ      ??MT_ZdoCommandProcessing_10
   \   00002F   14           DEC     A
   \   000030   6054         JZ      ??MT_ZdoCommandProcessing_11
   \   000032   24EC         ADD     A,#-0x14
   \   000034   6055         JZ      ??MT_ZdoCommandProcessing_12
   \   000036   14           DEC     A
   \   000037   6057         JZ      ??MT_ZdoCommandProcessing_13
   \   000039   14           DEC     A
   \   00003A   6059         JZ      ??MT_ZdoCommandProcessing_14
   \   00003C   24FC         ADD     A,#-0x4
   \   00003E   605A         JZ      ??MT_ZdoCommandProcessing_15
   \   000040   14           DEC     A
   \   000041   605C         JZ      ??MT_ZdoCommandProcessing_16
   \   000043   24E9         ADD     A,#-0x17
   \   000045   6062         JZ      ??MT_ZdoCommandProcessing_17
   \   000047   14           DEC     A
   \   000048   6064         JZ      ??MT_ZdoCommandProcessing_18
   \   00004A   14           DEC     A
   \   00004B   6057         JZ      ??MT_ZdoCommandProcessing_19
   \   00004D   8064         SJMP    ??MT_ZdoCommandProcessing_20
    186            {
    187          #if defined ( ZDO_NWKADDR_REQUEST )
    188              case MT_ZDO_NWK_ADDR_REQ:
    189                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   00004F                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   00004F   12....       LCALL   ??MT_ZdoNWKAddressRequest?relay
    190                break;
   \   000052   8061         SJMP    ??MT_ZdoCommandProcessing_21
    191          #endif
    192          
    193          #if defined ( ZDO_IEEEADDR_REQUEST )
    194              case MT_ZDO_IEEE_ADDR_REQ:
    195                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000054                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   000054   12....       LCALL   ??MT_ZdoIEEEAddrRequest?relay
    196                break;
   \   000057   805C         SJMP    ??MT_ZdoCommandProcessing_21
    197          #endif
    198          
    199          #if defined ( ZDO_NODEDESC_REQUEST )
    200              case MT_ZDO_NODE_DESC_REQ:
    201                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000059                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   000059   12....       LCALL   ??MT_ZdoNodeDescRequest?relay
    202                break;
   \   00005C   8057         SJMP    ??MT_ZdoCommandProcessing_21
    203          #endif
    204          
    205          #if defined ( ZDO_POWERDESC_REQUEST )
    206              case MT_ZDO_POWER_DESC_REQ:
    207                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   00005E                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   00005E   12....       LCALL   ??MT_ZdoPowerDescRequest?relay
    208                break;
   \   000061   8052         SJMP    ??MT_ZdoCommandProcessing_21
    209          #endif
    210          
    211          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    212              case MT_ZDO_SIMPLE_DESC_REQ:
    213                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   000063                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   000063   12....       LCALL   ??MT_ZdoSimpleDescRequest?relay
    214                break;
   \   000066   804D         SJMP    ??MT_ZdoCommandProcessing_21
    215          #endif
    216          
    217          #if defined ( ZDO_ACTIVEEP_REQUEST )
    218              case MT_ZDO_ACTIVE_EP_REQ:
    219                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   000068                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   000068   12....       LCALL   ??MT_ZdoActiveEpRequest?relay
    220                break;
   \   00006B   8048         SJMP    ??MT_ZdoCommandProcessing_21
    221          #endif
    222          
    223          #if defined ( ZDO_MATCH_REQUEST )
    224              case MT_ZDO_MATCH_DESC_REQ:
    225                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   00006D                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   00006D   12....       LCALL   ??MT_ZdoMatchDescRequest?relay
    226                break;
   \   000070   8043         SJMP    ??MT_ZdoCommandProcessing_21
    227          #endif
    228          
    229          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    230              case MT_ZDO_COMPLEX_DESC_REQ:
    231                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   000072                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   000072   12....       LCALL   ??MT_ZdoComplexDescRequest?relay
    232                break;
   \   000075   803E         SJMP    ??MT_ZdoCommandProcessing_21
    233          #endif
    234          
    235          #if defined ( ZDO_USERDESC_REQUEST )
    236              case MT_ZDO_USER_DESC_REQ:
    237                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000077                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000077   12....       LCALL   ??MT_ZdoUserDescRequest?relay
    238                break;
   \   00007A   8039         SJMP    ??MT_ZdoCommandProcessing_21
    239          #endif
    240          
    241          #if defined ( ZDO_ENDDEVICE_ANNCE )
    242              case MT_ZDO_END_DEV_ANNCE:
    243                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00007C                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   00007C   12....       LCALL   ??MT_ZdoEndDevAnnce?relay
    244                break;
   \   00007F   8034         SJMP    ??MT_ZdoCommandProcessing_21
    245          #endif      
    246          
    247          #if defined ( ZDO_USERDESCSET_REQUEST )
    248              case MT_ZDO_USER_DESC_SET:
    249                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000081                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000081   12....       LCALL   ??MT_ZdoUserDescSet?relay
    250                break;
   \   000084   802F         SJMP    ??MT_ZdoCommandProcessing_21
    251          #endif
    252          
    253          #if defined ( ZDO_SERVERDISC_REQUEST )
    254              case MT_ZDO_SERVICE_DISC_REQ:
    255                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000086                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   000086   12....       LCALL   ??MT_ZdoServiceDiscRequest?relay
    256                break;
   \   000089   802A         SJMP    ??MT_ZdoCommandProcessing_21
    257          #endif
    258          
    259          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    260              case MT_ZDO_END_DEV_BIND_REQ:
    261                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00008B                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00008B   12....       LCALL   ??MT_ZdoEndDevBindRequest?relay
    262                break;
   \   00008E   8025         SJMP    ??MT_ZdoCommandProcessing_21
    263          #endif
    264          
    265          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    266              case MT_ZDO_BIND_REQ:
    267                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000090                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000090   12....       LCALL   ??MT_ZdoBindRequest?relay
    268                break;
   \   000093   8020         SJMP    ??MT_ZdoCommandProcessing_21
    269          #endif
    270          
    271          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    272              case MT_ZDO_UNBIND_REQ:
    273                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000095                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000095   12....       LCALL   ??MT_ZdoUnbindRequest?relay
    274                break;
   \   000098   801B         SJMP    ??MT_ZdoCommandProcessing_21
    275          #endif
    276                
    277          #if defined ( MT_SYS_KEY_MANAGEMENT )
    278              case MT_ZDO_SET_LINK_KEY:
    279                MT_ZdoSetLinkKey(pBuf);
    280                break;
    281          
    282              case MT_ZDO_REMOVE_LINK_KEY:
    283                MT_ZdoRemoveLinkKey(pBuf);
    284                break;
    285          
    286              case MT_ZDO_GET_LINK_KEY:
    287                MT_ZdoGetLinkKey(pBuf);
    288                break;
    289          #endif // MT_SYS_KEY_MANAGEMENT    
    290                
    291          #if defined ( ZDO_MANUAL_JOIN )
    292              case MT_ZDO_NWK_DISCOVERY_REQ:
    293                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00009A                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   00009A   12....       LCALL   ??MT_ZdoNetworkDiscoveryReq?relay
    294                break;
   \   00009D   8016         SJMP    ??MT_ZdoCommandProcessing_21
    295                
    296              case MT_ZDO_JOIN_REQ:
    297                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   00009F                ; Setup parameters for call to function MT_ZdoJoinReq
   \   00009F   12....       LCALL   ??MT_ZdoJoinReq?relay
    298                break;
   \   0000A2   8011         SJMP    ??MT_ZdoCommandProcessing_21
    299          #endif      
    300          
    301          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    302              case MT_ZDO_MGMT_NWKDISC_REQ:
    303                MT_ZdoMgmtNwkDiscRequest(pBuf);
    304                break;
    305          #endif
    306          
    307          #if defined ( ZDO_MGMT_LQI_REQUEST )
    308              case MT_ZDO_MGMT_LQI_REQ:
    309                MT_ZdoMgmtLqiRequest(pBuf);
    310                break;
    311          #endif
    312          
    313          #if defined ( ZDO_MGMT_RTG_REQUEST )
    314              case MT_ZDO_MGMT_RTG_REQ:
    315                MT_ZdoMgmtRtgRequest(pBuf);
    316                break;
    317          #endif
    318          
    319          #if defined ( ZDO_MGMT_BIND_REQUEST )
    320              case MT_ZDO_MGMT_BIND_REQ:
    321                MT_ZdoMgmtBindRequest(pBuf);
    322                break;
    323          #endif
    324          
    325          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    326              case MT_ZDO_MGMT_LEAVE_REQ:
    327                MT_ZdoMgmtLeaveRequest(pBuf);
    328                break;
    329          #endif
    330          
    331          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    332              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    333                MT_ZdoMgmtDirectJoinRequest(pBuf);
    334                break;
    335          #endif
    336          
    337          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    338              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    339                MT_ZdoMgmtPermitJoinRequest(pBuf);
    340                break;
    341          #endif
    342          
    343          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    344              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    345                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    346                break;
    347          #endif 
    348          
    349          #if defined ( ZDO_NETWORKSTART_REQUEST )
    350              case MT_ZDO_STARTUP_FROM_APP:
    351                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   0000A4                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0000A4   12....       LCALL   ??MT_ZdoStartupFromApp?relay
    352                break;
   \   0000A7   800C         SJMP    ??MT_ZdoCommandProcessing_21
    353          #endif
    354          
    355              case MT_ZDO_MSG_CB_REGISTER:
    356                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0000A9                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0000A9   12....       LCALL   ??MT_ZdoRegisterForZDOMsg?relay
    357                break;
   \   0000AC   8007         SJMP    ??MT_ZdoCommandProcessing_21
    358          
    359              case MT_ZDO_MSG_CB_REMOVE:
    360                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_18:
   \   0000AE                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0000AE   12....       LCALL   ??MT_ZdoRemoveRegisteredCB?relay
    361                break;
   \   0000B1   8002         SJMP    ??MT_ZdoCommandProcessing_21
    362          
    363              default:
    364                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000B3   0E           INC     R6
   \   0000B4   0E           INC     R6
    365                break;
    366            }
    367          
    368            return status;
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F9           MOV     R1,A
   \   0000B7   02....       LJMP    ??Subroutine72_0 & 0xFFFF
    369          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    370          
    371          /***************************************************************************************************
    372           * @fn      MT_ZdoNwkAddrReq
    373           *
    374           * @brief   Handle a nwk address request.
    375           *
    376           * @param   pData  - MT message data
    377           *
    378           * @return  void
    379           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    381          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    382            uint8 cmdId;
    383            uint8 retValue;
    384            uint8 reqType;
    385            uint8 startIndex;
    386            uint8 *pExtAddr;
    387          
    388            /* parse header */
    389            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    390            pBuf += MT_RPC_FRAME_HDR_SZ;
    391          
    392            /* parse parameters */
    393            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FF           MOV     R7,A
    394            pBuf += Z_EXTADDR_LEN;
   \   00001B   EE           MOV     A,R6
   \   00001C   2408         ADD     A,#0x8
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   12....       LCALL   ?Subroutine24 & 0xFFFF
    395          
    396            /* Request type */
    397            reqType = *pBuf++;
    398          
    399            /* Start index */
    400            startIndex = *pBuf;
    401          
    402            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \                     ??CrossCallReturnLabel_37:
   \   000023   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   000026                REQUIRE ?Subroutine5
   \   000026                ; // Fall through to label ?Subroutine5
    403          
    404            /* Build and send back the response */
    405            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    406          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   80..         SJMP    ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   F9           MOV     R1,A
   \   000004   A3           INC     DPTR
   \   000005                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000005                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000005   7D00         MOV     R5,#0x0
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005                REQUIRE ??Subroutine65_0
   \   000005                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC82         MOV     R4,DPL
   \   00000A   AD83         MOV     R5,DPH
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   AA..         MOV     R2,?V0 + 0
   \   000005   22           RET
    407          
    408          /***************************************************************************************************
    409           * @fn      MT_ZdoIEEEAddrRequest
    410           *
    411           * @brief   Handle a IEEE address request.
    412           *
    413           * @param   pData  - MT message data
    414           *
    415           * @return  void
    416           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    418          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    419            uint8 cmdId;
    420            uint8 retValue;
    421            uint16 shortAddr;
    422            uint8 reqType;
    423            uint8 startIndex;
    424          
    425            /* parse header */
    426            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    427            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   12....       LCALL   ?Subroutine31 & 0xFFFF
    428          
    429            /* Dev address */
    430            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_56:
   \   000016   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000019   FE           MOV     R6,A
   \   00001A   E4           CLR     A
   \   00001B   39           ADDC    A,R1
   \   00001C   FF           MOV     R7,A
    431            pBuf += 2;
   \   00001D   EA           MOV     A,R2
   \   00001E   2402         ADD     A,#0x2
   \   000020   0A           INC     R2
   \   000021   0A           INC     R2
   \   000022   EB           MOV     A,R3
   \   000023   12....       LCALL   ?Subroutine24 & 0xFFFF
    432          
    433            /* request type */
    434            reqType = *pBuf++;
    435          
    436            /* start index */
    437            startIndex = *pBuf;
    438          
    439            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??CrossCallReturnLabel_38:
   \   000026   12....       LCALL   ??ZDP_IEEEAddrReq?relay
   \   000029   80..         SJMP    ?Subroutine5
    440          
    441            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    442          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EA           MOV     A,R2
   \   000001   2403         ADD     A,#0x3
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   0A           INC     R2
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   2400         ADD     A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET
    443          
    444          /***************************************************************************************************
    445           * @fn      MT_ZdoNodeDescRequest
    446           *
    447           * @brief   Handle a Node Descriptor request.
    448           *
    449           * @param   pData  - MT message data
    450           *
    451           * @return  void
    452           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    454          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    455            uint8 cmdId;
    456            uint8 retValue;
    457            zAddrType_t destAddr;
    458            uint16 shortAddr;
    459          
    460            /* parse header */
    461            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    462            pBuf += MT_RPC_FRAME_HDR_SZ;
    463          
    464            /* Destination address */
    465            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_107:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    466            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    467            pBuf += 2;
    468          
    469            /* Network address of interest */
    470            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    471            pBuf += 2;
    472          
    473            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_48:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000021   E9           MOV     A,R1
   \   000022   02....       LJMP    ??Subroutine69_0 & 0xFFFF
    474          
    475            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    476          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007   75..00       MOV     ?V0 + 0,#0x0
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EA           MOV     A,R2
   \   000002                REQUIRE ??Subroutine66_0
   \   000002                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   0A           INC     R2
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   F8           MOV     R0,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00000B   7409         MOV     A,#0x9
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   00000A                REQUIRE ??Subroutine70_0
   \   00000A                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000008   FA           MOV     R2,A
   \   000009   7965         MOV     R1,#0x65
   \   00000B   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00000E   740A         MOV     A,#0xa
   \   000010                REQUIRE ??Subroutine71_0
   \   000010                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   2400         ADD     A,#0x0
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET
    477          
    478          /***************************************************************************************************
    479           * @fn      MT_ZdoPowerDescRequest
    480           *
    481           * @brief   Handle a Power Descriptor request.
    482           *
    483           * @param   pData  - MT message data
    484           *
    485           * @return  void
    486           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    488          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    489            uint8 cmdId;
    490            uint8 retValue;
    491            zAddrType_t destAddr;
    492            uint16 shortAddr;
    493          
    494            /* parse header */
    495            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    496            pBuf += MT_RPC_FRAME_HDR_SZ;
    497          
    498            /* Dev address */
    499            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_108:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    500            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    501            pBuf += 2;
    502          
    503            /* Network address of interest */
    504            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    505            pBuf += 2;
    506          
    507            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_49:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7903         MOV     R1,#0x3
   \   00001E   02....       LJMP    ?Subroutine0 & 0xFFFF
    508          
    509            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003                REQUIRE ??Subroutine69_0
   \   000003                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    511          
    512          /***************************************************************************************************
    513           * @fn      MT_ZdoSimpleDescRequest
    514           *
    515           * @brief   Handle a Simple Descriptor request.
    516           *
    517           * @param   pBuf  - MT message data
    518           *
    519           * @return  void
    520           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    522          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    523            uint8 cmdId;
    524            uint8 retValue;
    525            uint8 epInt;
    526            zAddrType_t destAddr;
    527            uint16 shortAddr;
    528          
    529            /* parse header */
    530            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    531            pBuf += MT_RPC_FRAME_HDR_SZ;
    532          
    533            /* Dev address */
    534            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_109:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    535            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_2:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    536            pBuf += 2;
    537          
    538            /* Network address of interest */
    539            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    540            pBuf += 2;
    541          
    542            /* endpoint/interface */
    543            epInt = *pBuf++;
    544          
    545            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??CrossCallReturnLabel_50:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??ZDP_SimpleDescReq?relay
   \   000031   02....       LJMP    ??Subroutine70_0 & 0xFFFF
    546          
    547            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    548          }
    549          
    550          /***************************************************************************************************
    551           * @fn      MT_ZdoActiveEpRequest
    552           *
    553           * @brief   Handle a Active EP request.
    554           *
    555           * @param   pBuf  - MT message data
    556           *
    557           * @return  void
    558           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    560          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    561            uint8 cmdId;
    562            uint8 retValue;
    563            zAddrType_t destAddr;
    564            uint16 shortAddr;
    565          
    566            /* parse header */
    567            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    568            pBuf += MT_RPC_FRAME_HDR_SZ;
    569          
    570            /* Dev address */
    571            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_110:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    572            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_3:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    573            pBuf += 2;
    574          
    575            /* Network address of interest */
    576            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    577            pBuf += 2;
    578          
    579            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_51:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7905         MOV     R1,#0x5
   \   00001E   02....       LJMP    ?Subroutine0 & 0xFFFF
    580          
    581            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    582          }
    583          
    584          /***************************************************************************************************
    585           * @fn      MT_ZdoMatchDescRequest
    586           *
    587           * @brief   Handle a Match Descriptor request.
    588           *
    589           * @param   pBuf  - MT message data
    590           *
    591           * @return  void
    592           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    594          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    595            uint8 cmdId;
    596            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine6 & 0xFFFF
    597            uint8 i, numInClusters, numOutClusters;
    598            uint16 profileId;
    599            zAddrType_t destAddr;
    600            uint16 shortAddr;
    601            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    602          
    603            /* parse header */
    604            cmdId = pBuf[MT_RPC_POS_CMD1];
    605            pBuf += MT_RPC_FRAME_HDR_SZ;
    606          
    607            /* Dev address */
    608            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_105:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    609            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_4:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine23 & 0xFFFF
    610            pBuf += 2;
    611          
    612            /* Network address of interest */
    613            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    614            pBuf += 2;
   \                     ??CrossCallReturnLabel_35:
   \   000019   12....       LCALL   ??Subroutine66_0 & 0xFFFF
    615          
    616            /* Profile ID */
    617            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_104:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   12....       LCALL   ?Subroutine11 & 0xFFFF
    618            pBuf += 2;
    619          
    620            /* NumInClusters */
    621            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_13:
   \   000023   FF           MOV     R7,A
   \   000024   A3           INC     DPTR
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
    622            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000029   C3           CLR     C
   \   00002A   9411         SUBB    A,#0x11
   \   00002C   5015         JNC     ??MT_ZdoMatchDescRequest_0
    623            {
    624              /* IN clusters */
    625              for ( i = 0; i < numInClusters; i++ )
   \   00002E   88..         MOV     ?V0 + 2,R0
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   9F           SUBB    A,R7
   \   000034   5016         JNC     ??MT_ZdoMatchDescRequest_2
    626              {
    627                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000036   12....       LCALL   ?Subroutine14 & 0xFFFF
    628                pBuf += 2;
    629              }
    630            }
   \                     ??CrossCallReturnLabel_17:
   \   000039   742A         MOV     A,#0x2a
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000041   80ED         SJMP    ??MT_ZdoMatchDescRequest_1
    631            else
    632            {
    633              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   7480         MOV     A,#-0x80
   \   00004B   F0           MOVX    @DPTR,A
    634            }
    635          
    636            /* NumOutClusters */
    637            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 6,A
   \   000053   A3           INC     DPTR
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
    638            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000058   C3           CLR     C
   \   000059   9411         SUBB    A,#0x11
   \   00005B   5017         JNC     ??MT_ZdoMatchDescRequest_3
    639            {
    640              /* OUT Clusters */
    641              for ( i = 0; i < numOutClusters; i++ )
   \   00005D   75..00       MOV     ?V0 + 2,#0x0
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000060   E5..         MOV     A,?V0 + 2
   \   000062   C3           CLR     C
   \   000063   95..         SUBB    A,?V0 + 6
   \   000065   5017         JNC     ??MT_ZdoMatchDescRequest_5
    642              {
    643                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000067   12....       LCALL   ?Subroutine14 & 0xFFFF
    644                pBuf += 2;
    645              }
    646            }
   \                     ??CrossCallReturnLabel_18:
   \   00006A   740A         MOV     A,#0xa
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000072   80EC         SJMP    ??MT_ZdoMatchDescRequest_4
    647            else
    648            {
    649              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   7480         MOV     A,#-0x80
   \   00007C   8059         SJMP    ??MT_ZdoMatchDescRequest_6
    650            }
    651          
    652            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_5:
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   7051         JNZ     ??MT_ZdoMatchDescRequest_7
    653            {
    654              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    655                                                 inClusters, numOutClusters, outClusters, 0);
   \   000087                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000087   75..00       MOV     ?V0 + 2,#0x0
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   740B         MOV     A,#0xb
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   8582..       MOV     ?V0 + 2,DPL
   \   000097   8583..       MOV     ?V0 + 3,DPH
   \   00009A   78..         MOV     R0,#?V0 + 2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   E5..         MOV     A,?V0 + 6
   \   0000A1   F5..         MOV     ?V0 + 2,A
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A8   742E         MOV     A,#0x2e
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   8582..       MOV     ?V0 + 2,DPL
   \   0000B0   8583..       MOV     ?V0 + 3,DPH
   \   0000B3   78..         MOV     R0,#?V0 + 2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BD   EF           MOV     A,R7
   \   0000BE   F9           MOV     R1,A
   \   0000BF   7409         MOV     A,#0x9
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   AA82         MOV     R2,DPL
   \   0000C6   AB83         MOV     R3,DPH
   \   0000C8   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000CB   7408         MOV     A,#0x8
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV     A,R1
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_6:
   \   0000D7   F0           MOVX    @DPTR,A
    656            }
    657          
    658            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_7:
   \   0000D8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D8   AC82         MOV     R4,DPL
   \   0000DA   AD83         MOV     R5,DPH
   \   0000DC   7B01         MOV     R3,#0x1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   7965         MOV     R1,#0x65
   \   0000E2   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    659          }
   \   0000E5   744A         MOV     A,#0x4a
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA                REQUIRE ?Subroutine1
   \   0000EA                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 5
   \   000009                REQUIRE ??Subroutine67_0
   \   000009                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   05..         INC     ?V0 + 2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E5..         MOV     A,?V0 + 4
   \   00000C   2400         ADD     A,#0x0
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   F5..         MOV     ?V0 + 5,A
   \   000012   E5..         MOV     A,?V0 + 2
   \   000014   33           RLC     A
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F9           MOV     R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008                REQUIRE ??Subroutine68_0
   \   000008                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EA           MOV     A,R2
   \   000006   2402         ADD     A,#0x2
   \   000008   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FD           MOV     R5,A
   \   00000E   EA           MOV     A,R2
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   0A           INC     R2
   \   000001   0A           INC     R2
   \   000002   EB           MOV     A,R3
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000006                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A                REQUIRE ??Subroutine74_0
   \   00000A                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   E4           CLR     A
   \   000007   C8           XCH     A,R0
   \   000008   F9           MOV     R1,A
   \   000009   E5..         MOV     A,?V0 + 0
   \   00000B   2400         ADD     A,#0x0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   EA           MOV     A,R2
   \   000012   2402         ADD     A,#0x2
   \   000014   0A           INC     R2
   \   000015   0A           INC     R2
   \   000016   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EB           MOV     A,R3
   \   000001                REQUIRE ??Subroutine75_0
   \   000001                ; // Fall through to label ??Subroutine75_0
    660          
    661          /***************************************************************************************************
    662           * @fn      MT_ZdoComplexDescRequest
    663           *
    664           * @brief   Handle a Complex Descriptor request.
    665           *
    666           * @param   pBuf  - MT message data
    667           *
    668           * @return  void
    669           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    671          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    672            uint8 cmdId;
    673            uint8 retValue;
    674            zAddrType_t destAddr;
    675            uint16 shortAddr;
    676          
    677            /* parse header */
    678            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    679            pBuf += MT_RPC_FRAME_HDR_SZ;
    680          
    681            /* Dev address */
    682            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_111:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    683            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_5:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    684            pBuf += 2;
    685          
    686            /* Network address of interest */
    687            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    688            pBuf += 2;
    689          
    690            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_52:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7910         MOV     R1,#0x10
   \   00001E   02....       LJMP    ?Subroutine0 & 0xFFFF
    691          
    692            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    693          }
    694          
    695          /***************************************************************************************************
    696           * @fn      MT_ZdoUserDescRequest
    697           *
    698           * @brief   Handle a User Descriptor request.
    699           *
    700           * @param   pBuf  - MT message data
    701           *
    702           * @return  void
    703           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    705          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    706            uint8 cmdId;
    707            uint8 retValue;
    708            zAddrType_t destAddr;
    709            uint16 shortAddr;
    710          
    711            /* parse header */
    712            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    713            pBuf += MT_RPC_FRAME_HDR_SZ;
    714          
    715            /* Dev address */
    716            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_112:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    717            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_6:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
    718            pBuf += 2;
    719          
    720            /* Network address of interest */
    721            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    722            pBuf += 2;
    723          
    724            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_53:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7911         MOV     R1,#0x11
   \   00001E   80..         SJMP    ?Subroutine0
    725          
    726            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    727          }
    728          
    729          /***************************************************************************************************
    730           * @fn      MT_ZdoEndDevAnnce
    731           *
    732           * @brief   Handle a End Device Announce Descriptor request.
    733           *
    734           * @param   pBuf  - MT message data
    735           *
    736           * @return  void
    737           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine64_0
   \   000001                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    739          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
    740            uint8 cmdId;
    741            uint8 retValue;
    742            uint16 shortAddr;
    743            uint8 *pIEEEAddr;
    744          
    745            /* parse header */
    746            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    747            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   0C           INC     R4
   \   00001A   0C           INC     R4
   \   00001B   0C           INC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FD           MOV     R5,A
    748          
    749            /* network address */
    750            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   C8           XCH     A,R0
   \   00002B   F9           MOV     R1,A
   \   00002C   EA           MOV     A,R2
   \   00002D   2400         ADD     A,#0x0
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
    751            pBuf += 2;
   \   000032   EC           MOV     A,R4
   \   000033   2402         ADD     A,#0x2
   \   000035   0C           INC     R4
   \   000036   0C           INC     R4
   \   000037   ED           MOV     A,R5
   \   000038   3400         ADDC    A,#0x0
   \   00003A   FD           MOV     R5,A
    752          
    753            /* extended address */
    754            pIEEEAddr = pBuf;
    755            pBuf += Z_EXTADDR_LEN;
    756          
    757            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \   00003B                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00003B   88..         MOV     ?V0 + 0,R0
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   02....       LJMP    ?Subroutine4 & 0xFFFF
    758          
    759            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    760          }
    761          
    762          /***************************************************************************************************
    763           * @fn      MT_ZdoUserDescSet
    764           *
    765           * @brief   Handle a User Descriptor Set.
    766           *
    767           * @param   pBuf  - MT message data
    768           *
    769           * @return  void
    770           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    772          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    773            uint8 cmdId;
    774            uint8 retValue;
    775            zAddrType_t destAddr;
    776            uint16 shortAddr;
    777            UserDescriptorFormat_t userDesc;
    778          
    779            /* parse header */
    780            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 3,A
    781            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   12....       LCALL   ?Subroutine33 & 0xFFFF
    782          
    783            /* Dev address */
    784            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_58:
   \   000016   7409         MOV     A,#0x9
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine7 & 0xFFFF
    785            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_7:
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
    786            pBuf += 2;
   \   000026   12....       LCALL   ?Subroutine32 & 0xFFFF
    787          
    788            /* Network address of interest */
    789            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_121:
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   E4           CLR     A
   \   00002E   C8           XCH     A,R0
   \   00002F   F9           MOV     R1,A
   \   000030   EC           MOV     A,R4
   \   000031   2400         ADD     A,#0x0
   \   000033   FE           MOV     R6,A
   \   000034   E4           CLR     A
   \   000035   39           ADDC    A,R1
   \   000036   FF           MOV     R7,A
    790            pBuf += 2;
   \   000037   12....       LCALL   ?Subroutine32 & 0xFFFF
    791          
    792            /* User descriptor */
    793            userDesc.len = *pBuf++;
   \                     ??CrossCallReturnLabel_122:
   \   00003A   C0E0         PUSH    A
   \   00003C   740A         MOV     A,#0xa
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   D0E0         POP     A
   \   000043   F0           MOVX    @DPTR,A
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   A3           INC     DPTR
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
    794            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
   \   000051   88..         MOV     ?V0 + 2,R0
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000058   740D         MOV     A,#0xd
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FC           MOV     R4,A
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   740E         MOV     A,#0xe
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memcpy?relay
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    795            pBuf += 16;
    796          
    797            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000072                ; Setup parameters for call to function ZDP_UserDescSet
   \   000072   740A         MOV     A,#0xa
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   8582..       MOV     ?V0 + 0,DPL
   \   00007A   8583..       MOV     ?V0 + 1,DPH
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7900         MOV     R1,#0x0
   \   000084   EE           MOV     A,R6
   \   000085   FC           MOV     R4,A
   \   000086   EF           MOV     A,R7
   \   000087   FD           MOV     R5,A
   \   000088   7403         MOV     A,#0x3
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??ZDP_UserDescSet?relay
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   12....       LCALL   ?Subroutine58 & 0xFFFF
    798          
    799            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_119:
   \   00009C   AA..         MOV     R2,?V0 + 3
   \   00009E   7965         MOV     R1,#0x65
   \   0000A0   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    800          }
   \   0000A3   741B         MOV     A,#0x1b
   \   0000A5                REQUIRE ?Subroutine2
   \   0000A5                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005                REQUIRE ??Subroutine73_0
   \   000005                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   22           RET
    801          
    802          /***************************************************************************************************
    803           * @fn      MT_ZdoServiceDiscRequest
    804           *
    805           * @brief   Handle a Server Discovery request.
    806           *
    807           * @param   pBuf  - MT message data
    808           *
    809           * @return  void
    810           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    811          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    812          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    813            uint8 cmdId;
    814            uint8 retValue;
    815            uint16 serviceMask;
    816          
    817            /* parse header */
    818            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    819            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   12....       LCALL   ?Subroutine33 & 0xFFFF
    820          
    821            /* Service Mask */
    822            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    823            pBuf += 2;
    824          
    825            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??CrossCallReturnLabel_59:
   \   000015                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000015   7900         MOV     R1,#0x0
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FC           MOV     R4,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   EC           MOV     A,R4
   \   000021   FA           MOV     R2,A
   \   000022   12....       LCALL   ??ZDP_ServerDiscReq?relay
   \   000025   02....       LJMP    ?Subroutine4 & 0xFFFF
    826          
    827            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    828          }
    829          
    830          /***************************************************************************************************
    831           * @fn      MT_ZdoEndDevBindRequest
    832           *
    833           * @brief   Handle a End Device Bind request.
    834           *
    835           * @param   pBuf  - MT message data
    836           *
    837           * @return  void
    838           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    839          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    840          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    841            uint8 cmdId;
    842            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine6 & 0xFFFF
    843            uint8 i, epInt, numInClusters, numOutClusters;
    844            zAddrType_t destAddr;
    845            uint16 shortAddr;
    846            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    847          
    848            /* parse header */
    849            cmdId = pBuf[MT_RPC_POS_CMD1];
    850            pBuf += MT_RPC_FRAME_HDR_SZ;
    851          
    852            /* Dev address */
    853            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_106:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
    854            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_8:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine23 & 0xFFFF
    855            pBuf += 2;
    856          
    857            /* Local coordinator of the binding */
    858            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    859            pBuf += 2;
    860            
    861            /* For now, skip past the extended address */
    862            pBuf += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_36:
   \   000019   240A         ADD     A,#0xa
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??Subroutine73_0 & 0xFFFF
    863          
    864            /* Endpoint */
    865            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_123:
   \   00001F   FF           MOV     R7,A
   \   000020   A3           INC     DPTR
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
    866          
    867            /* Profile ID */
    868            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000025   12....       LCALL   ?Subroutine11 & 0xFFFF
    869            pBuf += 2;
    870          
    871            /* NumInClusters */
    872            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   A3           INC     DPTR
   \   00002B   0A           INC     R2
   \   00002C   AB83         MOV     R3,DPH
    873            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   00002E   C3           CLR     C
   \   00002F   9410         SUBB    A,#0x10
   \   000031   5019         JNC     ??MT_ZdoEndDevBindRequest_0
    874            {
    875              for ( i = 0; i < numInClusters; i++ )
   \   000033   88..         MOV     ?V0 + 2,R0
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000035   E5..         MOV     A,?V0 + 2
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V0 + 4
   \   00003A   5019         JNC     ??MT_ZdoEndDevBindRequest_2
    876              {
    877                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00003C   12....       LCALL   ?Subroutine15 & 0xFFFF
    878                pBuf += 2;
    879              }
    880            }
   \                     ??CrossCallReturnLabel_19:
   \   00003F   7428         MOV     A,#0x28
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000047   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00004A   80E9         SJMP    ??MT_ZdoEndDevBindRequest_1
    881            else
    882              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   7480         MOV     A,#-0x80
   \   000054   F0           MOVX    @DPTR,A
    883          
    884            /* NumOutClusters */
    885            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 5,A
   \   00005C   A3           INC     DPTR
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
    886            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000061   C3           CLR     C
   \   000062   9410         SUBB    A,#0x10
   \   000064   501A         JNC     ??MT_ZdoEndDevBindRequest_3
    887            {
    888              for ( i = 0; i < numOutClusters; i++ )
   \   000066   75..00       MOV     ?V0 + 2,#0x0
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000069   E5..         MOV     A,?V0 + 2
   \   00006B   C3           CLR     C
   \   00006C   95..         SUBB    A,?V0 + 5
   \   00006E   501A         JNC     ??MT_ZdoEndDevBindRequest_5
    889              {
    890                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000070   12....       LCALL   ?Subroutine15 & 0xFFFF
    891                pBuf += 2;
    892              }
    893            }
   \                     ??CrossCallReturnLabel_20:
   \   000073   740A         MOV     A,#0xa
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00007B   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00007E   80E9         SJMP    ??MT_ZdoEndDevBindRequest_4
    894            else
    895              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   7480         MOV     A,#-0x80
   \   000088   8062         SJMP    ??MT_ZdoEndDevBindRequest_6
    896            
    897            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   705A         JNZ     ??MT_ZdoEndDevBindRequest_7
    898            {
    899              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    900                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   000093                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000093   75..00       MOV     ?V0 + 2,#0x0
   \   000096   78..         MOV     R0,#?V0 + 2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   740B         MOV     A,#0xb
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   8582..       MOV     ?V0 + 2,DPL
   \   0000A3   8583..       MOV     ?V0 + 3,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 2
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   E5..         MOV     A,?V0 + 5
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   78..         MOV     R0,#?V0 + 2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   742C         MOV     A,#0x2c
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   8582..       MOV     ?V0 + 2,DPL
   \   0000BC   8583..       MOV     ?V0 + 3,DPH
   \   0000BF   78..         MOV     R0,#?V0 + 2
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   E5..         MOV     A,?V0 + 4
   \   0000C6   F5..         MOV     ?V0 + 2,A
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   EF           MOV     A,R7
   \   0000D3   F9           MOV     R1,A
   \   0000D4   740A         MOV     A,#0xa
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   AA82         MOV     R2,DPL
   \   0000DB   AB83         MOV     R3,DPH
   \   0000DD   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   0000E0   7409         MOV     A,#0x9
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   E9           MOV     A,R1
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   0000EC   F0           MOVX    @DPTR,A
    901            }
    902          
    903            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   0000ED                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000ED   AC82         MOV     R4,DPL
   \   0000EF   AD83         MOV     R5,DPH
   \   0000F1   7B01         MOV     R3,#0x1
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FA           MOV     R2,A
   \   0000F5   7965         MOV     R1,#0x65
   \   0000F7   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    904          }
   \   0000FA   7446         MOV     A,#0x46
   \   0000FC   02....       LJMP    ??Subroutine76_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E5..         MOV     A,?V0 + 6
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 6,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E5..         MOV     A,?V0 + 6
   \   00000C   2400         ADD     A,#0x0
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   F5..         MOV     ?V0 + 7,A
   \   000012   E5..         MOV     A,?V0 + 2
   \   000014   33           RLC     A
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F9           MOV     R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    905          
    906          /***************************************************************************************************
    907           * @fn      MT_ZdoBindRequest
    908           *
    909           * @brief   Handle a Bind request.
    910           *
    911           * @param   pBuf  - MT message data
    912           *
    913           * @return  void
    914           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    915          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
    916          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
    917            uint8 cmdId;
    918            uint8 retValue;
    919            zAddrType_t destAddr, devAddr;
    920            uint8 *pSrcAddr, *ptr;
    921            uint8 srcEPInt, dstEPInt;
    922            uint16 clusterID;
    923          
    924            /* parse header */
    925            cmdId = pBuf[MT_RPC_POS_CMD1];
    926            pBuf += MT_RPC_FRAME_HDR_SZ;
    927          
    928            /* Dev address */
    929            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_27:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine26 & 0xFFFF
    930            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_42:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine10 & 0xFFFF
    931            pBuf += 2;
    932          
    933            /* SrcAddress */
    934            pSrcAddr = pBuf;
    935            pBuf += Z_EXTADDR_LEN;
    936          
    937            /* SrcEPInt */
    938            srcEPInt = *pBuf++;
    939          
    940            /* ClusterID */
    941            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    942            pBuf += 2;
    943          
    944            /* Destination Address mode */
    945            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_11:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine37 & 0xFFFF
    946          
    947            /* Destination Address */
    948            if ( devAddr.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_62:
   \   00001F   7012         JNZ     ??MT_ZdoBindRequest_0
    949            {
    950              ptr = pBuf;
    951              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??sAddrExtCpy?relay
   \   000031   800B         SJMP    ??MT_ZdoBindRequest_1
    952            }
    953            else
    954            {
    955              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_0:
   \   000033   12....       LCALL   ?Subroutine27 & 0xFFFF
    956            }
   \                     ??CrossCallReturnLabel_44:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
    957            /* The short address occupies LSB two bytes */
    958            pBuf += Z_EXTADDR_LEN;
    959          
    960            /* DstEPInt */
    961            dstEPInt = *pBuf;
    962          
    963            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_1:
   \   00003E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00003E   75..00       MOV     ?V0 + 4,#0x0
   \   000041   78..         MOV     R0,#?V0 + 4
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 4,A
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   7403         MOV     A,#0x3
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   8582..       MOV     ?V0 + 4,DPL
   \   000062   8583..       MOV     ?V0 + 5,DPH
   \   000065   78..         MOV     R0,#?V0 + 4
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   78..         MOV     R0,#?V0 + 6
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   78..         MOV     R0,#?V0 + 2
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   A9..         MOV     R1,?V0 + 1
   \   000076   7412         MOV     A,#0x12
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AC82         MOV     R4,DPL
   \   00007D   AD83         MOV     R5,DPH
   \   00007F   7A21         MOV     R2,#0x21
   \   000081                REQUIRE ?Subroutine3
   \   000081                ; // Fall through to label ?Subroutine3
    964          
    965            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    966          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00000D   7965         MOV     R1,#0x65
   \   00000F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000012   7413         MOV     A,#0x13
   \   000014                REQUIRE ??Subroutine76_0
   \   000014                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   7403         MOV     A,#0x3
   \   00000C   68           XRL     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   F8           MOV     R0,A
   \   000004   7401         MOV     A,#0x1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00000A   F8           MOV     R0,A
   \   00000B   740A         MOV     A,#0xa
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000007   7412         MOV     A,#0x12
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EF           MOV     A,R7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   E5..         MOV     A,?V0 + 2
   \   000011   2408         ADD     A,#0x8
   \   000013   FE           MOV     R6,A
   \   000014   E5..         MOV     A,?V0 + 3
   \   000016   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   A3           INC     DPTR
   \   00001C   AE82         MOV     R6,DPL
   \   00001E   AF83         MOV     R7,DPH
   \   000020   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000023   2400         ADD     A,#0x0
   \   000025   F5..         MOV     ?V0 + 6,A
   \   000027   E4           CLR     A
   \   000028   39           ADDC    A,R1
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   EE           MOV     A,R6
   \   00002C   2402         ADD     A,#0x2
   \   00002E   0E           INC     R6
   \   00002F   0E           INC     R6
   \   000030   EF           MOV     A,R7
   \   000031   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000034   F8           MOV     R0,A
   \   000035   7409         MOV     A,#0x9
   \   000037   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FF           MOV     R7,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   EE           MOV     A,R6
   \   00000A   2403         ADD     A,#0x3
   \   00000C   0E           INC     R6
   \   00000D   0E           INC     R6
   \   00000E   0E           INC     R6
   \   00000F   EF           MOV     A,R7
   \   000010   3400         ADDC    A,#0x0
   \   000012   FF           MOV     R7,A
   \   000013   22           RET
    967          
    968          /***************************************************************************************************
    969           * @fn      MT_ZdoUnbindRequest
    970           *
    971           * @brief   Handle a Unbind request.
    972           *
    973           * @param   pBuf  - MT message data
    974           *
    975           * @return  void
    976           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
    978          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
    979            uint8 cmdId;
    980            uint8 retValue;
    981            zAddrType_t destAddr, devAddr;
    982            uint8 *pSrcAddr, *ptr;
    983            uint8 srcEPInt, dstEPInt;
    984            uint16 clusterID;
    985          
    986            /* parse header */
    987            cmdId = pBuf[MT_RPC_POS_CMD1];
    988            pBuf += MT_RPC_FRAME_HDR_SZ;
    989          
    990            /* dev address */
    991            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_28:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine26 & 0xFFFF
    992            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_43:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine10 & 0xFFFF
    993            pBuf += 2;
    994          
    995            /* SrcAddress */
    996            pSrcAddr = pBuf;
    997            pBuf += Z_EXTADDR_LEN;
    998          
    999            /* SrcEPInt */
   1000            srcEPInt = *pBuf++;
   1001          
   1002            /* ClusterID */
   1003            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1004            pBuf += 2;
   1005          
   1006            /* Destination Address mode */
   1007            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_12:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine37 & 0xFFFF
   1008          
   1009            /* Destination Address */
   1010            if ( devAddr.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_63:
   \   00001F   7012         JNZ     ??MT_ZdoUnbindRequest_0
   1011            {
   1012              ptr = pBuf;
   1013              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??sAddrExtCpy?relay
   \   000031   800B         SJMP    ??MT_ZdoUnbindRequest_1
   1014            }
   1015            else
   1016            {
   1017              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_0:
   \   000033   12....       LCALL   ?Subroutine27 & 0xFFFF
   1018            }
   \                     ??CrossCallReturnLabel_45:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   1019            /* The short address occupies LSB two bytes */
   1020            pBuf += Z_EXTADDR_LEN;
   1021          
   1022            /* dstEPInt */
   1023            dstEPInt = *pBuf;
   1024          
   1025            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_1:
   \   00003E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00003E   75..00       MOV     ?V0 + 4,#0x0
   \   000041   78..         MOV     R0,#?V0 + 4
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 4,A
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   7403         MOV     A,#0x3
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   8582..       MOV     ?V0 + 4,DPL
   \   000062   8583..       MOV     ?V0 + 5,DPH
   \   000065   78..         MOV     R0,#?V0 + 4
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   78..         MOV     R0,#?V0 + 6
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   78..         MOV     R0,#?V0 + 2
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   A9..         MOV     R1,?V0 + 1
   \   000076   7412         MOV     A,#0x12
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AC82         MOV     R4,DPL
   \   00007D   AD83         MOV     R5,DPH
   \   00007F   7A22         MOV     R2,#0x22
   \   000081   02....       LJMP    ?Subroutine3 & 0xFFFF
   1026          
   1027            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1028          }
   1029          
   1030          #if defined (MT_SYS_KEY_MANAGEMENT)
   1031          /***************************************************************************************************
   1032           * @fn      MT_ZdoSetLinkKey
   1033           *
   1034           * @brief   Set an application or trust center link key.
   1035           *
   1036           * @param   pBuf  - MT message data
   1037           *
   1038           * @return  void
   1039           ***************************************************************************************************/
   1040          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1041          {
   1042            uint8 cmdId;
   1043            uint8 retValue;
   1044            uint8 *pExtAddr;
   1045            uint8 *pKey;
   1046            uint16 shortAddr;
   1047            
   1048            /* parse header */
   1049            cmdId = pBuf[MT_RPC_POS_CMD1];
   1050            pBuf += MT_RPC_FRAME_HDR_SZ;
   1051          
   1052            /* ShortAddr */
   1053            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1054            pBuf += 2;
   1055            
   1056            /* Extended Addr */
   1057            pExtAddr = pBuf;
   1058            pBuf += Z_EXTADDR_LEN;
   1059            
   1060            /* Key data */
   1061            pKey = pBuf;
   1062          
   1063            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1064          
   1065            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1066          }
   1067          
   1068          /***************************************************************************************************
   1069           * @fn      MT_ZdoRemoveLinkKey
   1070           *
   1071           * @brief   Remove an application or trust center link key.
   1072           *
   1073           * @param   pBuf  - MT message data
   1074           *
   1075           * @return  void
   1076           ***************************************************************************************************/
   1077          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1078          {
   1079            uint8 cmdId;
   1080            uint8 retValue;
   1081            uint8 *pExtAddr;
   1082              
   1083            /* parse header */
   1084            cmdId = pBuf[MT_RPC_POS_CMD1];
   1085            pBuf += MT_RPC_FRAME_HDR_SZ;
   1086            
   1087            /* ShortAddr */
   1088            pExtAddr = pBuf;
   1089          
   1090            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1091          
   1092            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1093          }
   1094          
   1095          /***************************************************************************************************
   1096           * @fn      MT_ZdoGetLinkKey
   1097           *
   1098           * @brief   Get the application link key.
   1099           *
   1100           * @param   pBuf  - MT message data
   1101           *
   1102           * @return  void
   1103           ***************************************************************************************************/
   1104          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1105          {
   1106            uint8 cmdId;
   1107            uint8 retValue;
   1108            uint8 *pExtAddr;
   1109            uint8 *retBuf = NULL;
   1110            uint8 len;
   1111            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1112            uint16 apsLinkKeyNvId;
   1113            
   1114            // parse header
   1115            cmdId = pBuf[MT_RPC_POS_CMD1];
   1116            pBuf += MT_RPC_FRAME_HDR_SZ;
   1117            
   1118            // Extended Address
   1119            pExtAddr = pBuf;
   1120          
   1121            // Fetch the key NV ID
   1122            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1123          
   1124            if (retValue == ZSuccess)
   1125            {
   1126              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1127              {
   1128                // retrieve key from NV
   1129                if (osal_nv_read( apsLinkKeyNvId, 0, 
   1130                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1131                {
   1132                  retValue = ZNwkUnknownDevice;
   1133                }
   1134              }
   1135              else
   1136              {
   1137                retValue = ZNwkUnknownDevice;
   1138              }
   1139            }
   1140            
   1141            // Construct the response message
   1142            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1143            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1144            {  
   1145              if (retValue == ZSuccess)
   1146              {
   1147                // Extended Address
   1148                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1149                
   1150                // Key data
   1151                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );      
   1152              }
   1153              else
   1154              {
   1155                // Failed case - set the rest fields to all FF
   1156                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );   
   1157              }    
   1158              
   1159              retBuf[0] = retValue;  // Status
   1160              
   1161              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1162          
   1163              // clear retBuf because it contains key data and free allocated memory
   1164              osal_memset(retBuf, 0x00, len);   
   1165              
   1166              osal_mem_free(retBuf);
   1167            }
   1168            
   1169            // clear copy of key in RAM
   1170            if (pApsLinkKey != NULL)
   1171            {
   1172              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1173              
   1174              osal_mem_free(pApsLinkKey);
   1175            }
   1176          
   1177            return;
   1178          }
   1179          #endif // MT_SYS_KEY_MANAGEMENT
   1180          
   1181          #if defined (MT_ZDO_MGMT)
   1182          /***************************************************************************************************
   1183           * @fn      MT_ZdoMgmtNwkDiscRequest
   1184           *
   1185           * @brief   Handle a Mgmt Nwk Discovery request.
   1186           *
   1187           * @param   pBuf  - MT message data
   1188           *
   1189           * @return  void
   1190           ***************************************************************************************************/
   1191          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1192          {
   1193            uint8 cmdId;
   1194            uint8 retValue;
   1195            zAddrType_t destAddr;
   1196            uint32 scanChannels;
   1197            uint8 scanDuration, startIndex;
   1198          
   1199            /* parse header */
   1200            cmdId = pBuf[MT_RPC_POS_CMD1];
   1201            pBuf += MT_RPC_FRAME_HDR_SZ;
   1202          
   1203            /* Dev address */
   1204            destAddr.addrMode = Addr16Bit;
   1205            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1206            pBuf += 2;
   1207          
   1208            /* Scan Channels */
   1209            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1210            pBuf += 4;
   1211          
   1212            /* Scan Duration */
   1213            scanDuration = *pBuf++;
   1214          
   1215            /* Start Index */
   1216            startIndex = *pBuf;
   1217          
   1218            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1219          
   1220            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1221          }
   1222          
   1223          /***************************************************************************************************
   1224           * @fn      MT_ZdoMgmtLqiRequest
   1225           *
   1226           * @brief   Handle a Mgmt Lqi request.
   1227           *
   1228           * @param   pBuf  - MT message data
   1229           *
   1230           * @return  void
   1231           ***************************************************************************************************/
   1232          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1233          {
   1234            uint8 cmdId;
   1235            uint8 retValue;
   1236            zAddrType_t destAddr;
   1237            uint8 startIndex;
   1238          
   1239            /* parse header */
   1240            cmdId = pBuf[MT_RPC_POS_CMD1];
   1241            pBuf += MT_RPC_FRAME_HDR_SZ;
   1242          
   1243            /* Dev address */
   1244            destAddr.addrMode = Addr16Bit;
   1245            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1246            pBuf += 2;
   1247          
   1248            /* Start Index */
   1249            startIndex = *pBuf;
   1250          
   1251            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1252          
   1253            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1254          }
   1255          
   1256          /***************************************************************************************************
   1257           * @fn      MT_ZdoMgmtRtgRequest
   1258           *
   1259           * @brief   Handle a Mgmt Rtg request.
   1260           *
   1261           * @param   pBuf  - MT message data
   1262           *
   1263           * @return  void
   1264           ***************************************************************************************************/
   1265          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1266          {
   1267            uint8 cmdId;
   1268            uint8 retValue;
   1269            zAddrType_t destAddr;
   1270            uint8 startIndex;
   1271          
   1272            /* parse header */
   1273            cmdId = pBuf[MT_RPC_POS_CMD1];
   1274            pBuf += MT_RPC_FRAME_HDR_SZ;
   1275          
   1276            /* Dev Address */
   1277            destAddr.addrMode = Addr16Bit;
   1278            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1279            pBuf += 2;
   1280          
   1281            /* Start Index */
   1282            startIndex = *pBuf;
   1283          
   1284            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1285          
   1286            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1287          }
   1288          
   1289          /***************************************************************************************************
   1290           * @fn      MT_ZdoMgmtBindRequest
   1291           *
   1292           * @brief   Handle a Mgmt Bind request.
   1293           *
   1294           * @param   pBuf  - MT message data
   1295           *
   1296           * @return  void
   1297           ***************************************************************************************************/
   1298          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1299          {
   1300            uint8 cmdId;
   1301            uint8 retValue;
   1302            zAddrType_t destAddr;
   1303            uint8 startIndex;
   1304          
   1305            /* parse header */
   1306            cmdId = pBuf[MT_RPC_POS_CMD1];
   1307            pBuf += MT_RPC_FRAME_HDR_SZ;
   1308          
   1309            /* Dev Address */
   1310            destAddr.addrMode = Addr16Bit;
   1311            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1312            pBuf += 2;
   1313          
   1314            /* Start Index */
   1315            startIndex = *pBuf;
   1316          
   1317            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1318          
   1319            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1320          }
   1321          
   1322          /***************************************************************************************************
   1323           * @fn      MT_ZdoMgmtLeaveRequest
   1324           *
   1325           * @brief   Handle a Mgmt Leave request.
   1326           *
   1327           * @param   pBuf  - MT message data
   1328           *
   1329           * @return  void
   1330           ***************************************************************************************************/
   1331          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1332          {
   1333            uint8 cmdId;
   1334            uint8 retValue;
   1335            zAddrType_t destAddr;
   1336            uint8 *pIEEEAddr;
   1337            uint8 removeChildren, rejoin;
   1338          
   1339            /* parse header */
   1340            cmdId = pBuf[MT_RPC_POS_CMD1];
   1341            pBuf += MT_RPC_FRAME_HDR_SZ;
   1342          
   1343            /* Destination Address */
   1344            destAddr.addrMode = Addr16Bit;
   1345            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1346            pBuf += 2;
   1347          
   1348            /* IEEE address */
   1349            pIEEEAddr = pBuf;
   1350            pBuf += Z_EXTADDR_LEN;
   1351          
   1352            /* Remove Children */
   1353            removeChildren = *pBuf++;
   1354          
   1355            /* Rejoin */
   1356            rejoin = *pBuf;
   1357          
   1358            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1359          
   1360            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1361          }
   1362          
   1363          
   1364          /***************************************************************************************************
   1365           * @fn      MT_ZdoMgmtDirectJoinRequest
   1366           *
   1367           * @brief   Handle a Mgmt Direct Join request.
   1368           *
   1369           * @param   pBuf  - MT message data
   1370           *
   1371           * @return  void
   1372           ***************************************************************************************************/
   1373          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1374          {
   1375            uint8 cmdId;
   1376            uint8 retValue;
   1377            zAddrType_t destAddr;
   1378            uint8 *deviceAddr;
   1379            uint8 capInfo;
   1380          
   1381            /* parse header */
   1382            cmdId = pBuf[MT_RPC_POS_CMD1];
   1383            pBuf += MT_RPC_FRAME_HDR_SZ;
   1384          
   1385            /* Destination Address */
   1386            destAddr.addrMode = Addr16Bit;
   1387            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1388            pBuf += 2;
   1389          
   1390            /* Device Address */
   1391            deviceAddr = pBuf;
   1392            pBuf += Z_EXTADDR_LEN;
   1393          
   1394            /* Capability information */
   1395            capInfo = *pBuf;
   1396          
   1397            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1398          
   1399            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1400          }
   1401          
   1402          /***************************************************************************************************
   1403           * @fn      MT_ZdoMgmtPermitJoinRequest
   1404           *
   1405           * @brief   Handle a Mgmt Permit Join request.
   1406           *
   1407           * @param   pBuf  - MT message data
   1408           *
   1409           * @return  void
   1410           ***************************************************************************************************/
   1411          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1412          {
   1413            uint8 cmdId;
   1414            uint8 retValue;
   1415            zAddrType_t destAddr;
   1416            uint8 duration, tcSignificance;
   1417          
   1418            /* parse header */
   1419            cmdId = pBuf[MT_RPC_POS_CMD1];
   1420            pBuf += MT_RPC_FRAME_HDR_SZ;
   1421          
   1422            /* Destination Address */
   1423            destAddr.addrMode = Addr16Bit;
   1424            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1425            pBuf += 2;
   1426          
   1427            /* Duration */
   1428            duration = *pBuf++;
   1429          
   1430            /* Trust center significance */
   1431            tcSignificance = *pBuf;
   1432          
   1433            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1434          
   1435            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1436          }
   1437          
   1438          /***************************************************************************************************
   1439           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1440           *
   1441           * @brief   Handle a Mgmt Nwk Update request.
   1442           *
   1443           * @param   pBuf  - MT message data
   1444           *
   1445           * @return  void
   1446           ***************************************************************************************************/
   1447          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1448          {
   1449            uint8 cmdId;
   1450            uint8 retValue;
   1451            zAddrType_t destAddr;
   1452            uint32 channelMask;
   1453            uint8 scanDuration, scanCount;
   1454            uint16 nwkManagerAddr;
   1455          
   1456              /* parse header */
   1457            cmdId = pBuf[MT_RPC_POS_CMD1];
   1458            pBuf += MT_RPC_FRAME_HDR_SZ;
   1459          
   1460            /* Destination address */
   1461            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1462            pBuf += 2;
   1463          
   1464            /* Destination address mode */
   1465            destAddr.addrMode = *pBuf++;
   1466          
   1467            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1468            pBuf += 4;
   1469          
   1470            /* Scan duration */
   1471            scanDuration = *pBuf++;
   1472          
   1473            /* Scan count */
   1474            scanCount = *pBuf++;
   1475          
   1476            /* NWK manager address */
   1477            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1478          
   1479            /* Send the Management Network Update request */
   1480            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1481                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1482          
   1483            /*
   1484              Since we don't recevied our own broadcast messages, we should
   1485              send a unicast copy of the message to ourself.
   1486            */
   1487            if ( destAddr.addrMode == AddrBroadcast )
   1488            {
   1489              destAddr.addrMode = Addr16Bit;
   1490              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1491              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1492                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1493            }
   1494          
   1495            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1496          }
   1497          #endif /* MT_ZDO_MGMT */
   1498          
   1499          /***************************************************************************************************
   1500           * @fn      MT_ZdoStartupFromApp
   1501           *
   1502           * @brief   Handle a Startup from App request.
   1503           *
   1504           * @param   pBuf  - MT message data
   1505           *
   1506           * @return  void
   1507           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1508          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1509          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1510            uint8 cmd0, cmd1, retValue;
   1511          
   1512            /* parse header */
   1513            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine48 & 0xFFFF
   1514            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1515            pBuf += MT_RPC_FRAME_HDR_SZ;
   1516          
   1517            retValue = ZDOInitDevice(100);
   \                     ??CrossCallReturnLabel_81:
   \   00000D                ; Setup parameters for call to function ZDOInitDevice
   \   00000D   7A64         MOV     R2,#0x64
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??ZDOInitDevice?relay
   \   000014   12....       LCALL   ?Subroutine39 & 0xFFFF
   1518          
   1519            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_66:
   \   000017   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1520            {
   1521              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000019                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   7B01         MOV     R3,#0x1
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   7965         MOV     R1,#0x65
   \   000023   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1522            }
   1523          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000026   02....       LJMP    ??Subroutine65_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   74E0         MOV     A,#-0x20
   \   00000A   5F           ANL     A,R7
   \   00000B   6420         XRL     A,#0x20
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   22           RET
   1524          
   1525          
   1526          /***************************************************************************************************
   1527           * @fn      MT_ZdoNetworkDiscoveryReq
   1528           *
   1529           * @brief   Handle a ZDO Network Discovery request.
   1530           *
   1531           * @param   pBuf  - MT message data
   1532           *
   1533           * @return  void
   1534           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1535          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1536          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1537            uint8  retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   1538            uint8  cmdId;
   1539            uint32 scanChannels;
   1540          
   1541            /* parse header */
   1542            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   1543            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   12....       LCALL   ?Subroutine31 & 0xFFFF
   1544          
   1545            /* Packet format */
   1546            /* scan channels (4) | scan duration (1) */
   1547            
   1548            /* Scan channels */
   1549            scanChannels = osal_build_uint32(pBuf, 4);
   1550            pBuf += 4;
   1551          
   1552            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf); 
   \                     ??CrossCallReturnLabel_57:
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   \   000024                ; Setup parameters for call to function osal_build_uint32
   \   000024   7904         MOV     R1,#0x4
   \   000026   12....       LCALL   ??osal_build_uint32?relay
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??ZDApp_NetworkDiscoveryReq?relay
   \   00002E   E9           MOV     A,R1
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   F0           MOVX    @DPTR,A
   1553            
   1554            // Register ZDO callback for MT to handle the network discovery confirm 
   1555            // and beacon notification confirm
   1556            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   000036                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000036   7A..         MOV     R2,#??MT_ZdoNwkDiscoveryCnfCB?relay & 0xff
   \   000038   7B..         MOV     R3,#(??MT_ZdoNwkDiscoveryCnfCB?relay >> 8) & 0xff
   \   00003A   7902         MOV     R1,#0x2
   \   00003C   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
   1557            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   00003F                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003F   7A..         MOV     R2,#??MT_ZdoBeaconIndCB?relay & 0xff
   \   000041   7B..         MOV     R3,#(??MT_ZdoBeaconIndCB?relay >> 8) & 0xff
   \   000043   7903         MOV     R1,#0x3
   \   000045   12....       LCALL   ?Subroutine42 & 0xFFFF
   1558            
   1559            /* Build and send back the response */
   1560            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \                     ??CrossCallReturnLabel_71:
   \   000048   EF           MOV     A,R7
   \   000049   02....       LJMP    ??Subroutine63_0 & 0xFFFF
   1561          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
   \   000003                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000003                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   AC82         MOV     R4,DPL
   \   00000B   AD83         MOV     R5,DPH
   \   00000D   7B01         MOV     R3,#0x1
   \   00000F   22           RET
   1562          
   1563          
   1564          /***************************************************************************************************
   1565           * @fn      MT_ZdoJoinReq
   1566           *
   1567           * @brief   Handle a ZDO Join request.
   1568           *
   1569           * @param   pBuf  - MT message data
   1570           *
   1571           * @return  void
   1572           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1573          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1574          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1575            uint8  retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   1576            uint8  cmdId;
   1577            uint16 panId;
   1578            uint16 chosenParent;
   1579            
   1580            /* parse header */
   1581            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   12....       LCALL   ?Subroutine45 & 0xFFFF
   1582            pBuf += MT_RPC_FRAME_HDR_SZ;
   1583            
   1584            /* Packet format */
   1585            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) | 
   1586             * parentDepth (1) | stackProfile  (1) 
   1587             */
   1588          
   1589            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1590            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1591              
   1592            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??CrossCallReturnLabel_78:
   \   00001A                ; Setup parameters for call to function ZDApp_JoinReq
   \   00001A   EE           MOV     A,R6
   \   00001B   240E         ADD     A,#0xe
   \   00001D   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000023   EE           MOV     A,R6
   \   000024   240D         ADD     A,#0xd
   \   000026   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   EE           MOV     A,R6
   \   00002D   240B         ADD     A,#0xb
   \   00002F   F582         MOV     DPL,A
   \   000031   EF           MOV     A,R7
   \   000032   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000035   FA           MOV     R2,A
   \   000036   EE           MOV     A,R6
   \   000037   240C         ADD     A,#0xc
   \   000039   F582         MOV     DPL,A
   \   00003B   EF           MOV     A,R7
   \   00003C   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00003F   F9           MOV     R1,A
   \   000040   EA           MOV     A,R2
   \   000041   2400         ADD     A,#0x0
   \   000043   F5..         MOV     ?V0 + 2,A
   \   000045   E4           CLR     A
   \   000046   39           ADDC    A,R1
   \   000047   F5..         MOV     ?V0 + 3,A
   \   000049   78..         MOV     R0,#?V0 + 2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   EE           MOV     A,R6
   \   00004F   2403         ADD     A,#0x3
   \   000051   FC           MOV     R4,A
   \   000052   EF           MOV     A,R7
   \   000053   3400         ADDC    A,#0x0
   \   000055   FD           MOV     R5,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   2400         ADD     A,#0x0
   \   000068   E4           CLR     A
   \   000069   39           ADDC    A,R1
   \   00006A   FB           MOV     R3,A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   ??ZDApp_JoinReq?relay
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   F0           MOVX    @DPTR,A
   1593          
   1594            /* Register for MT to receive Join Confirm */
   1595            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   000081                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000081   7A..         MOV     R2,#??MT_ZdoJoinCnfCB?relay & 0xff
   \   000083   7B..         MOV     R3,#(??MT_ZdoJoinCnfCB?relay >> 8) & 0xff
   \   000085   7904         MOV     R1,#0x4
   \   000087   12....       LCALL   ?Subroutine42 & 0xFFFF
   1596              
   1597            /* Build and send back the response */
   1598            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \                     ??CrossCallReturnLabel_72:
   \   00008A   AA..         MOV     R2,?V0 + 0
   \   00008C   7965         MOV     R1,#0x65
   \   00008E   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1599          
   1600          }
   \   000091   7401         MOV     A,#0x1
   \   000093   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 1,A
   \   000009   78..         MOV     R0,#?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1601          
   1602          /***************************************************************************************************
   1603           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1604           *
   1605           * @brief       Send an indication to inform host device the completion of  
   1606           *              network discovery scan
   1607           *
   1608           * @param       pStr - pointer to a parameter and a structure of parameters
   1609           *
   1610           * @return      void
   1611           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1614            /* pStr: status (uint8) */
   1615            /* Packet Format */
   1616            /* Status (1) */
   1617            
   1618            // Scan completed. De-register the callback with ZDO
   1619            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1620            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV     R1,#0x3
   \   000010   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1621            
   1622            // Send the buffered beacon indication
   1623            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   ??MT_ZdoBeaconIndCB?relay
   1624                              
   1625            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1626                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7B01         MOV     R3,#0x1
   \   000020   7AC7         MOV     R2,#-0x39
   \   000022   7945         MOV     R1,#0x45
   \   000024   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1627            return NULL;
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   02....       LJMP    ??Subroutine72_0 & 0xFFFF
   1628          }
   1629          
   1630          
   1631          
   1632          /***************************************************************************************************
   1633           * @fn          MT_ZdoBeaconIndCB
   1634           *
   1635           * @brief       Send an indication to host device of a beacon notification
   1636           *
   1637           * @param       pStr -  pointer to a parameter and a structure of parameters
   1638           *
   1639           * @return      void
   1640           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1642          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1643            zdoBeaconInd_t *pBeacon = pStr;
   1644            uint8 *pTmp;
   1645            
   1646            /* Packet Format */
   1647            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1648            
   1649            if( pStr != NULL)
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1650            {
   1651              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000016   7027         JNZ     ??MT_ZdoBeaconIndCB_1
   1652              {
   1653                // If pBeaconIndBuf has not been allocated yet
   1654                // allocate memory now with MAX_UART_TX_BUFF
   1655                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A7B         MOV     R2,#0x7b
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_mem_alloc?relay
   \   00001F   90....       MOV     DPTR,#pBeaconIndBuf
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   EB           MOV     A,R3
   \   000026   F0           MOVX    @DPTR,A
   \   000027   90....       MOV     DPTR,#pBeaconIndBuf
   \   00002A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00002D   7009         JNZ     ??MT_ZdoBeaconIndCB_2
   1656                {
   1657                  // Memory failure
   1658                  return NULL;
   \                     ??MT_ZdoBeaconIndCB_3:
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   7F03         MOV     R7,#0x3
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
   1659                }
   1660                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F583         MOV     DPH,A
   \   00003B   8882         MOV     DPL,R0
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   1661              }
   1662              
   1663              // Fill in the buffer with the beacon indication
   1664              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   00003F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000042   F8           MOV     R0,A
   \   000043   A9F0         MOV     R1,B
   \   000045   90....       MOV     DPTR,#pBeaconIndBuf
   \   000048   E0           MOVX    A,@DPTR
   \   000049   28           ADD     A,R0
   \   00004A   FA           MOV     R2,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   39           ADDC    A,R1
   \   00004E   8A82         MOV     DPL,R2
   \   000050   F583         MOV     DPH,A
   \   000052   A3           INC     DPTR
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   1665              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   12....       LCALL   ?Subroutine20 & 0xFFFF
   1666              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_29:
   \   00005E   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   1667              *pTmp++ = LO_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_132:
   \   000061   2402         ADD     A,#0x2
   \   000063   F8           MOV     R0,A
   \   000064   EF           MOV     A,R7
   \   000065   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000068   0A           INC     R2
   \   000069   AB83         MOV     R3,DPH
   1668              *pTmp++ = HI_UINT16(pBeacon->panID);
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   A3           INC     DPTR
   \   000070   12....       LCALL   ?Subroutine20 & 0xFFFF
   1669              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_30:
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ?Subroutine17 & 0xFFFF
   1670              *pTmp++ = pBeacon->permitJoining;    
   \                     ??CrossCallReturnLabel_23:
   \   000079   12....       LCALL   ?Subroutine17 & 0xFFFF
   1671              *pTmp++ = pBeacon->routerCapacity;    
   \                     ??CrossCallReturnLabel_24:
   \   00007C   A3           INC     DPTR
   \   00007D   12....       LCALL   ?Subroutine16 & 0xFFFF
   1672              *pTmp++ = pBeacon->deviceCapacity;    
   \                     ??CrossCallReturnLabel_21:
   \   000080   12....       LCALL   ?Subroutine16 & 0xFFFF
   1673              *pTmp++ = pBeacon->protocolVersion;    
   \                     ??CrossCallReturnLabel_22:
   \   000083   A3           INC     DPTR
   \   000084   12....       LCALL   ?Subroutine13 & 0xFFFF
   1674              *pTmp++ = pBeacon->stackProfile;    
   \                     ??CrossCallReturnLabel_15:
   \   000087   12....       LCALL   ?Subroutine13 & 0xFFFF
   1675              *pTmp++ = pBeacon->LQI;    
   \                     ??CrossCallReturnLabel_16:
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   1676              *pTmp++ = pBeacon->depth;    
   \                     ??CrossCallReturnLabel_133:
   \   00008E   240B         ADD     A,#0xb
   \   000090   12....       LCALL   ?Subroutine12 & 0xFFFF
   1677              *pTmp++ = pBeacon->updateID;  
   \                     ??CrossCallReturnLabel_130:
   \   000093   240C         ADD     A,#0xc
   \   000095   12....       LCALL   ?Subroutine12 & 0xFFFF
   1678              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_131:
   \   000098   240D         ADD     A,#0xd
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   EF           MOV     A,R7
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   F5..         MOV     ?V0 + 1,A
   \   0000A1   75..00       MOV     ?V0 + 2,#0x0
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV     R4,#0x8
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   12....       LCALL   ??osal_memcpy?relay
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   1679              
   1680              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   0000B5   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000B8   04           INC     A
   \   0000B9   F0           MOVX    @DPTR,A
   1681              
   1682              // Check if the buffer can fit in another beacon
   1683              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   0000BA   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000BD   2416         ADD     A,#0x16
   \   0000BF   F8           MOV     R0,A
   \   0000C0   E5F0         MOV     A,B
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   F9           MOV     R1,A
   \   0000C5   C3           CLR     C
   \   0000C6   E8           MOV     A,R0
   \   0000C7   947C         SUBB    A,#0x7c
   \   0000C9   E9           MOV     A,R1
   \   0000CA   9400         SUBB    A,#0x0
   \   0000CC   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000CE   65D0         XRL     A,PSW
   \   0000D0   33           RLC     A
   \   0000D1   5003         JNC     $+5
   \   0000D3   02....       LJMP    ??MT_ZdoBeaconIndCB_3 & 0xFFFF
   1684              {
   1685                // Packet full, send the packet over MT
   1686                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1687                                             MT_ZDO_BEACON_NOTIFY_IND, 
   1688                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   0000D6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D6   12....       LCALL   ?Subroutine28 & 0xFFFF
   1689                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   1690              }
   1691            }
   \                     ??CrossCallReturnLabel_46:
   \   0000D9   90....       MOV     DPTR,#pBeaconIndBuf
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   E4           CLR     A
   \                     ??MT_ZdoBeaconIndCB_4:
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   02....       LJMP    ??MT_ZdoBeaconIndCB_3 & 0xFFFF
   1692            else
   1693            {
   1694              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   0000EC   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000EF   7003         JNZ     $+5
   \   0000F1   02....       LJMP    ??MT_ZdoBeaconIndCB_3 & 0xFFFF
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   600E         JZ      ??MT_ZdoBeaconIndCB_5
   1695              {
   1696                // End of beacon indication, send the packet over MT
   1697                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1698                                             MT_ZDO_BEACON_NOTIFY_IND, 
   1699                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   0000FC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FC   12....       LCALL   ?Subroutine28 & 0xFFFF
   1700              }
   \                     ??CrossCallReturnLabel_47:
   \   0000FF   12....       LCALL   ?Subroutine18 & 0xFFFF
   1701              // Free the allocated memory
   1702              if(pBeaconIndBuf != NULL)
   \                     ??CrossCallReturnLabel_26:
   \   000102   F9           MOV     R1,A
   \   000103   E8           MOV     A,R0
   \   000104   49           ORL     A,R1
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??MT_ZdoBeaconIndCB_3 & 0xFFFF
   1703              {
   1704                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_5:
   \   00010A                ; Setup parameters for call to function osal_mem_free
   \   00010A   90....       MOV     DPTR,#pBeaconIndBuf
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FA           MOV     R2,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   ??osal_mem_free?relay
   1705                pBeaconIndBuf = NULL;
   \   000115   90....       MOV     DPTR,#pBeaconIndBuf
   \   000118   E4           CLR     A
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   80CB         SJMP    ??MT_ZdoBeaconIndCB_4
   1706              }
   1707            }
   1708            
   1709            return NULL;
   1710          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   75F015       MOV     B,#0x15
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   75F015       MOV     B,#0x15
   \   000006   A4           MUL     AB
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F583         MOV     DPH,A
   \   000002   8882         MOV     DPL,R0
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A4           MUL     AB
   \   000006   04           INC     A
   \   000007   FB           MOV     R3,A
   \   000008   7AC5         MOV     R2,#-0x3b
   \   00000A   7945         MOV     R1,#0x45
   \   00000C   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00000F   90....       MOV     DPTR,#pBeaconIndBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000006                REQUIRE ??Subroutine77_0
   \   000006                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET
   1711          
   1712          
   1713          
   1714          /***************************************************************************************************
   1715           * @fn          MT_ZdoJoinCnfCB
   1716           *
   1717           * @brief       Handle the ZDO Join Confirm from ZDO
   1718           *
   1719           * @param       pStr - pointer to a parameter and a structure of parameters
   1720           *
   1721           * @return      void
   1722           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1723          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   1724          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1725            /* pStr: zdoJoinCnf_t* */
   1726            /* Packet Format */
   1727            /* Status (1) | device addr (2) | parent addr (2) */
   1728            
   1729            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   1730            zdoJoinCnf_t *joinCnf = pStr;
   1731              
   1732            /* Join Complete. De-register the callback with ZDO */
   1733            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1734                              
   1735            buf[0] = joinCnf->status;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   F0           MOVX    @DPTR,A
   1736            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A882         MOV     R0,DPL
   \   000026   A983         MOV     R1,DPH
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C0E0         PUSH    A
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   1737            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C0E0         PUSH    A
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   1738            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   000043   EE           MOV     A,R6
   \   000044   2403         ADD     A,#0x3
   \   000046   F8           MOV     R0,A
   \   000047   EF           MOV     A,R7
   \   000048   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00004B   C0E0         PUSH    A
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
   1739            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \   000055   8882         MOV     DPL,R0
   \   000057   8983         MOV     DPH,R1
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   C0E0         PUSH    A
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   D0E0         POP     A
   \   000064   F0           MOVX    @DPTR,A
   1740            
   1741            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1742                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   000065                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   AC82         MOV     R4,DPL
   \   00006D   AD83         MOV     R5,DPH
   \   00006F   7B05         MOV     R3,#0x5
   \   000071   7AC6         MOV     R2,#-0x3a
   \   000073   7945         MOV     R1,#0x45
   \   000075   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1743            
   1744            return NULL;
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \   00007C   7405         MOV     A,#0x5
   \   00007E   02....       LJMP    ??Subroutine71_0 & 0xFFFF
   1745          }
   1746          
   1747          
   1748          /*************************************************************************************************
   1749           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1750           *
   1751           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1752           *
   1753           * @param   pBuf  - MT message data
   1754           *
   1755           * @return  void
   1756           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1757          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1758          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1759            uint8 cmd0, cmd1, tmp;
   1760            uint16 cId;
   1761          
   1762            /* parse header */
   1763            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1764            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1765            pBuf += MT_RPC_FRAME_HDR_SZ;
   1766          
   1767            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1768            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??CrossCallReturnLabel_9:
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000010   12....       LCALL   ?Subroutine39 & 0xFFFF
   1769          
   1770            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_67:
   \   000013   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_0
   1771            {
   1772              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000015                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7B01         MOV     R3,#0x1
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   7965         MOV     R1,#0x65
   \   00001F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1773            }
   1774          }
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000022   02....       LJMP    ??Subroutine65_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   EA           MOV     A,R2
   \   000004   2403         ADD     A,#0x3
   \   000006   0A           INC     R2
   \   000007   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00000A   FA           MOV     R2,A
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FB           MOV     R3,A
   \   00000E   90....       MOV     DPTR,#MT_TaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET
   1775          
   1776          /*************************************************************************************************
   1777           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1778           *
   1779           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1780           *
   1781           * @param   pBuf  - MT message data
   1782           *
   1783           * @return  void
   1784           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1785          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   1786          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1787            uint8 cmd0, cmd1, tmp;
   1788            uint16 cId;
   1789          
   1790            /* parse header */
   1791            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1792            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1793            pBuf += MT_RPC_FRAME_HDR_SZ;
   1794          
   1795            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1796            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??CrossCallReturnLabel_10:
   \   00000D   12....       LCALL   ??ZDO_RemoveRegisteredCB?relay
   \   000010   12....       LCALL   ?Subroutine39 & 0xFFFF
   1797          
   1798            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_68:
   \   000013   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_0
   1799            {
   1800              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000015                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7B01         MOV     R3,#0x1
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   7965         MOV     R1,#0x65
   \   00001F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1801            }
   1802          }
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000022   02....       LJMP    ??Subroutine65_0 & 0xFFFF
   1803          
   1804          #endif /* MT_ZDO_FUNC */
   1805          
   1806          
   1807          /***************************************************************************************************
   1808           * Callback handling function
   1809           ***************************************************************************************************/
   1810          
   1811          #if defined (MT_ZDO_CB_FUNC)
   1812          
   1813          /***************************************************************************************************
   1814           * @fn      MT_ZdoStateChangeCB
   1815           *
   1816           * @brief   Handle state change OSAL message from ZDO.
   1817           *
   1818           * @param   pMsg  - Message data
   1819           *
   1820           * @return  void
   1821           */
   1822          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1823          {
   1824            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1825                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1826          }
   1827          
   1828          /***************************************************************************************************
   1829           * @fn     MT_ZdoDirectCB()
   1830           *
   1831           * @brief  ZDO direct callback.  Build an MT message directly from the
   1832           *         over-the-air ZDO message.
   1833           *
   1834           * @param  pData - Incoming AF frame.
   1835           *
   1836           * @return  none
   1837           ***************************************************************************************************/
   1838          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
   1839          {
   1840            uint8 len, *pBuf;
   1841            uint16 origClusterId;
   1842            
   1843            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId 
   1844            origClusterId = pData->clusterId;
   1845            
   1846            // Is the message an exception or not a response?
   1847            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1848            {
   1849              return;  // Handled somewhere else or not needed.
   1850            }
   1851          
   1852            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1853             * two bytes for srcAddr.
   1854             */
   1855            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1856          
   1857            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1858            {
   1859              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1860          
   1861              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1862              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1863          
   1864              /* copy ZDO data, skipping one-byte sequence number */
   1865              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1866          
   1867              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1868              osal_mem_free(pBuf);
   1869            }
   1870          }
   1871          
   1872          /***************************************************************************************************
   1873           * @fn     MT_ZdoHandleExceptions()
   1874           *
   1875           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   1876           *
   1877           * @param  pData - Incoming AF frame.
   1878           *
   1879           * @return  TRUE if handled by this function, FALSE if not
   1880           ***************************************************************************************************/
   1881          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1882          {
   1883            uint8 ret = TRUE;
   1884            ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
   1885            ZDO_DeviceAnnce_t devAnnce;
   1886            uint8 doDefault = FALSE;
   1887            
   1888            switch ( inMsg->clusterID )
   1889            {
   1890              case NWK_addr_rsp:
   1891              case IEEE_addr_rsp:
   1892                nwkRsp = ZDO_ParseAddrRsp( inMsg );
   1893                MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1894                if ( nwkRsp )
   1895                  osal_mem_free( nwkRsp );
   1896                break;
   1897                
   1898              case Device_annce:
   1899                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1900                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1901                break;
   1902                
   1903              case Simple_Desc_rsp:
   1904                if ( pData->cmd.DataLength > 5 )
   1905                  ret = FALSE;
   1906                else
   1907                  doDefault = TRUE;        
   1908                break;  
   1909                
   1910              default:
   1911                ret = FALSE;
   1912                break;
   1913            }
   1914            
   1915            if ( doDefault )
   1916            {
   1917              ret = FALSE;
   1918              pData->clusterId = MtZdoDef_rsp;
   1919              pData->cmd.DataLength = 2;
   1920            }
   1921          
   1922            return ( ret );
   1923          }
   1924          
   1925          /***************************************************************************************************
   1926           * @fn      MT_ZdoAddrRspCB
   1927           *
   1928           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1929           *
   1930           * @param   pMsg  - Message data
   1931           *
   1932           * @return  void
   1933           */
   1934          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1935          {
   1936            uint8   listLen, len, *pBuf;
   1937          
   1938            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1939          
   1940            /* get length, sanity check length */
   1941            listLen = pMsg->numAssocDevs;
   1942            
   1943            /* calculate msg length */
   1944            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1945          
   1946            /* get buffer */
   1947            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1948            {
   1949              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1950              uint8 *pTmp = pBuf;
   1951          
   1952              *pTmp++ = pMsg->status;
   1953          
   1954              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1955              pTmp += Z_EXTADDR_LEN;
   1956          
   1957              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1958              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1959          
   1960              *pTmp++ = pMsg->startIndex;
   1961              *pTmp++ = listLen;
   1962          
   1963              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1964          
   1965              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1966              osal_mem_free(pBuf);
   1967            }
   1968          }
   1969          
   1970          /***************************************************************************************************
   1971           * @fn      MT_ZdoEndDevAnnceCB
   1972           *
   1973           * @brief   Handle end device announce OSAL message from ZDO.
   1974           *
   1975           * @param   pMsg  - Message data
   1976           *
   1977           * @return  void
   1978           */
   1979          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1980          {
   1981            uint8 *pBuf;
   1982          
   1983            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   1984            {
   1985              uint8 *pTmp = pBuf;
   1986          
   1987              *pTmp++ = LO_UINT16(srcAddr);
   1988              *pTmp++ = HI_UINT16(srcAddr);
   1989          
   1990              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1991              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1992          
   1993              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1994              pTmp += Z_EXTADDR_LEN;
   1995          
   1996              *pTmp = pMsg->capabilities;
   1997          
   1998              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
   1999                                                   MT_ZDO_END_DEVICE_ANNCE_IND, 
   2000                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2001              osal_mem_free(pBuf);
   2002            }
   2003          }
   2004          
   2005          /***************************************************************************************************
   2006           * @fn      MT_ZdoSrcRtgCB
   2007           *
   2008           * @brief   Handle Src Route from ZDO.
   2009           *
   2010           * @param   pStr  - pointer to the data structure for the src route
   2011           *
   2012           * @return  void* 
   2013           */
   2014          void* MT_ZdoSrcRtgCB( void *pStr )
   2015          {
   2016            uint8 len, *pBuf;
   2017            zdoSrcRtg_t *pSrcRtg = pStr;
   2018            
   2019            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2020            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2021          
   2022            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2023            {
   2024              uint8 idx, *pTmp = pBuf;
   2025              uint16 *pRelay;
   2026          
   2027              // Packet payload
   2028              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2029              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2030              *pTmp++ = pSrcRtg->relayCnt;
   2031              
   2032              // Relay List
   2033              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2034              {
   2035                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2036                {
   2037                  *pTmp++ = LO_UINT16(*pRelay);
   2038                  *pTmp++ = HI_UINT16(*pRelay);
   2039                  pRelay++;
   2040                }
   2041              }
   2042              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2043                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2044              osal_mem_free(pBuf);
   2045            }
   2046            
   2047            return NULL;
   2048          }
   2049          #endif // MT_ZDO_CB_FUNC
   2050          
   2051          /***************************************************************************************************
   2052           * @fn      MT_ZdoSendMsgCB
   2053           *
   2054           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2055           *
   2056           * @param   pMsg  - Message data
   2057           *
   2058           * @return  void
   2059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2060          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2061          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2062            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV     A,R2
   \   00000A   2410         ADD     A,#0x10
   \   00000C   F582         MOV     DPL,A
   \   00000E   EB           MOV     A,R3
   \   00000F   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000012   2409         ADD     A,#0x9
   \   000014   F5..         MOV     ?V0 + 2,A
   2063            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   FA           MOV     R2,A
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   AE..         MOV     R6,?V0 + 4
   \   000022   AF..         MOV     R7,?V0 + 5
   2064          
   2065            if (pBuf != NULL)
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   606A         JZ      ??MT_ZdoSendMsgCB_0
   2066            {
   2067              uint8 *pTmp = pBuf;
   2068          
   2069              // Assuming exclusive use of network short addresses.
   2070              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   2402         ADD     A,#0x2
   \   00002C   F8           MOV     R0,A
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000032   AA82         MOV     R2,DPL
   \   000034   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   2071              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2072              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_147:
   \   000037   240B         ADD     A,#0xb
   \   000039   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00003C   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   2073              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_148:
   \   00003F   240C         ADD     A,#0xc
   \   000041   12....       LCALL   ?Subroutine8 & 0xFFFF
   2074              *pTmp++ = HI_UINT16(pMsg->clusterID);
   2075              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_145:
   \   000044   240E         ADD     A,#0xe
   \   000046   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000049   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   2076              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_149:
   \   00004C   240F         ADD     A,#0xf
   \   00004E   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000051   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   2077              // Skipping asduLen since it can be deduced from the RPC packet length.
   2078              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_150:
   \   000054   2411         ADD     A,#0x11
   \   000056   12....       LCALL   ?Subroutine8 & 0xFFFF
   2079              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   2080              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_146:
   \   000059   2413         ADD     A,#0x13
   \   00005B   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00005E   F5..         MOV     ?V0 + 4,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F5..         MOV     ?V0 + 5,A
   \   000064   75..00       MOV     ?V0 + 6,#0x0
   \   000067   78..         MOV     R0,#?V0 + 4
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   2410         ADD     A,#0x10
   \   000070   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000073   FC           MOV     R4,A
   \   000074   7D00         MOV     R5,#0x0
   \   000076   12....       LCALL   ??osal_memcpy?relay
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   2081          
   2082              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2083                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   00007E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007E   EE           MOV     A,R6
   \   00007F   FC           MOV     R4,A
   \   000080   EF           MOV     A,R7
   \   000081   FD           MOV     R5,A
   \   000082   AB..         MOV     R3,?V0 + 2
   \   000084   7AFF         MOV     R2,#-0x1
   \   000086   7945         MOV     R1,#0x45
   \   000088   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2084              
   2085              osal_mem_free(pBuf);
   \   00008B                ; Setup parameters for call to function osal_mem_free
   \   00008B   EE           MOV     A,R6
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??osal_mem_free?relay
   2086            }
   2087          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   000092   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine78_0
   \   000004                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine79_0
   \   000004                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000006   0A           INC     R2
   \   000007                REQUIRE ??Subroutine80_0
   \   000007                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   AB83         MOV     R3,DPH
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine81_0
   \   000007                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNWKAddressRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoIEEEAddrRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNodeDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoPowerDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSimpleDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoActiveEpRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMatchDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoComplexDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoServiceDiscRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUnbindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoStartupFromApp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNwkDiscoveryCnfCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoBeaconIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoJoinCnfCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSendMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2088          
   2089          #endif   /*ZDO Command Processing in MT*/
   2090          /***************************************************************************************************
   2091          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_ZdoActiveEpRequest              1      0     29
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoBeaconIndCB                  1      0     23
       -> osal_mem_alloc                0      0     22
       -> osal_memcpy                   0      0     28
       -> MT_BuildAndSendZToolResponse
                                        0      0     22
       -> MT_BuildAndSendZToolResponse
                                        0      0     22
       -> osal_mem_free                 0      0     22
     MT_ZdoBindRequest                  1      0     52
       -> sAddrExtCpy                   0      0     70
       -> ZDP_BindUnbindReq             0      0     86
       -> MT_BuildAndSendZToolResponse
                                        0      0     70
     MT_ZdoCommandProcessing            0      0      9
       -> MT_ZdoNWKAddressRequest       0      0     18
       -> MT_ZdoIEEEAddrRequest         0      0     18
       -> MT_ZdoNodeDescRequest         0      0     18
       -> MT_ZdoPowerDescRequest        0      0     18
       -> MT_ZdoSimpleDescRequest       0      0     18
       -> MT_ZdoActiveEpRequest         0      0     18
       -> MT_ZdoMatchDescRequest        0      0     18
       -> MT_ZdoComplexDescRequest      0      0     18
       -> MT_ZdoUserDescRequest         0      0     18
       -> MT_ZdoEndDevAnnce             0      0     18
       -> MT_ZdoUserDescSet             0      0     18
       -> MT_ZdoServiceDiscRequest      0      0     18
       -> MT_ZdoEndDevBindRequest       0      0     18
       -> MT_ZdoBindRequest             0      0     18
       -> MT_ZdoUnbindRequest           0      0     18
       -> MT_ZdoNetworkDiscoveryReq     0      0     18
       -> MT_ZdoJoinReq                 0      0     18
       -> MT_ZdoStartupFromApp          0      0     18
       -> MT_ZdoRegisterForZDOMsg       0      0     18
       -> MT_ZdoRemoveRegisteredCB      0      0     18
     MT_ZdoComplexDescRequest           1      0     29
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoEndDevAnnce                  1      0     20
       -> ZDP_DeviceAnnce               0      0     22
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoEndDevBindRequest            1      0    104
       -> ZDP_EndDeviceBindReq          0      0    190
       -> MT_BuildAndSendZToolResponse
                                        0      0    172
     MT_ZdoIEEEAddrRequest              1      0     19
       -> ZDP_IEEEAddrReq               0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoInit                         0      0      0
     MT_ZdoJoinCnfCB                    1      0     14
       -> ZDO_DeregisterForZdoCB        0      0     28
       -> MT_BuildAndSendZToolResponse
                                        0      0     28
     MT_ZdoJoinReq                      1      0     26
       -> ZDApp_JoinReq                 0      0     34
       -> ZDO_RegisterForZdoCB          0      0     26
       -> MT_BuildAndSendZToolResponse
                                        0      0     26
     MT_ZdoMatchDescRequest             1      0    106
       -> ZDP_MatchDescReq              0      0    194
       -> MT_BuildAndSendZToolResponse
                                        0      0    178
     MT_ZdoNWKAddressRequest            1      0     19
       -> ZDP_NwkAddrReq                0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoNetworkDiscoveryReq          1      0     19
       -> osal_build_uint32             0      0     20
       -> ZDApp_NetworkDiscoveryReq     0      0     20
       -> ZDO_RegisterForZdoCB          0      0     20
       -> ZDO_RegisterForZdoCB          0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoNodeDescRequest              1      0     29
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoNwkDiscoveryCnfCB            0      0      9
       -> ZDO_DeregisterForZdoCB        0      0     18
       -> ZDO_DeregisterForZdoCB        0      0     18
       -> MT_ZdoBeaconIndCB             0      0     18
       -> MT_BuildAndSendZToolResponse
                                        0      0     18
     MT_ZdoPowerDescRequest             1      0     29
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoRegisterForZDOMsg            1      0     19
       -> ZDO_RegisterForZDOMsg         0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoRemoveRegisteredCB           1      0     19
       -> ZDO_RemoveRegisteredCB        0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoSendMsgCB                    1      0     18
       -> osal_mem_alloc                0      0     30
       -> osal_memcpy                   0      0     36
       -> MT_BuildAndSendZToolResponse
                                        0      0     30
       -> osal_mem_free                 0      0     30
     MT_ZdoServiceDiscRequest           1      0     19
       -> ZDP_ServerDiscReq             0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoSimpleDescRequest            1      0     29
       -> ZDP_SimpleDescReq             0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoStartupFromApp               1      0     19
       -> ZDOInitDevice                 0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoUnbindRequest                1      0     52
       -> sAddrExtCpy                   0      0     70
       -> ZDP_BindUnbindReq             0      0     86
       -> MT_BuildAndSendZToolResponse
                                        0      0     70
     MT_ZdoUserDescRequest              1      0     29
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoUserDescSet                  1      0     51
       -> osal_memcpy                   0      0     84
       -> ZDP_UserDescSet               0      0     82
       -> MT_BuildAndSendZToolResponse
                                        0      0     78


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _zdoCallbackSub                      4
     pBeaconIndBuf                        2
     MT_ZdoInit                           3
     MT_ZdoCommandProcessing            186
     ??Subroutine72_0                     5
     MT_ZdoNWKAddressRequest             38
     ?Subroutine5                         5
     ?Subroutine24                       14
     ??Subroutine64_0                     5
     ??Subroutine65_0                     5
     ??Subroutine71_0                     3
     ?Subroutine58                       15
     ??Subroutine75_0                     9
     ?Subroutine38                        6
     MT_ZdoIEEEAddrRequest               43
     ?Subroutine52                       11
     ??Subroutine74_0                     9
     ?Subroutine31                        8
     MT_ZdoNodeDescRequest               37
     ?Subroutine29                       13
     ?Subroutine55                        2
     ??Subroutine66_0                     9
     ?Subroutine7                        17
     ??Subroutine68_0                    14
     ??Subroutine69_0                    10
     ??Subroutine70_0                    16
     ?Subroutine40                        5
     ?Subroutine47                       16
     MT_ZdoPowerDescRequest              33
     ?Subroutine0                         3
     ?Subroutine21                        6
     MT_ZdoSimpleDescRequest             52
     MT_ZdoActiveEpRequest               33
     MT_ZdoMatchDescRequest             234
     ?Subroutine1                         5
     ?Subroutine34                        9
     ??Subroutine67_0                     6
     ?Subroutine14                       26
     ?Subroutine6                         8
     ?Subroutine59                       11
     ?Subroutine23                       16
     ?Subroutine46                       10
     ?Subroutine11                       26
     ?Subroutine54                        1
     MT_ZdoComplexDescRequest            33
     MT_ZdoUserDescRequest               32
     ?Subroutine4                         3
     ??Subroutine63_0                     1
     MT_ZdoEndDevAnnce                   91
     MT_ZdoUserDescSet                  165
     ?Subroutine2                         8
     ?Subroutine32                        5
     ??Subroutine73_0                     4
     ?Subroutine33                        4
     MT_ZdoServiceDiscRequest            40
     MT_ZdoEndDevBindRequest            255
     ?Subroutine41                       10
     ?Subroutine15                       26
     ??Subroutine76_0                     8
     MT_ZdoBindRequest                  129
     ?Subroutine3                        20
     ?Subroutine37                       14
     ?Subroutine27                        7
     ?Subroutine26                       14
     ?Subroutine50                        7
     ?Subroutine19                       10
     ?Subroutine10                       56
     ?Subroutine56                        9
     ?Subroutine45                       20
     MT_ZdoUnbindRequest                132
     MT_ZdoStartupFromApp                41
     ?Subroutine39                       14
     ?Subroutine48                       16
     MT_ZdoNetworkDiscoveryReq           76
     ?Subroutine42                       16
     MT_ZdoJoinReq                      150
     ?Subroutine35                       12
     ??Subroutine78_0                     5
     ??Subroutine79_0                     5
     MT_ZdoNwkDiscoveryCnfCB             46
     MT_ZdoBeaconIndCB                  285
     ?Subroutine28                       12
     ?Subroutine25                        8
     ?Subroutine22                        8
     ?Subroutine51                       13
     ?Subroutine20                        4
     ?Subroutine44                        4
     ?Subroutine60                        9
     ?Subroutine18                       23
     ?Subroutine17                        8
     ?Subroutine16                        4
     ?Subroutine43                       10
     ?Subroutine13                        6
     ?Subroutine12                        6
     ??Subroutine77_0                     5
     ?Subroutine30                        4
     ?Subroutine53                       10
     ?Subroutine61                        9
     ?Subroutine49                        4
     ?Subroutine62                       11
     MT_ZdoJoinCnfCB                    129
     MT_ZdoRegisterForZDOMsg             37
     ?Subroutine9                        20
     MT_ZdoRemoveRegisteredCB            37
     MT_ZdoSendMsgCB                    149
     ?Subroutine36                        4
     ?Subroutine57                        4
     ?Subroutine8                         7
     ??Subroutine80_0                     7
     ??Subroutine81_0                     6
     ??MT_ZdoInit?relay                   6
     ??MT_ZdoCommandProcessing?relay      6
     ??MT_ZdoNWKAddressRequest?relay      6
     ??MT_ZdoIEEEAddrRequest?relay        6
     ??MT_ZdoNodeDescRequest?relay        6
     ??MT_ZdoPowerDescRequest?relay       6
     ??MT_ZdoSimpleDescRequest?relay      6
     ??MT_ZdoActiveEpRequest?relay        6
     ??MT_ZdoMatchDescRequest?relay       6
     ??MT_ZdoComplexDescRequest?relay     6
     ??MT_ZdoUserDescRequest?relay        6
     ??MT_ZdoEndDevAnnce?relay            6
     ??MT_ZdoUserDescSet?relay            6
     ??MT_ZdoServiceDiscRequest?relay     6
     ??MT_ZdoEndDevBindRequest?relay      6
     ??MT_ZdoBindRequest?relay            6
     ??MT_ZdoUnbindRequest?relay          6
     ??MT_ZdoStartupFromApp?relay         6
     ??MT_ZdoNetworkDiscoveryReq?relay    6
     ??MT_ZdoJoinReq?relay                6
     ??MT_ZdoNwkDiscoveryCnfCB?relay      6
     ??MT_ZdoBeaconIndCB?relay            6
     ??MT_ZdoJoinCnfCB?relay              6
     ??MT_ZdoRegisterForZDOMsg?relay      6
     ??MT_ZdoRemoveRegisteredCB?relay     6
     ??MT_ZdoSendMsgCB?relay              6

 
 3 310 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
 3 466 bytes of CODE  memory
     6 bytes of XDATA memory

Errors: none
Warnings: none
