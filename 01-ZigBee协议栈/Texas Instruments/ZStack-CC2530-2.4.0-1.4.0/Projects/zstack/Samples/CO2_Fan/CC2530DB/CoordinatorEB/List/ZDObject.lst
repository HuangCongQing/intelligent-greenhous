###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         11/Dec/2018  11:20:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Components\stack\zdo\ZDObject.c             #
#    Command line       =  -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wCoord.cfg"            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg"           #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xAA34                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\s #
#                          tack\zdo\ZDObject.c" -D ZTOOL_P1 -D MT_TASK -D     #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬ #
#                          Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530- #
#                          2.4.0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530 #
#                          DB\CoordinatorEB\List\" -lA                        #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\C #
#                          oordinatorEB\List\" --diag_suppress Pe001,Pa010    #
#                          -o "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530D #
#                          B\CoordinatorEB\Obj\" -e --no_code_motion --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03 #
#                          -≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\" -I                  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\Source\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\ #
#                          03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                  #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\ZMain\TI2530 #
#                          DB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ #
#                          ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\include\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥ #
#                          £”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\target\CC2530EB\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\include\" -I          #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\high_level\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\low_level\srf04\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\low_level\srf04\singl #
#                          e_chip\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03 #
#                          -œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                    #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mt\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\0 #
#                          3-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                   #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\osal\include\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\CO2_Fan\CC2530DB\..\..\..\..\..\Compon #
#                          ents\osal\mcu\ccsoc\" -I                           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\services\saddr\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\services\sdata\" -I       #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\af\" -I             #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\nwk\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sapi\" -I           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sec\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sys\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\zdo\" -I            #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\" -I                 #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\f8w\" -Ohz           #
#                          --require_prototypes                               #
#    List file          =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\Co #
#                          ordinatorEB\List\ZDObject.lst                      #
#    Object file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\CO2_Fan\CC2530DB\Co #
#                          ordinatorEB\Obj\ZDObject.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2010-06-28 16:07:20 -0700 (Mon, 28 Jun 2010) $
      4            Revision:       $Revision: 22834 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL   ??NLME_CoordinatorInit?relay
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   7900         MOV     R1,#0x0
   \   00001B   12....       LCALL   ??APS_ReflectorInit?relay
    194          }
   \   00001E   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   00000B   EF           MOV     A,R7
   \   00000C   7044         JNZ     ??ZDO_StartDevice_0
    298            {
    299              if ( startMode == MODE_HARD )
   \   00000E   7402         MOV     A,#0x2
   \   000010   65..         XRL     A,?V0 + 0
   \   000012   7053         JNZ     ??ZDO_StartDevice_1
    300              {
    301                devState = DEV_COORD_STARTING;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7408         MOV     A,#0x8
   \   000019   F0           MOVX    @DPTR,A
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
   \   00001A                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   00001A   75..00       MOV     ?V0 + 2,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 2
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000022   EC           MOV     A,R4
   \   000023   F5..         MOV     ?V0 + 2,A
   \   000025   78..         MOV     R0,#?V0 + 2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   EE           MOV     A,R6
   \   00002B   F5..         MOV     ?V0 + 2,A
   \   00002D   78..         MOV     R0,#?V0 + 2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   90....       MOV     DPTR,#zgDefaultChannelList
   \   000035   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000038   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   00003F   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   000041   90....       MOV     DPTR,#zgConfigPANID
   \   000044   12....       LCALL   ??Subroutine229_0 & 0xFFFF
    305              }
   \                     ??CrossCallReturnLabel_365:
   \   000047   12....       LCALL   ??NLME_NetworkFormationRequest?relay
   \   00004A   7407         MOV     A,#0x7
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDO_StartDevice_2:
   \   00004F   E9           MOV     A,R1
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    323              {
    324                devState = DEV_NWK_DISC;
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    368                  scanCnf.UnscannedChannels = 0;
    369                  scanCnf.ResultListSize = 0;
    370                  nwk_ScanJoiningOrphan(&scanCnf);
    371          
    372                  ret = ZSuccess;
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \   000050   6010         JZ      ??ZDO_StartDevice_3
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_0:
   \   000052                ; Setup parameters for call to function osal_start_timerEx
   \   000052   7CE8         MOV     R4,#-0x18
   \   000054   7D03         MOV     R5,#0x3
   \   000056   7A01         MOV     R2,#0x1
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   90....       MOV     DPTR,#ZDAppTaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??osal_start_timerEx?relay
    391          }
   \                     ??ZDO_StartDevice_3:
   \   000062   7F03         MOV     R7,#0x3
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??ZDO_StartDevice_1:
   \   000067   7401         MOV     A,#0x1
   \   000069   65..         XRL     A,?V0 + 0
   \   00006B   7010         JNZ     ??ZDO_StartDevice_4
   \   00006D   90....       MOV     DPTR,#devState
   \   000070   7408         MOV     A,#0x8
   \   000072   F0           MOVX    @DPTR,A
   \   000073                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000073   7B00         MOV     R3,#0x0
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   00007B   80D2         SJMP    ??ZDO_StartDevice_2
   \                     ??ZDO_StartDevice_4:
   \   00007D                ; Setup parameters for call to function HalLcdWriteScreen
   \   00007D   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   00007F   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   000081   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   000083   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   000085   12....       LCALL   ??HalLcdWriteScreen?relay
   \   000088   80C8         SJMP    ??ZDO_StartDevice_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    411          {
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    413          
    414            if (NULL == pMsg)
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
    425                pMsg->status = state;
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
    434            }
    435          }
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8014         SJMP    ??CrossCallReturnLabel_182
    462          
    463            while (pItem != NULL)
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V0 + 1
   \   000017   F0           MOVX    @DPTR,A
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000024   FF           MOV     R7,A
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   6047         JZ      ??ZDO_UpdateNwkStatus_2
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000030   60E6         JZ      ??ZDO_UpdateNwkStatus_1
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   12....       LCALL   ?Subroutine83 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_136:
   \   000039   F5..         MOV     ?V0 + 0,A
   \   00003B                ; Setup parameters for call to function osal_msg_find
   \   00003B   7AD1         MOV     R2,#-0x2f
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??osal_msg_find?relay
   \   000041   EA           MOV     A,R2
   \   000042   4B           ORL     A,R3
   \   000043   70CB         JNZ     ??ZDO_UpdateNwkStatus_0
   \   000045                ; Setup parameters for call to function osal_msg_allocate
   \   000045   7A02         MOV     R2,#0x2
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_msg_allocate?relay
   \   00004C   EA           MOV     A,R2
   \   00004D   4B           ORL     A,R3
   \   00004E   700E         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000050                ; Setup parameters for call to function osal_set_event
   \   000050   7A10         MOV     R2,#0x10
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#ZDAppTaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_set_event?relay
   \   00005C   80BA         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   74D1         MOV     A,#-0x2f
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E5..         MOV     A,?V0 + 1
   \   000068   F0           MOVX    @DPTR,A
   \   000069                ; Setup parameters for call to function osal_msg_send
   \   000069   A9..         MOV     R1,?V0 + 0
   \   00006B   12....       LCALL   ??osal_msg_send?relay
   \   00006E   80A8         SJMP    ??ZDO_UpdateNwkStatus_1
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000070                ; Setup parameters for call to function NLME_GetShortAddr
   \   000070   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000073   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000076   12....       LCALL   ?Subroutine154 & 0xFFFF
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_509:
   \   000079                ; Setup parameters for call to function NLME_GetExtAddr
   \   000079   12....       LCALL   ??NLME_GetExtAddr?relay
    478          }
   \   00007C   80..         SJMP    ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine273_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */
    490          static void ZDO_RemoveEndDeviceBind( void )
    491          {
    492            if ( ZDO_EDBind != NULL )
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              if ( ZDO_EDBind->outClusters != NULL )
    498                osal_mem_free( ZDO_EDBind->outClusters );
    499              osal_mem_free( ZDO_EDBind );
    500              ZDO_EDBind = NULL;
    501            }
    502          }
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    516          {
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8C..         MOV     ?V0 + 0,R4
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000011   7411         MOV     A,#0x11
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FD           MOV     R5,A
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \   00001B   75..00       MOV     ?V0 + 1,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   00001E   75..00       MOV     ?V0 + 6,#0x0
   \   000021   804A         SJMP    ??ZDO_CompareClusterLists_0
    552            {
    553              for ( y = 0; y < numList2; y++ )
    554              {
    555                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000023   E5..         MOV     A,?V0 + 3
   \   000025   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 5,A
    556                if ( list1[x] == z )
   \   00002E   E5..         MOV     A,?V0 + 6
   \   000030   C3           CLR     C
   \   000031   33           RLC     A
   \   000032   FE           MOV     R6,A
   \   000033   E4           CLR     A
   \   000034   33           RLC     A
   \   000035   FF           MOV     R7,A
   \   000036   EA           MOV     A,R2
   \   000037   2E           ADD     A,R6
   \   000038   F582         MOV     DPL,A
   \   00003A   EB           MOV     A,R3
   \   00003B   3F           ADDC    A,R7
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   65..         XRL     A,?V0 + 4
   \   000041   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   65..         XRL     A,?V0 + 5
   \                     ??ZDO_CompareClusterLists_2:
   \   000047   7019         JNZ     ??ZDO_CompareClusterLists_3
    557                  pMatches[numMatches++] = z;
   \   000049   E5..         MOV     A,?V0 + 1
   \   00004B   C3           CLR     C
   \   00004C   33           RLC     A
   \   00004D   FE           MOV     R6,A
   \   00004E   E4           CLR     A
   \   00004F   33           RLC     A
   \   000050   FF           MOV     R7,A
   \   000051   EC           MOV     A,R4
   \   000052   2E           ADD     A,R6
   \   000053   F582         MOV     DPL,A
   \   000055   ED           MOV     A,R5
   \   000056   3F           ADDC    A,R7
   \   000057   F583         MOV     DPH,A
   \   000059   E5..         MOV     A,?V0 + 4
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E5..         MOV     A,?V0 + 5
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   05..         INC     ?V0 + 1
    558              }
   \                     ??ZDO_CompareClusterLists_3:
   \   000062   05..         INC     ?V0 + 3
   \                     ??ZDO_CompareClusterLists_4:
   \   000064   E5..         MOV     A,?V0 + 3
   \   000066   C3           CLR     C
   \   000067   95..         SUBB    A,?V0 + 0
   \   000069   40B8         JC      ??ZDO_CompareClusterLists_1
   \   00006B   05..         INC     ?V0 + 6
   \                     ??ZDO_CompareClusterLists_0:
   \   00006D   E5..         MOV     A,?V0 + 6
   \   00006F   C3           CLR     C
   \   000070   95..         SUBB    A,?V0 + 2
   \   000072   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000074   75..00       MOV     ?V0 + 3,#0x0
   \   000077   80EB         SJMP    ??ZDO_CompareClusterLists_4
    559            }
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000079   A9..         MOV     R1,?V0 + 1
   \   00007B   02....       LJMP    ??Subroutine233_0 & 0xFFFF
    562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FE           MOV     R6,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FF           MOV     R7,A
   \   000006   E8           MOV     A,R0
   \   000007   2E           ADD     A,R6
   \   000008   F582         MOV     DPL,A
   \   00000A   E9           MOV     A,R1
   \   00000B   3F           ADDC    A,R7
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine226_0 & 0xFFFF
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_347:
   \   00000F   75..00       MOV     ?V0 + 2,#0x0
   \   000012   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000014   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   E5..         MOV     A,?V0 + 2
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0 + 3
   \   00001B   502F         JNC     ??ZDO_AnyClusterMatches_2
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   8001         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000021   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_3:
   \   000022   ED           MOV     A,R5
   \   000023   C3           CLR     C
   \   000024   9C           SUBB    A,R4
   \   000025   50ED         JNC     ??ZDO_AnyClusterMatches_1
    587              {
    588                if ( AList[x] == BList[y] )
   \   000027   E5..         MOV     A,?V0 + 2
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   FE           MOV     R6,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   FF           MOV     R7,A
   \   00002F   EA           MOV     A,R2
   \   000030   2E           ADD     A,R6
   \   000031   F582         MOV     DPL,A
   \   000033   EB           MOV     A,R3
   \   000034   3F           ADDC    A,R7
   \   000035   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000038   F5..         MOV     ?V0 + 1,A
   \   00003A   ED           MOV     A,R5
   \   00003B   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00003E   65..         XRL     A,?V0 + 0
   \   000040   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000046   70D9         JNZ     ??ZDO_AnyClusterMatches_4
    589                {
    590                  return true;
   \   000048   7901         MOV     R1,#0x1
   \   00004A   8002         SJMP    ??ZDO_AnyClusterMatches_6
    591                }
    592              }
    593            }
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00004C   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00004E   02....       LJMP    ??Subroutine206_0 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine207_0
   \   000002                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine68 & 0xFFFF
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    615            NodeDescriptorFormat_t *desc = NULL;
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_112:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
    620            }
    621          
    622            if ( desc != NULL )
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessNodeDescReq_2
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine66 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_110:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    631          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP    ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   EA           MOV     A,R2
   \   00000C   2400         ADD     A,#0x0
   \   00000E   FC           MOV     R4,A
   \   00000F   E4           CLR     A
   \   000010   39           ADDC    A,R1
   \   000011   FD           MOV     R5,A
   \   000012   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6C           XRL     A,R4
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003                REQUIRE ??Subroutine210_0
   \   000003                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000004   EF           MOV     A,R7
   \   000005   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000008   FD           MOV     R5,A
   \   000009   7C80         MOV     R4,#-0x80
   \   00000B   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00000E   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000011   7404         MOV     A,#0x4
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00000C   EF           MOV     A,R7
   \   00000D                REQUIRE ??Subroutine232_0
   \   00000D                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine68 & 0xFFFF
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    646            NodePowerDescriptorFormat_t *desc = NULL;
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_113:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
    651            }
    652          
    653            if ( desc != NULL )
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessPowerDescReq_2
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine66 & 0xFFFF
    661            }
   \                     ??CrossCallReturnLabel_111:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    662          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP    ??Subroutine209_0
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine209_0
   \   000003                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00001B   FA           MOV     R2,A
    678            byte endPoint = inMsg->asdu[2];
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
    679            byte free = false;
   \   000024   75..00       MOV     ?V0 + 1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   000027   75..00       MOV     ?V0 + 0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002A   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   00002C   C3           CLR     C
   \   00002D   94F1         SUBB    A,#-0xf
   \   00002F   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000031   75..82       MOV     ?V0 + 0,#-0x7e
   \   000034   802F         SJMP    ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000036   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6A           XRL     A,R2
   \   00003B   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000040   7020         JNZ     ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000042                ; Setup parameters for call to function afFindSimpleDesc
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??afFindSimpleDesc?relay
   \   00004F   E9           MOV     A,R1
   \   000050   F5..         MOV     ?V0 + 1,A
    689              if ( sDesc == NULL )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   00005B   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   00005D   75..83       MOV     ?V0 + 0,#-0x7d
   \   000060   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000062   75..81       MOV     ?V0 + 0,#-0x7f
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000065                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FC           MOV     R4,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FD           MOV     R5,A
   \   000070   A9..         MOV     R1,?V0 + 0
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    707          
    708            if ( free && sDesc )
   \   000079   E5..         MOV     A,?V0 + 1
   \   00007B   6014         JZ      ??CrossCallReturnLabel_432
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000086   6009         JZ      ??CrossCallReturnLabel_432
    709            {
    710              osal_mem_free( sDesc );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    711            }
    712          }
   \                     ??CrossCallReturnLabel_432:
   \   000091   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   EC           MOV     A,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    726            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 2,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine69 & 0xFFFF
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_296:
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000015   EA           MOV     A,R2
   \   000016   65..         XRL     A,?V0 + 0
   \   000018   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   00001A   EB           MOV     A,R3
   \   00001B   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   00001D   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00001F                ; Setup parameters for call to function afNumEndPoints
   \   00001F   12....       LCALL   ??afNumEndPoints?relay
   \   000022   E9           MOV     A,R1
   \   000023   14           DEC     A
   \   000024   F5..         MOV     ?V0 + 2,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000026                ; Setup parameters for call to function afEndPoints
   \   000026   7901         MOV     R1,#0x1
   \   000028   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   00002A   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00002C   12....       LCALL   ??afEndPoints?relay
   \   00002F   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000031   75..80       MOV     ?V0 + 3,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000034                ; Setup parameters for call to function ZDP_EPRsp
   \   000034   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000037   F5..         MOV     ?V0 + 4,A
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV     ?V0 + 4,#ZDOBuildBuf & 0xff
   \   000041   75....       MOV     ?V0 + 5,#(ZDOBuildBuf >> 8) & 0xff
   \   000044   78..         MOV     R0,#?V0 + 4
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV     R0,#?V0 + 2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   E5..         MOV     A,?V0 + 3
   \   000055   F5..         MOV     ?V0 + 0,A
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00005F   F582         MOV     DPL,A
   \   000061   EF           MOV     A,R7
   \   000062   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000065   7A05         MOV     R2,#0x5
   \   000067   7B80         MOV     R3,#-0x80
   \   000069   12....       LCALL   ??ZDP_EPRsp?relay
   \   00006C   7407         MOV     A,#0x7
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    744          }
   \   000071   80..         SJMP    ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A                REQUIRE ??Subroutine211_0
   \   00000A                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003   2400         ADD     A,#0x0
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   E4           CLR     A
   \   000008   39           ADDC    A,R1
   \   000009   F5..         MOV     ?V0 + 1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   EE           MOV     A,R6
   \   000009   240F         ADD     A,#0xf
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine252_0
   \   000003                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine253_0
   \   000003                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000003   22           RET
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802F         SJMP    ??ZDO_ConvertOTAClusters_0
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000012   F9           MOV     R1,A
   \   000013   E5..         MOV     A,?V0 + 0
   \   000015   2400         ADD     A,#0x0
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   EF           MOV     A,R7
   \   00001C   33           RLC     A
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   33           RLC     A
   \   000020   F9           MOV     R1,A
   \   000021   EC           MOV     A,R4
   \   000022   28           ADD     A,R0
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   39           ADDC    A,R1
   \   000027   F583         MOV     DPH,A
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   F0           MOVX    @DPTR,A
    764              inBuf += sizeof( uint16 );
   \   000030   EA           MOV     A,R2
   \   000031   2402         ADD     A,#0x2
   \   000033   0A           INC     R2
   \   000034   0A           INC     R2
   \   000035   EB           MOV     A,R3
   \   000036   3400         ADDC    A,#0x0
   \   000038   FB           MOV     R3,A
    765            }
   \   000039   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003A   EF           MOV     A,R7
   \   00003B   C3           CLR     C
   \   00003C   9E           SUBB    A,R6
   \   00003D   40CC         JC      ??ZDO_ConvertOTAClusters_1
    766            return ( inBuf );
   \   00003F   02....       LJMP    ??Subroutine209_0 & 0xFFFF
    767          }
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
    781            uint8 epCnt = 0;
   \   00000E   75..00       MOV     ?V0 + 14,#0x0
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ?Subroutine54 & 0xFFFF
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \                     ??CrossCallReturnLabel_85:
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   12....       LCALL   ?Subroutine17 & 0xFFFF
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_14:
   \   000020   12....       LCALL   ?Subroutine143 & 0xFFFF
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \                     ??CrossCallReturnLabel_229:
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   F5..         MOV     ?V0 + 0,A
   \   000037   E4           CLR     A
   \   000038   39           ADDC    A,R1
   \   000039   F5..         MOV     ?V0 + 1,A
    797            msg += 4;
   \   00003B   EE           MOV     A,R6
   \   00003C   2404         ADD     A,#0x4
   \   00003E   FE           MOV     R6,A
   \   00003F   EF           MOV     A,R7
   \   000040   3400         ADDC    A,#0x0
   \   000042   FF           MOV     R7,A
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000043                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000043   AA..         MOV     R2,?V0 + 2
   \   000045   AB..         MOV     R3,?V0 + 3
   \   000047   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   702C         JNZ     ??ZDO_ProcessMatchDescReq_0
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00004F                ; Setup parameters for call to function ZDP_EPRsp
   \   00004F   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   E4           CLR     A
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   F5..         MOV     ?V0 + 1,A
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000067   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00006A   75..80       MOV     ?V0 + 0,#-0x80
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    803              return;
   \   000078   02....       LJMP    ??CrossCallReturnLabel_434 & 0xFFFF
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00007B                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00007B   AA..         MOV     R2,?V0 + 2
   \   00007D   AB..         MOV     R3,?V0 + 3
   \   00007F   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000082   E9           MOV     A,R1
   \   000083   700E         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000085   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000088   E0           MOVX    A,@DPTR
   \   000089   65..         XRL     A,?V0 + 2
   \   00008B   7004         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   65..         XRL     A,?V0 + 3
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000091   70BC         JNZ     ??ZDO_ProcessMatchDescReq_1
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    809              return;
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000093   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000096   88..         MOV     ?V0 + 8,R0
   \   000098   6032         JZ      ??ZDO_ProcessMatchDescReq_4
   \   00009A                ; Setup parameters for call to function osal_mem_alloc
   \   00009A   C3           CLR     C
   \   00009B   33           RLC     A
   \   00009C   FA           MOV     R2,A
   \   00009D   E4           CLR     A
   \   00009E   33           RLC     A
   \   00009F   FB           MOV     R3,A
   \   0000A0   12....       LCALL   ??osal_mem_alloc?relay
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000B3   6017         JZ      ??ZDO_ProcessMatchDescReq_4
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000B5                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ?Subroutine101 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_170:
   \   0000BD   A9..         MOV     R1,?V0 + 8
   \   0000BF   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000C2   8A..         MOV     ?V0 + 2,R2
   \   0000C4   8B..         MOV     ?V0 + 3,R3
   \   0000C6   AE..         MOV     R6,?V0 + 2
   \   0000C8   AF..         MOV     R7,?V0 + 3
   \   0000CA   8003         SJMP    ??ZDO_ProcessMatchDescReq_5
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000CC   75..00       MOV     ?V0 + 8,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000CF   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000D2   88..         MOV     ?V0 + 7,R0
   \   0000D4   602A         JZ      ??ZDO_ProcessMatchDescReq_6
   \   0000D6                ; Setup parameters for call to function osal_mem_alloc
   \   0000D6   C3           CLR     C
   \   0000D7   33           RLC     A
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E4           CLR     A
   \   0000DA   33           RLC     A
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DF   85..82       MOV     DPL,?XSP + 0
   \   0000E2   85..83       MOV     DPH,?XSP + 1
   \   0000E5   EA           MOV     A,R2
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   EB           MOV     A,R3
   \   0000E9   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000EC   E8           MOV     A,R0
   \   0000ED   49           ORL     A,R1
   \   0000EE   6010         JZ      ??ZDO_ProcessMatchDescReq_6
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000F0                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   12....       LCALL   ?Subroutine101 & 0xFFFF
    826            }
   \                     ??CrossCallReturnLabel_171:
   \   0000F9   A9..         MOV     R1,?V0 + 7
   \   0000FB   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000FE   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000100   75..00       MOV     ?V0 + 7,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000103   90....       MOV     DPTR,#epList
   \   000106   8057         SJMP    ??ZDO_ProcessMatchDescReq_8
    834            while ( epDesc )
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    838              {
    839                if ( epDesc->pfnDescCB )
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    842                  allocated = TRUE;
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
    847                  allocated = FALSE;
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    853          
    854                  // Are there matching input clusters?
    855                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    856                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    857                      // Are there matching output clusters?
    858                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    859                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    860                  {
    861                    // Notify the endpoint of the match.
    862                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    863                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    864          
    865                    if (pRspSent)
    866                    {
    867                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    868                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    869                      pRspSent->numInClusters = numInClusters;
    870                      pRspSent->numOutClusters = numOutClusters;
    871          
    872                      if (numInClusters)
    873                      {
    874                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    875                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    876                      }
    877                      else
    878                      {
    879                        pRspSent->pInClusters = NULL;
    880                      }
    881          
    882                      if (numOutClusters)
    883                      {
    884                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    885                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    886                      }
    887                      else
    888                      {
    889                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E4           CLR     A
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   F0           MOVX    @DPTR,A
    890                      }
    891          
    892                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000118                ; Setup parameters for call to function osal_msg_send
   \   000118   EE           MOV     A,R6
   \   000119   FA           MOV     R2,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FB           MOV     R3,A
   \   00011C   85..82       MOV     DPL,?V0 + 2
   \   00011F   85..83       MOV     DPH,?V0 + 3
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F8           MOV     R0,A
   \   000124   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   ??osal_msg_send?relay
    893                    }
    894          
    895                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00012B   85..82       MOV     DPL,?V0 + 10
   \   00012E   85..83       MOV     DPH,?V0 + 11
   \   000131   E0           MOVX    A,@DPTR
   \   000132   C0E0         PUSH    A
   \   000134   85....       MOV     ?V0 + 4,?V0 + 14
   \   000137   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000139   25..         ADD     A,?V0 + 4
   \   00013B   F582         MOV     DPL,A
   \   00013D   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   00013F   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000142   D0E0         POP     A
   \   000144   F0           MOVX    @DPTR,A
   \   000145   05..         INC     ?V0 + 14
    896                  }
    897                }
    898          
    899                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000147   E5..         MOV     A,?V0 + 9
   \   000149   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014B   5007         JNC     ??ZDO_ProcessMatchDescReq_13
    900                {
    901                  osal_mem_free( sDesc );
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0 + 10
   \   00014F   AB..         MOV     R3,?V0 + 11
   \   000151   12....       LCALL   ??osal_mem_free?relay
    902                }
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000154   85..82       MOV     DPL,?V0 + 2
   \   000157   85..83       MOV     DPH,?V0 + 3
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00015F   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000162   F5..         MOV     ?V0 + 3,A
   \   000164   E5..         MOV     A,?V0 + 2
   \   000166   45..         ORL     A,?V0 + 3
   \   000168   7003         JNZ     $+5
   \   00016A   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   00016D   85..82       MOV     DPL,?V0 + 2
   \   000170   85..83       MOV     DPH,?V0 + 3
   \   000173   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000176   60DC         JZ      ??ZDO_ProcessMatchDescReq_13
   \   000178   85..82       MOV     DPL,?V0 + 2
   \   00017B   85..83       MOV     DPH,?V0 + 3
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   A2E0         MOV     C,0xE0 /* A   */.0
   \   000183   50CF         JNC     ??ZDO_ProcessMatchDescReq_13
   \   000185   85..82       MOV     DPL,?V0 + 2
   \   000188   85..83       MOV     DPH,?V0 + 3
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000191   85..82       MOV     DPL,?V0 + 2
   \   000194   85..83       MOV     DPH,?V0 + 3
   \   000197   601E         JZ      ??ZDO_ProcessMatchDescReq_15
   \   000199                ; Setup parameters for indirect call
   \   000199   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   00019C   FA           MOV     R2,A
   \   00019D   7901         MOV     R1,#0x1
   \   00019F   85..82       MOV     DPL,?V0 + 2
   \   0001A2   85..83       MOV     DPH,?V0 + 3
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0001AB   12....       LCALL   ?CALL_IND
   \   0001AE   8A..         MOV     ?V0 + 10,R2
   \   0001B0   8B..         MOV     ?V0 + 11,R3
   \   0001B2   75..01       MOV     ?V0 + 9,#0x1
   \   0001B5   8010         SJMP    ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0001B7   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F5..         MOV     ?V0 + 10,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V0 + 11,A
   \   0001C4   75..00       MOV     ?V0 + 9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001C7   E5..         MOV     A,?V0 + 10
   \   0001C9   45..         ORL     A,?V0 + 11
   \   0001CB   7003         JNZ     $+5
   \   0001CD   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0001D0   85..82       MOV     DPL,?V0 + 10
   \   0001D3   85..83       MOV     DPH,?V0 + 11
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   65..         XRL     A,?V0 + 0
   \   0001DA   7004         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001E0   6003         JZ      $+5
   \   0001E2   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0001E5                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001E5   85..82       MOV     DPL,?V0 + 10
   \   0001E8   85..83       MOV     DPH,?V0 + 11
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001F5   85..82       MOV     DPL,?V0 + 10
   \   0001F8   85..83       MOV     DPH,?V0 + 11
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   E0           MOVX    A,@DPTR
   \   000202   FC           MOV     R4,A
   \   000203   7404         MOV     A,#0x4
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00020B   A9..         MOV     R1,?V0 + 8
   \   00020D   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000210   7402         MOV     A,#0x2
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
   \   000215   E9           MOV     A,R1
   \   000216   703C         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   000218                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000218   85..82       MOV     DPL,?V0 + 10
   \   00021B   85..83       MOV     DPH,?V0 + 11
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   A3           INC     DPTR
   \   000222   A3           INC     DPTR
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00022B   85..82       MOV     DPL,?V0 + 10
   \   00022E   85..83       MOV     DPH,?V0 + 11
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   FC           MOV     R4,A
   \   00023C   7402         MOV     A,#0x2
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000244   A9..         MOV     R1,?V0 + 7
   \   000246   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000249   7402         MOV     A,#0x2
   \   00024B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024E   E9           MOV     A,R1
   \   00024F   7003         JNZ     $+5
   \   000251   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000254                ; Setup parameters for call to function osal_msg_allocate
   \   000254   E5..         MOV     A,?V0 + 7
   \   000256   25..         ADD     A,?V0 + 8
   \   000258   C3           CLR     C
   \   000259   33           RLC     A
   \   00025A   240A         ADD     A,#0xa
   \   00025C   FA           MOV     R2,A
   \   00025D   7B00         MOV     R3,#0x0
   \   00025F   12....       LCALL   ??osal_msg_allocate?relay
   \   000262   8A..         MOV     ?V0 + 4,R2
   \   000264   8B..         MOV     ?V0 + 5,R3
   \   000266   AE..         MOV     R6,?V0 + 4
   \   000268   AF..         MOV     R7,?V0 + 5
   \   00026A   EE           MOV     A,R6
   \   00026B   4F           ORL     A,R7
   \   00026C   7003         JNZ     $+5
   \   00026E   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   000271   8E82         MOV     DPL,R6
   \   000273   8F83         MOV     DPH,R7
   \   000275   74D2         MOV     A,#-0x2e
   \   000277   F0           MOVX    @DPTR,A
   \   000278   85..82       MOV     DPL,?V0 + 12
   \   00027B   85..83       MOV     DPH,?V0 + 13
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000283   8E82         MOV     DPL,R6
   \   000285   8F83         MOV     DPH,R7
   \   000287   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00028A   8E82         MOV     DPL,R6
   \   00028C   8F83         MOV     DPH,R7
   \   00028E   A3           INC     DPTR
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   A3           INC     DPTR
   \   000292   E5..         MOV     A,?V0 + 8
   \   000294   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000297   E5..         MOV     A,?V0 + 7
   \   000299   F0           MOVX    @DPTR,A
   \   00029A   E5..         MOV     A,?V0 + 8
   \   00029C   6037         JZ      ??ZDO_ProcessMatchDescReq_19
   \   00029E   EE           MOV     A,R6
   \   00029F   2405         ADD     A,#0x5
   \   0002A1   FA           MOV     R2,A
   \   0002A2   EF           MOV     A,R7
   \   0002A3   3400         ADDC    A,#0x0
   \   0002A5   FB           MOV     R3,A
   \   0002A6   EE           MOV     A,R6
   \   0002A7   240A         ADD     A,#0xa
   \   0002A9   F8           MOV     R0,A
   \   0002AA   EF           MOV     A,R7
   \   0002AB   3400         ADDC    A,#0x0
   \   0002AD   F9           MOV     R1,A
   \   0002AE   8A82         MOV     DPL,R2
   \   0002B0   8B83         MOV     DPH,R3
   \   0002B2   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0002B5                ; Setup parameters for call to function osal_memcpy
   \   0002B5   7402         MOV     A,#0x2
   \   0002B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0002BE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002C1   E5..         MOV     A,?V0 + 8
   \   0002C3   C3           CLR     C
   \   0002C4   33           RLC     A
   \   0002C5   FC           MOV     R4,A
   \   0002C6   E4           CLR     A
   \   0002C7   33           RLC     A
   \   0002C8   FD           MOV     R5,A
   \   0002C9   8A82         MOV     DPL,R2
   \   0002CB   8B83         MOV     DPH,R3
   \   0002CD   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0002D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D3   800D         SJMP    ??ZDO_ProcessMatchDescReq_20
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0002D5   8E82         MOV     DPL,R6
   \   0002D7   8F83         MOV     DPH,R7
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   A3           INC     DPTR
   \   0002DC   A3           INC     DPTR
   \   0002DD   A3           INC     DPTR
   \   0002DE   E4           CLR     A
   \   0002DF   F0           MOVX    @DPTR,A
   \   0002E0   A3           INC     DPTR
   \   0002E1   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002E2   E5..         MOV     A,?V0 + 7
   \   0002E4   7003         JNZ     $+5
   \   0002E6   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   0002E9   E5..         MOV     A,?V0 + 8
   \   0002EB   C3           CLR     C
   \   0002EC   33           RLC     A
   \   0002ED   F8           MOV     R0,A
   \   0002EE   E4           CLR     A
   \   0002EF   33           RLC     A
   \   0002F0   F9           MOV     R1,A
   \   0002F1   EE           MOV     A,R6
   \   0002F2   28           ADD     A,R0
   \   0002F3   F8           MOV     R0,A
   \   0002F4   EF           MOV     A,R7
   \   0002F5   39           ADDC    A,R1
   \   0002F6   F9           MOV     R1,A
   \   0002F7   E8           MOV     A,R0
   \   0002F8   240A         ADD     A,#0xa
   \   0002FA   FA           MOV     R2,A
   \   0002FB   E9           MOV     A,R1
   \   0002FC   3400         ADDC    A,#0x0
   \   0002FE   FB           MOV     R3,A
   \   0002FF   8E82         MOV     DPL,R6
   \   000301   8F83         MOV     DPH,R7
   \   000303   A3           INC     DPTR
   \   000304   A3           INC     DPTR
   \   000305   A3           INC     DPTR
   \   000306   A3           INC     DPTR
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   EA           MOV     A,R2
   \   00030C   F0           MOVX    @DPTR,A
   \   00030D   A3           INC     DPTR
   \   00030E   EB           MOV     A,R3
   \   00030F   12....       LCALL   ?Subroutine53 & 0xFFFF
    905            }
   \                     ??CrossCallReturnLabel_83:
   \   000312   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000315   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000318   E5..         MOV     A,?V0 + 7
   \   00031A   C3           CLR     C
   \   00031B   33           RLC     A
   \   00031C   FC           MOV     R4,A
   \   00031D   E4           CLR     A
   \   00031E   33           RLC     A
   \   00031F   FD           MOV     R5,A
   \   000320   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000323   12....       LCALL   ?DEALLOC_XSTACK8
   \   000326   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000329   E5..         MOV     A,?V0 + 14
   \   00032B   6037         JZ      ??ZDO_ProcessMatchDescReq_21
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00032D                ; Setup parameters for call to function ZDP_EPRsp
   \   00032D   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000330   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000333   75....       MOV     ?V0 + 0,#ZDOBuildBuf & 0xff
   \   000336   75....       MOV     ?V0 + 1,#(ZDOBuildBuf >> 8) & 0xff
   \   000339   78..         MOV     R0,#?V0 + 0
   \   00033B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00033E   E5..         MOV     A,?V0 + 14
   \   000340   F5..         MOV     ?V0 + 0,A
   \   000342   78..         MOV     R0,#?V0 + 0
   \   000344   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000347   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00034A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00034D   75..00       MOV     ?V0 + 0,#0x0
   \   000350   78..         MOV     R0,#?V0 + 0
   \   000352   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000355   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000358   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035B   E9           MOV     A,R1
   \   00035C   7011         JNZ     ??ZDO_ProcessMatchDescReq_22
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   00035E                ; Setup parameters for call to function HalLcdWriteScreen
   \   00035E   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   000360   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   000362   8004         SJMP    ??ZDO_ProcessMatchDescReq_23
    915          #endif
    916              }
    917            }
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000364                ; Setup parameters for call to function HalLcdWriteScreen
   \   000364   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   000366   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000368   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   00036A   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   00036C   12....       LCALL   ??HalLcdWriteScreen?relay
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   00036F   7402         MOV     A,#0x2
   \   000371   12....       LCALL   ?XSTACK_DISP0_8
   \   000374   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000377   6008         JZ      ??CrossCallReturnLabel_433
    926            {
    927              osal_mem_free( inClusters );
   \   000379                ; Setup parameters for call to function osal_mem_free
   \   000379   7402         MOV     A,#0x2
   \   00037B   12....       LCALL   ?XSTACK_DISP0_8
   \   00037E   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    928            }
    929            
    930            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_433:
   \   000381   85..82       MOV     DPL,?XSP + 0
   \   000384   85..83       MOV     DPH,?XSP + 1
   \   000387   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00038A   6009         JZ      ??CrossCallReturnLabel_434
    931            {
    932              osal_mem_free( outClusters );
   \   00038C                ; Setup parameters for call to function osal_mem_free
   \   00038C   85..82       MOV     DPL,?XSP + 0
   \   00038F   85..83       MOV     DPH,?XSP + 1
   \   000392   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    933            }
   \                     ??CrossCallReturnLabel_434:
   \   000395   7404         MOV     A,#0x4
   \   000397   12....       LCALL   ?DEALLOC_XSTACK8
   \   00039A   7F0F         MOV     R7,#0xf
   \   00039C   02....       LJMP    ?BANKED_LEAVE_XDATA
    934          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007                REQUIRE ??Subroutine213_0
   \   000007                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 5,A
   \   000006   75..00       MOV     ?V0 + 6,#0x0
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00000D   E5..         MOV     A,?V0 + 13
   \   00000F   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000012   7A06         MOV     R2,#0x6
   \   000014   7B80         MOV     R3,#-0x80
   \   000016   12....       LCALL   ??ZDP_EPRsp?relay
   \   000019   7407         MOV     A,#0x7
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine222_0
   \   000002                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000003   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine248_0
   \   000004                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine250_0
   \   000006                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002                REQUIRE ??Subroutine258_0
   \   000002                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   AE82         MOV     R6,DPL
   \   000009   AF83         MOV     R7,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   2400         ADD     A,#0x0
   \   000002   F5..         MOV     ?V0 + 2,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   22           RET
    935          
    936          
    937          /*********************************************************************
    938           * @fn      ZDO_ProcessBindUnbindReq()
    939           *
    940           * @brief   Called to process a Bind or Unbind Request message.
    941           *
    942           * @param   inMsg  - incoming message (request)
    943           * @param   pReq - place to put parsed information
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine206_0
   \   000003                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    948          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    949            zAddrType_t SourceAddr;       // Binding Source addres
    950            byte bindStat;
    951          
    952            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    953            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
    954          
    955          
    956            // If the local device is not the primary binding cache
    957            // check the src address of the bind request.
    958            // If it is not the local device's extended address
    959            // discard the request.
    960            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    961                  (pReq->dstAddress.addrMode != Addr64Bit &&
    962                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024                ; Setup parameters for call to function sAddrExtCmp
   \   000024                ; Setup parameters for call to function NLME_GetExtAddr
   \   000024   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000027   EA           MOV     A,R2
   \   000028   FC           MOV     R4,A
   \   000029   EB           MOV     A,R3
   \   00002A   FD           MOV     R5,A
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   ??sAddrExtCmp?relay
   \   000037   E9           MOV     A,R1
   \   000038   600A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003A   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00003D   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6401         XRL     A,#0x1
   \   000042   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    963            {
    964              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   7484         MOV     A,#-0x7c
   \   00004C   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    965            }
    966            else
    967            {
    968              // Check source & destination endpoints
    969              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    970                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    971                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6017         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005E   C3           CLR     C
   \   00005F   94F1         SUBB    A,#-0xf
   \   000061   5012         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   000063   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000066   7018         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000068   EE           MOV     A,R6
   \   000069   2414         ADD     A,#0x14
   \   00006B   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   00006E   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000070   C3           CLR     C
   \   000071   94F1         SUBB    A,#-0xf
   \   000073   400B         JC      ??ZDO_ProcessBindUnbindReq_4
    972              {
    973                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   7482         MOV     A,#-0x7e
   \   00007D   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    974              }
    975              else
    976              {
    977                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   240C         ADD     A,#0xc
   \   000084   F582         MOV     DPL,A
   \   000086   E5..         MOV     A,?V0 + 1
   \   000088   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00008B   6421         XRL     A,#0x21
   \   00008D   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000091   7063         JNZ     ??ZDO_ProcessBindUnbindReq_6
    978                {
    979                  // Assume the table is full
    980                  bindStat = ZDP_TABLE_FULL;
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   748C         MOV     A,#-0x74
   \   00009B   F0           MOVX    @DPTR,A
    981          
    982                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   00009C                ; Setup parameters for call to function bindNumOfEntries
   \   00009C   12....       LCALL   ??bindNumOfEntries?relay
   \   00009F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000A2   E4           CLR     A
   \   0000A3   93           MOVC    A,@A+DPTR
   \   0000A4   F8           MOV     R0,A
   \   0000A5   7401         MOV     A,#0x1
   \   0000A7   93           MOVC    A,@A+DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   C3           CLR     C
   \   0000AA   EA           MOV     A,R2
   \   0000AB   98           SUBB    A,R0
   \   0000AC   EB           MOV     A,R3
   \   0000AD   99           SUBB    A,R1
   \   0000AE   506A         JNC     ??ZDO_ProcessBindUnbindReq_7
    983                  {
    984                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    985                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000B0                ; Setup parameters for call to function APSME_BindRequest
   \   0000B0   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B6   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000B9   12....       LCALL   ??APSME_BindRequest?relay
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV     A,R1
   \   0000C2   7056         JNZ     ??ZDO_ProcessBindUnbindReq_7
    986                    {
    987                      uint16 nwkAddr;
    988          
    989                      // valid entry
    990                      bindStat = ZDP_SUCCESS;
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   E4           CLR     A
   \   0000CB   F0           MOVX    @DPTR,A
    991          
    992                      // Notify to save info into NV
    993                      ZDApp_NVUpdate();
   \   0000CC                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000CC   12....       LCALL   ??ZDApp_NVUpdate?relay
    994          
    995                      // Check for the destination address
    996                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000CF   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000D2   7046         JNZ     ??ZDO_ProcessBindUnbindReq_7
    997                      {
    998                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000D4                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000D4   7401         MOV     A,#0x1
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   AC82         MOV     R4,DPL
   \   0000DB   AD83         MOV     R5,DPH
   \   0000DD   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000E0   FB           MOV     R3,A
   \   0000E1   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   0000E4   E9           MOV     A,R1
   \   0000E5   7033         JNZ     ??ZDO_ProcessBindUnbindReq_7
    999                        {
   1000                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000E7                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000E7   7D00         MOV     R5,#0x0
   \   0000E9   7C00         MOV     R4,#0x0
   \   0000EB   7900         MOV     R1,#0x0
   \   0000ED   12....       LCALL   ?Subroutine148 & 0xFFFF
   1001                        }
   1002                      }
   1003                    }
   1004                  }
   1005                }
   \                     ??CrossCallReturnLabel_236:
   \   0000F0   FB           MOV     R3,A
   \   0000F1   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   0000F4   8024         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1006                else // Unbind_req
   1007                {
   1008                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1009                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000F6                ; Setup parameters for call to function APSME_UnBindRequest
   \   0000F6   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FC   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000FF   12....       LCALL   ??APSME_UnBindRequest?relay
   \   000102   7401         MOV     A,#0x1
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \   000107   E9           MOV     A,R1
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   7007         JNZ     ??ZDO_ProcessBindUnbindReq_8
   1010                  {
   1011                    bindStat = ZDP_SUCCESS;
   \   000110   E4           CLR     A
   \   000111   F0           MOVX    @DPTR,A
   1012          
   1013                    // Notify to save info into NV
   1014                    ZDApp_NVUpdate();
   \   000112                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000112   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   000115   8003         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1015                  }
   1016                  else
   1017                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000117   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000119   F0           MOVX    @DPTR,A
   1018                }
   1019              }
   1020            }
   1021          
   1022            // Send back a response message
   1023            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1024                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1025                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00011A                ; Setup parameters for call to function ZDP_SendData
   \   00011A   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   00011D   E5..         MOV     A,?V0 + 1
   \   00011F   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000125   7401         MOV     A,#0x1
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   8582..       MOV     ?V0 + 2,DPL
   \   00012D   8583..       MOV     ?V0 + 3,DPH
   \   000130   78..         MOV     R0,#?V0 + 2
   \   000132   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000135   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000138   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00013B   4480         ORL     A,#0x80
   \   00013D   F5..         MOV     ?V0 + 3,A
   \   00013F   78..         MOV     R0,#?V0 + 2
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   1026          }
   \   00014A   740C         MOV     A,#0xc
   \   00014C   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine215_0
   \   000006                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   78..         MOV     R0,#?V0 + 2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6403         XRL     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FC           MOV     R4,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   8E82         MOV     DPL,R6
   \   00000A   8F83         MOV     DPH,R7
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   7901         MOV     R1,#0x1
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E5..         MOV     A,?V0 + 1
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FD           MOV     R5,A
   \   00000C   E5..         MOV     A,?V0 + 0
   \   00000E   240F         ADD     A,#0xf
   \   000010   FA           MOV     R2,A
   \   000011   E5..         MOV     A,?V0 + 1
   \   000013   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??ZDP_SendData?relay
   \   000006   7405         MOV     A,#0x5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine245_0
   \   000004                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine246_0
   \   000004                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002                REQUIRE ??Subroutine259_0
   \   000002                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   22           RET
   1027          
   1028          /*********************************************************************
   1029           * @fn      ZDO_UpdateAddrManager
   1030           *
   1031           * @brief   Update the Address Manager.
   1032           *
   1033           * @param   nwkAddr - network address
   1034           * @param   extAddr - extended address
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1039          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1040            AddrMgrEntry_t addrEntry;
   1041          
   1042            // Update the address manager
   1043            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1044            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine154 & 0xFFFF
   1045            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_511:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1046            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??AddrMgrEntryUpdate?relay
   1047          }
   \   000031   740D         MOV     A,#0xd
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF
   1048          
   1049          /*********************************************************************
   1050           * @fn      ZDO_ProcessServerDiscReq
   1051           *
   1052           * @brief   Process the Server_Discovery_req message.
   1053           *
   1054           * @param   inMsg  - incoming message (request)
   1055           *
   1056           * @return  none
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1059          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine115 & 0xFFFF
   1060            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1061            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_304:
   \   000008   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   58           ANL     A,R0
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   59           ANL     A,R1
   \   00001C   F5..         MOV     ?V0 + 1,A
   1062          
   1063            if ( matchMask )
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   45..         ORL     A,?V0 + 1
   \   000022   601C         JZ      ??ZDO_ProcessServerDiscReq_0
   1064            {
   1065              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1066                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000024                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002F   12....       LCALL   ?Subroutine135 & 0xFFFF
   1067            }
   \                     ??CrossCallReturnLabel_536:
   \   000032   FD           MOV     R5,A
   \   000033   7C00         MOV     R4,#0x0
   \   000035   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000038   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1068          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000040   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine217_0
   \   000004                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   F8           MOV     R0,A
   \   000004   22           RET
   1069          
   1070          /*********************************************************************
   1071           * Call Back Functions from APS  - API
   1072           */
   1073          
   1074          /*********************************************************************
   1075           * @fn          ZDO_EndDeviceTimeoutCB
   1076           *
   1077           * @brief       This function handles the binding timer for the End
   1078           *              Device Bind command.
   1079           *
   1080           * @param       none
   1081           *
   1082           * @return      none
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1085          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1086          #if defined ( REFLECTOR )
   1087            byte stat;
   1088            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1089            {
   1090              stat = ZDO_EDBind->status;
   1091          
   1092              // Send the response message to the first sent
   1093              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1094                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   90....       MOV     DPTR,#ZDO_EDBind
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2415         ADD     A,#0x15
   \   00001B   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   00001E   FA           MOV     R2,A
   \   00001F   90....       MOV     DPTR,#ZDO_EDBind
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2416         ADD     A,#0x16
   \   000025   08           INC     R0
   \   000026   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   90....       MOV     DPTR,#ZDO_EDBind
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2401         ADD     A,#0x1
   \   000036   FC           MOV     R4,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   3400         ADDC    A,#0x0
   \   00003B   FD           MOV     R5,A
   \   00003C   90....       MOV     DPTR,#ZDO_EDBind
   \   00003F   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000042   C0E0         PUSH    A
   \   000044   7401         MOV     A,#0x1
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C                ; Setup parameters for call to function ZDP_SendData
   \   00004C   EA           MOV     A,R2
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   7401         MOV     A,#0x1
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   8582..       MOV     ?V0 + 0,DPL
   \   00005C   8583..       MOV     ?V0 + 1,DPH
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   75..20       MOV     ?V0 + 0,#0x20
   \   000067   75..80       MOV     ?V0 + 1,#-0x80
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7901         MOV     R1,#0x1
   \   000071   7406         MOV     A,#0x6
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080                ; Setup parameters for call to function HalLcdWriteString
   \   000080   7901         MOV     R1,#0x1
   \   000082   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000084   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000086   12....       LCALL   ??HalLcdWriteString?relay
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7902         MOV     R1,#0x2
   \   000092   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   000094                ; Setup parameters for call to function HalLcdWriteString
   \   000094   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   000098   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009A                ; Setup parameters for call to function HalLcdWriteString
   \   00009A   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   00009C   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   00009E   12....       LCALL   ??HalLcdWriteString?relay
   1095          
   1096              ZDO_RemoveEndDeviceBind();
   \   0000A1   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A4   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   1097            }
   \                     ??CrossCallReturnLabel_411:
   \   0000A7   6035         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   0000A9   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   2410         ADD     A,#0x10
   \   0000AF   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000B2   6009         JZ      ??CrossCallReturnLabel_102
   \   0000B4                ; Setup parameters for call to function osal_mem_free
   \   0000B4   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   2410         ADD     A,#0x10
   \   0000BA   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000BD   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   2413         ADD     A,#0x13
   \   0000C3   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   0000C6   6009         JZ      ??CrossCallReturnLabel_103
   \   0000C8                ; Setup parameters for call to function osal_mem_free
   \   0000C8   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   2413         ADD     A,#0x13
   \   0000CE   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000D1                ; Setup parameters for call to function osal_mem_free
   \   0000D1   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D4   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0000D7   90....       MOV     DPTR,#ZDO_EDBind
   \   0000DA   E4           CLR     A
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   F0           MOVX    @DPTR,A
   1098          #endif  // REFLECTOR
   1099          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000DE   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000003                REQUIRE ??Subroutine238_0
   \   000003                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine243_0
   \   000001                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine256_0
   \   000001                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000003   22           RET
   1100          
   1101          /*********************************************************************
   1102           * Optional Management Messages
   1103           */
   1104          
   1105          /*********************************************************************
   1106           * @fn          ZDO_ProcessMgmtLqiReq
   1107           *
   1108           * @brief       This function handles parsing the incoming Management
   1109           *              LQI request and generate the response.
   1110           *
   1111           *   Note:      This function will limit the number of items returned
   1112           *              to ZDO_MAX_LQI_ITEMS items.
   1113           *
   1114           * @param       inMsg - incoming message (request)
   1115           *
   1116           * @return      none
   1117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1119          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1120            byte x;
   1121            byte index;
   1122            byte numItems;
   1123            byte maxItems;
   1124            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V0 + 10,#0x0
   \   000011   75..00       MOV     ?V0 + 11,#0x0
   1125            ZDP_MgmtLqiItem_t* item;
   1126            neighborEntry_t    entry;
   1127            byte aItems;
   1128            associated_devices_t *aDevice;
   1129            AddrMgrEntry_t  nwkEntry;
   1130            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000017   F5..         MOV     ?V0 + 6,A
   1131          
   1132            // Get the number of neighbor items
   1133            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000019                ; Setup parameters for call to function NLME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799C         MOV     R1,#-0x64
   \   000029   12....       LCALL   ??NLME_GetRequest?relay
   1134          
   1135            // Get the number of associated items
   1136            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002C                ; Setup parameters for call to function AssocCount
   \   00002C   7A04         MOV     R2,#0x4
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??AssocCount?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 4,A
   1137          
   1138            // Total number of items
   1139            maxItems += aItems;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   25..         ADD     A,?V0 + 4
   \   00003F   F0           MOVX    @DPTR,A
   1140          
   1141            // Start with the supplied index
   1142            if ( maxItems > StartIndex )
   \   000040   F8           MOV     R0,A
   \   000041   E5..         MOV     A,?V0 + 6
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1143            {
   1144              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V0 + 6
   \   00004E   F5..         MOV     ?V0 + 1,A
   1145          
   1146              // limit the size of the list
   1147              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1148                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V0 + 1,#0x3
   1149          
   1150              // Allocate the memory to build the table
   1151              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1152                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V0 + 1
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 10,R2
   \   000066   8B..         MOV     ?V0 + 11,R3
   1153          
   1154              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   45..         ORL     A,?V0 + 11
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1155              {
   1156                x = 0;
   \   000070   75..00       MOV     ?V0 + 5,#0x0
   1157                item = table;
   \   000073   AE..         MOV     R6,?V0 + 10
   \   000075   AF..         MOV     R7,?V0 + 11
   1158                index = StartIndex;
   \   000077   85....       MOV     ?V0 + 0,?V0 + 6
   \   00007A   02....       LJMP    ??CrossCallReturnLabel_64 & 0xFFFF
   1159          
   1160                // Loop through associated items and build list
   1161                for ( ; x < numItems; x++ )
   1162                {
   1163                  if ( index < aItems )
   1164                  {
   1165                    // get next associated device
   1166                    aDevice = AssocFindDevice( index++ );
   1167          
   1168                    // set basic fields
   1169                    item->panID   = _NIB.nwkPanId;
   1170                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1171                    item->nwkAddr = aDevice->shortAddr;
   1172                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1173                    item->depth   = 0xFF;
   1174                    item->lqi     = aDevice->linkInfo.rxLqi;
   1175          
   1176                    // set extented address
   1177                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1178                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1179          
   1180                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1181                    {
   1182                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1183                    }
   1184                    else
   1185                    {
   1186                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00007D                ; Setup parameters for call to function osal_memset
   \   00007D   12....       LCALL   ?Subroutine145 & 0xFFFF
   1187                    }
   1188          
   1189                    // use association info to set other fields
   1190                    if ( aDevice->nodeRelation == PARENT )
   \                     ??CrossCallReturnLabel_233:
   \   000080   85..82       MOV     DPL,?V0 + 2
   \   000083   85..83       MOV     DPH,?V0 + 3
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   7039         JNZ     ??ZDO_ProcessMgmtLqiReq_4
   1191                    {
   1192                      if (  aDevice->shortAddr == 0 )
   \   00008D   85..82       MOV     DPL,?V0 + 2
   \   000090   85..83       MOV     DPH,?V0 + 3
   \   000093   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000096   7012         JNZ     ??ZDO_ProcessMgmtLqiReq_5
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_COORD;
   \   000098   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   00009B   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   1195                        item->depth = 0;
   \                     ??CrossCallReturnLabel_515:
   \   00009E   EE           MOV     A,R6
   \   00009F   2418         ADD     A,#0x18
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   1196                      }
   \                     ??CrossCallReturnLabel_458:
   \   0000A7   E4           CLR     A
   \   0000A8   8016         SJMP    ??ZDO_ProcessMgmtLqiReq_6
   1197                      else
   1198                      {
   1199                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0000AA   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0000AD   F0           MOVX    @DPTR,A
   1200                        item->depth = _NIB.nodeDepth - 1;
   \   0000AE   90....       MOV     DPTR,#_NIB + 52
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   14           DEC     A
   \   0000B3   C0E0         PUSH    A
   \   0000B5   EE           MOV     A,R6
   \   0000B6   2418         ADD     A,#0x18
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   1201                      }
   1202          
   1203                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1204                      item->relation = ZDP_MGMT_REL_PARENT;
   1205                    }
   \                     ??CrossCallReturnLabel_459:
   \   0000BE   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000C0   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000C3   E4           CLR     A
   \   0000C4   803E         SJMP    ??CrossCallReturnLabel_323
   1206                    else
   1207                    {
   1208                      // If not parent, then it's a child
   1209                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   0000C6   90....       MOV     DPTR,#_NIB + 52
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   04           INC     A
   \   0000CB   C0E0         PUSH    A
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2418         ADD     A,#0x18
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   EF           MOV     A,R7
   \   0000D3   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine22 & 0xFFFF
   1210          
   1211                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_24:
   \   0000DB   C3           CLR     C
   \   0000DC   9403         SUBB    A,#0x3
   \   0000DE   EE           MOV     A,R6
   \   0000DF   4003         JC      $+5
   \   0000E1   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_7 & 0xFFFF
   1212                      {
   1213                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000E4   12....       LCALL   ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   0000E7   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?Subroutine22 & 0xFFFF
   1214          
   1215                        if ( aDevice->nodeRelation == CHILD_RFD )
   \                     ??CrossCallReturnLabel_25:
   \   0000EF   6401         XRL     A,#0x1
   \   0000F1   6003         JZ      $+5
   \   0000F3   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
   1216                        {
   1217                          item->rxOnIdle = FALSE;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000F6   12....       LCALL   ?Subroutine149 & 0xFFFF
   1218                        }
   \                     ??CrossCallReturnLabel_320:
   \   0000F9   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   0000FC   E4           CLR     A
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0000FD   F0           MOVX    @DPTR,A
   1219                        else
   1220                        {
   1221                          item->rxOnIdle = TRUE;
   1222                        }
   1223                      }
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   1227          
   1228                        if ( aDevice->nodeRelation == CHILD_FFD )
   1229                        {
   1230                          item->rxOnIdle = FALSE;
   1231                        }
   1232                        else
   1233                        {
   1234                          item->rxOnIdle = TRUE;
   1235                        }
   1236                      }
   1237          
   1238                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000FE   EE           MOV     A,R6
   \   0000FF   2416         ADD     A,#0x16
   \   000101   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000104   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000107   E5..         MOV     A,?V0 + 5
   \   000109   C3           CLR     C
   \   00010A   95..         SUBB    A,?V0 + 1
   \   00010C   4003         JC      $+5
   \   00010E   02....       LJMP    ??CrossCallReturnLabel_65 & 0xFFFF
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   C3           CLR     C
   \   000114   95..         SUBB    A,?V0 + 4
   \   000116   4003         JC      $+5
   \   000118   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \   00011B                ; Setup parameters for call to function AssocFindDevice
   \   00011B   A9..         MOV     R1,?V0 + 0
   \   00011D   12....       LCALL   ??AssocFindDevice?relay
   \   000120   8A..         MOV     ?V0 + 2,R2
   \   000122   8B..         MOV     ?V0 + 3,R3
   \   000124   05..         INC     ?V0 + 0
   \   000126   90....       MOV     DPTR,#_NIB + 33
   \   000129   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00012C   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00012F   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000132   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000135   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000138   85..82       MOV     DPL,?V0 + 2
   \   00013B   85..83       MOV     DPH,?V0 + 3
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   EE           MOV     A,R6
   \   00014C   2419         ADD     A,#0x19
   \   00014E   F582         MOV     DPL,A
   \   000150   EF           MOV     A,R7
   \   000151   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000154   D0E0         POP     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E4           CLR     A
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000161   7402         MOV     A,#0x2
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000169                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   AA82         MOV     R2,DPL
   \   000170   AB83         MOV     R3,DPH
   \   000172   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000175   E9           MOV     A,R1
   \   000176   6401         XRL     A,#0x1
   \   000178   6003         JZ      $+5
   \   00017A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \   00017D                ; Setup parameters for call to function sAddrExtCpy
   \   00017D   7404         MOV     A,#0x4
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   AC82         MOV     R4,DPL
   \   000184   AD83         MOV     R5,DPH
   \   000186   EE           MOV     A,R6
   \   000187   240A         ADD     A,#0xa
   \   000189   FA           MOV     R2,A
   \   00018A   EF           MOV     A,R7
   \   00018B   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   00018E   02....       LJMP    ??CrossCallReturnLabel_233 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   000191   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000194   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000197   6403         XRL     A,#0x3
   \   000199   7003         JNZ     $+5
   \   00019B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00019E   EE           MOV     A,R6
   \   00019F   2415         ADD     A,#0x15
   \   0001A1   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   1239                    }
   1240          
   1241                    item++;
   1242                  }
   \                     ??CrossCallReturnLabel_324:
   \   0001A4   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1243                  else
   1244                  {
   1245                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001A7   E5..         MOV     A,?V0 + 4
   \   0001A9   C3           CLR     C
   \   0001AA   95..         SUBB    A,?V0 + 6
   \   0001AC   4005         JC      ??ZDO_ProcessMgmtLqiReq_12
   1246                      // Start with 1st neighbor
   1247                      index = 0;
   \   0001AE   75..00       MOV     ?V0 + 0,#0x0
   \   0001B1   8016         SJMP    ??ZDO_ProcessMgmtLqiReq_13
   1248                    else
   1249                      // Start with >1st neighbor
   1250                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0001B3   E5..         MOV     A,?V0 + 6
   \   0001B5   C3           CLR     C
   \   0001B6   95..         SUBB    A,?V0 + 4
   \   0001B8   F5..         MOV     ?V0 + 0,A
   \   0001BA   800D         SJMP    ??ZDO_ProcessMgmtLqiReq_13
   1251                    break;
   1252                  }
   1253                }
   1254          
   1255                // Loop through neighbor items and finish list
   1256                for ( ; x < numItems; x++ )
   1257                {
   1258                  // Add next neighbor table item
   1259                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1260          
   1261                  // set ZDP_MgmtLqiItem_t fields
   1262                  item->panID    = entry.panId;
   1263                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1264                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1265                  item->nwkAddr  = entry.neighborAddress;
   1266                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1267                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1268                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1269                  item->depth    = 0xFF;
   1270                  item->lqi      = entry.linkInfo.rxLqi;
   1271          
   1272                  if ( item->nwkAddr == 0 )
   1273                  {
   1274                    item->devType = ZDP_MGMT_DT_COORD;
   1275                  }
   1276                  else
   1277                  {
   1278                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001BC   12....       LCALL   ?Subroutine127 & 0xFFFF
   1279                  }
   \                     ??CrossCallReturnLabel_327:
   \   0001BF   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001C2   E5..         MOV     A,?V0 + 5
   \   0001C4   C3           CLR     C
   \   0001C5   95..         SUBB    A,?V0 + 1
   \   0001C7   5066         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001C9                ; Setup parameters for call to function NLME_GetRequest
   \   0001C9   740E         MOV     A,#0xe
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   AC82         MOV     R4,DPL
   \   0001D0   AD83         MOV     R5,DPH
   \   0001D2   85....       MOV     ?V0 + 2,?V0 + 0
   \   0001D5   AA..         MOV     R2,?V0 + 2
   \   0001D7   7B00         MOV     R3,#0x0
   \   0001D9   7987         MOV     R1,#-0x79
   \   0001DB   12....       LCALL   ??NLME_GetRequest?relay
   \   0001DE   05..         INC     ?V0 + 0
   \   0001E0   7418         MOV     A,#0x18
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001E8                ; Setup parameters for call to function osal_memset
   \   0001E8   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0001EB   EE           MOV     A,R6
   \   0001EC   2412         ADD     A,#0x12
   \   0001EE   F8           MOV     R0,A
   \   0001EF   EF           MOV     A,R7
   \   0001F0   3400         ADDC    A,#0x0
   \   0001F2   F9           MOV     R1,A
   \   0001F3   740E         MOV     A,#0xe
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   0001FB   8882         MOV     DPL,R0
   \   0001FD   8983         MOV     DPH,R1
   \   0001FF   EA           MOV     A,R2
   \   000200   F0           MOVX    @DPTR,A
   \   000201   A3           INC     DPTR
   \   000202   EB           MOV     A,R3
   \   000203   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000206   7403         MOV     A,#0x3
   \   000208   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00020B   741D         MOV     A,#0x1d
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   E0           MOVX    A,@DPTR
   \   000211   C0E0         PUSH    A
   \   000213   EE           MOV     A,R6
   \   000214   2419         ADD     A,#0x19
   \   000216   F582         MOV     DPL,A
   \   000218   EF           MOV     A,R7
   \   000219   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00021C   D0E0         POP     A
   \   00021E   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000221   7099         JNZ     ??ZDO_ProcessMgmtLqiReq_14
   \   000223   12....       LCALL   ?Subroutine147 & 0xFFFF
   1280          
   1281                  item++;
   1282                }
   1283              }
   1284            }
   \                     ??CrossCallReturnLabel_641:
   \   000226   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000229   E4           CLR     A
   \   00022A   8093         SJMP    ??CrossCallReturnLabel_327
   1285            else
   1286            {
   1287              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   00022C   75..00       MOV     ?V0 + 1,#0x0
   1288            }
   1289          
   1290            // Send response
   1291            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1292                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00022F                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00022F   75..00       MOV     ?V0 + 2,#0x0
   \   000232   78..         MOV     R0,#?V0 + 2
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000237   78..         MOV     R0,#?V0 + 10
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   78..         MOV     R0,#?V0 + 1
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000241   E5..         MOV     A,?V0 + 6
   \   000243   F5..         MOV     ?V0 + 1,A
   \   000245   78..         MOV     R0,#?V0 + 1
   \   000247   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00024A   7405         MOV     A,#0x5
   \   00024C   12....       LCALL   ?XSTACK_DISP0_8
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   FD           MOV     R5,A
   \   000251   7C00         MOV     R4,#0x0
   \   000253   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000256   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   000259   7405         MOV     A,#0x5
   \   00025B   12....       LCALL   ?DEALLOC_XSTACK8
   1293          
   1294            if ( table )
   \   00025E   E5..         MOV     A,?V0 + 10
   \   000260   45..         ORL     A,?V0 + 11
   \   000262   6007         JZ      ??ZDO_ProcessMgmtLqiReq_15
   1295            {
   1296              osal_mem_free( table );
   \   000264                ; Setup parameters for call to function osal_mem_free
   \   000264   AA..         MOV     R2,?V0 + 10
   \   000266   AB..         MOV     R3,?V0 + 11
   \   000268   12....       LCALL   ??osal_mem_free?relay
   1297            }
   1298          }
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   00026B   7425         MOV     A,#0x25
   \   00026D                REQUIRE ?Subroutine5
   \   00026D                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   2412         ADD     A,#0x12
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine219_0
   \   000001                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   2415         ADD     A,#0x15
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   7C08         MOV     R4,#0x8
   \   000002   7D00         MOV     R5,#0x0
   \   000004   79FF         MOV     R1,#-0x1
   \   000006   EE           MOV     A,R6
   \   000007   240A         ADD     A,#0xa
   \   000009   FA           MOV     R2,A
   \   00000A   EF           MOV     A,R7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   FB           MOV     R3,A
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   2414         ADD     A,#0x14
   \   000002                REQUIRE ??Subroutine221_0
   \   000002                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   241A         ADD     A,#0x1a
   \   000004   FE           MOV     R6,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   05..         INC     ?V0 + 5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2415         ADD     A,#0x15
   \   000004   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000007   2416         ADD     A,#0x16
   \   000009   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine224_0
   \   000003                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000007   2418         ADD     A,#0x18
   \   000009   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   00000C   74FF         MOV     A,#-0x1
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   000006   7402         MOV     A,#0x2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   2402         ADD     A,#0x2
   \   000004   FA           MOV     R2,A
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   00000D   E5..         MOV     A,?V0 + 13
   \   00000F   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine226_0
   \   000006                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000003                REQUIRE ??Subroutine231_0
   \   000003                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??sAddrExtCpy?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine268_0
   \   000001                ; // Fall through to label ??Subroutine268_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1299          
   1300          /*********************************************************************
   1301           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1302           *
   1303           * @brief       This function handles parsing the incoming Management
   1304           *              Network Discover request and starts the request.
   1305           *
   1306           * @param       inMsg - incoming message (request)
   1307           *
   1308           * @return      none
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1311          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1312            NLME_ScanFields_t scan;
   1313            uint8             index;
   1314            uint8             *msg;
   1315          
   1316            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine81 & 0xFFFF
   1317            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_132:
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   12....       LCALL   ?XSTORE_R2345
   1318            msg += 4;
   \   00001A   EE           MOV     A,R6
   \   00001B   2404         ADD     A,#0x4
   \   00001D   FE           MOV     R6,A
   \   00001E   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   1319            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_668:
   \   000021   C0E0         PUSH    A
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   12....       LCALL   ?Subroutine45 & 0xFFFF
   1320            index         = *msg;
   \                     ??CrossCallReturnLabel_66:
   \   00002D   FA           MOV     R2,A
   1321            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00002E   7405         MOV     A,#0x5
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
   1322            scan.scanApp  = NLME_DISC_SCAN;
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   7401         MOV     A,#0x1
   \   00003D   F0           MOVX    @DPTR,A
   1323          
   1324            // Save off the information to be used for the response
   1325            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003E   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000041   F0           MOVX    @DPTR,A
   1326            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000042   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000045   04           INC     A
   \   000046   12....       LCALL   ?Subroutine55 & 0xFFFF
   1327            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_88:
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00004D   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   000050   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   1328            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_333:
   \   000053   EA           MOV     A,R2
   \   000054   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000057   F0           MOVX    @DPTR,A
   1329            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   00005D   E5..         MOV     A,?V0 + 1
   \   00005F   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000065   12....       LCALL   ?Subroutine54 & 0xFFFF
   1330          
   1331            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_86:
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   \   00006C   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   00006F   E9           MOV     A,R1
   \   000070   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1332            {
   1333              NLME_NwkDiscTerm();
   \   000072                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000072   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1334          
   1335              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1336            }
   1337          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000075   7407         MOV     A,#0x7
   \   000077   02....       LJMP    ??Subroutine208_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine274_0:
   \   000000   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??osal_build_uint32?relay
   \   00000C   22           RET
   1338          
   1339          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1340          /*********************************************************************
   1341           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1342           *
   1343           * @brief       This function finishes the processing of the Management
   1344           *              Network Discover Request and generates the response.
   1345           *
   1346           *   Note:      This function will limit the number of items returned
   1347           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1348           *
   1349           * @param       ResultCountSrcAddr - source of the request
   1350           * @param       msg - pointer to incoming message
   1351           * @param       SecurityUse -
   1352           *
   1353           * @return      none
   1354           */
   1355          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1356          {
   1357            byte count, i, ResultCount = 0;
   1358            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1359          
   1360            NetworkList = nwk_getNwkDescList();
   1361          
   1362            // Count the number of nwk descriptors in the list
   1363            pList = nwk_getNwkDescList();
   1364            while (pList)
   1365            {
   1366              ResultCount++;
   1367              pList = pList->nextDesc;
   1368            }
   1369          
   1370            if ( ZSTACK_ROUTER_BUILD )
   1371            {
   1372              // Look for my PanID.
   1373              pList = nwk_getNwkDescList();
   1374              while ( pList )
   1375              {
   1376                if ( pList->panId == _NIB.nwkPanId )
   1377                {
   1378                  break;
   1379                }
   1380          
   1381          
   1382                if ( !pList->nextDesc )
   1383                {
   1384                  break;
   1385                }
   1386                pList = pList->nextDesc;
   1387              }
   1388          
   1389          
   1390              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1391              // prepend it.
   1392              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1393              {
   1394                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1395                if ( newDesc )
   1396                {
   1397                  byte pJoin;
   1398          
   1399                  newDesc->panId = _NIB.nwkPanId;
   1400                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1401                  newDesc->version = NLME_GetProtocolVersion();
   1402                  newDesc->stackProfile = zgStackProfile;
   1403                  
   1404                  //Extended PanID
   1405                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1406          
   1407                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1408                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1409                                                     INVALID_NODE_ADDR);
   1410          
   1411                  newDesc->nextDesc = NetworkList;
   1412                  NetworkList = newDesc;
   1413                  ResultCount++;
   1414                }
   1415              }
   1416            }
   1417          
   1418            // Calc the count and apply a max count.
   1419            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1420            {
   1421              count = 0;
   1422            }
   1423            else
   1424            {
   1425              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1426              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1427              {
   1428                count = ZDO_MAX_NWKDISC_ITEMS;
   1429              }
   1430          
   1431              // Move the list pointer up to the start index.
   1432              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1433              {
   1434                NetworkList = NetworkList->nextDesc;
   1435              }
   1436            }
   1437          
   1438            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1439                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1440                                zdappMgmtNwkDiscStartIndex,
   1441                                count,
   1442                                NetworkList,
   1443                                false );
   1444          
   1445            if ( ZSTACK_ROUTER_BUILD )
   1446            {
   1447              if ( newDesc != NULL )
   1448              {
   1449                osal_mem_free( newDesc );
   1450              }
   1451            }
   1452          
   1453            NLME_NwkDiscTerm();
   1454          }
   1455          #endif
   1456          
   1457          /*********************************************************************
   1458           * @fn          ZDO_ProcessMgmtRtgReq
   1459           *
   1460           * @brief       This function finishes the processing of the Management
   1461           *              Routing Request and generates the response.
   1462           *
   1463           *   Note:      This function will limit the number of items returned
   1464           *              to ZDO_MAX_RTG_ITEMS items.
   1465           *
   1466           * @param       inMsg - incoming message (request)
   1467           *
   1468           * @return      none
   1469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1470          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1471          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   1472            byte x;
   1473            byte maxNumItems;
   1474            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1475            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V0 + 6,R6
   \   000012   8E..         MOV     ?V0 + 7,R6
   1476            rtgItem_t *pList;
   1477            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000017   FF           MOV     R7,A
   1478          
   1479            // Get the number of table items
   1480            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000018                ; Setup parameters for call to function NLME_GetRequest
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   ??NLME_GetRequest?relay
   1481          
   1482            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   98           SUBB    A,R0
   \   000036   4003         JC      $+5
   \   000038   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1483            {
   1484              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C3           CLR     C
   \   00003D   9F           SUBB    A,R7
   \   00003E   FE           MOV     R6,A
   1485          
   1486              // limit the size of the list
   1487              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003F   C3           CLR     C
   \   000040   940B         SUBB    A,#0xb
   \   000042   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1488              {
   1489                numItems = ZDO_MAX_RTG_ITEMS;
   \   000044   7E0A         MOV     R6,#0xa
   1490              }
   1491          
   1492              // Allocate the memory to build the table
   1493              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000046                ; Setup parameters for call to function osal_mem_alloc
   \   000046   EE           MOV     A,R6
   \   000047   75F007       MOV     B,#0x7
   \   00004A   A4           MUL     AB
   \   00004B   FA           MOV     R2,A
   \   00004C   ABF0         MOV     R3,B
   \   00004E   12....       LCALL   ??osal_mem_alloc?relay
   \   000051   8A..         MOV     ?V0 + 0,R2
   \   000053   8B..         MOV     ?V0 + 1,R3
   \   000055   8A..         MOV     ?V0 + 6,R2
   \   000057   8B..         MOV     ?V0 + 7,R3
   1494          
   1495              if ( pBuf != NULL )
   \   000059   EA           MOV     A,R2
   \   00005A   45..         ORL     A,?V0 + 7
   \   00005C   607B         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1496              {
   1497                // Convert buffer to list
   1498                pList = (rtgItem_t *)pBuf;
   1499          
   1500                // Loop through items and build list
   1501                for ( x = 0; x < numItems; x++ )
   \   00005E   75..00       MOV     ?V0 + 4,#0x0
   \   000061   8025         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1502                {
   1503                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1504          
   1505                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1506                  switch( pList->status )
   1507                  {
   1508                    case RT_ACTIVE:
   1509                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1510                      break;
   1511          
   1512                    case RT_DISC:
   1513                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1514                      break;
   1515          
   1516                    case RT_LINK_FAIL:
   1517                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000063   85..82       MOV     DPL,?V0 + 0
   \   000066   85..83       MOV     DPH,?V0 + 1
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   7402         MOV     A,#0x2
   \   000070   F0           MOVX    @DPTR,A
   1518          
   1519                    case RT_INIT:
   1520                    case RT_REPAIR:
   1521                    default:
   1522                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000071   85..82       MOV     DPL,?V0 + 0
   \   000074   85..83       MOV     DPH,?V0 + 1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007E   F0           MOVX    @DPTR,A
   1523                      break;
   1524                  }
   1525          
   1526                  // Increment pointer to next record
   1527                  pList++;
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   2407         ADD     A,#0x7
   \   000083   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000086   05..         INC     ?V0 + 4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000088   E5..         MOV     A,?V0 + 4
   \   00008A   C3           CLR     C
   \   00008B   9E           SUBB    A,R6
   \   00008C   504D         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   00008E                ; Setup parameters for call to function NLME_GetRequest
   \   00008E   AC..         MOV     R4,?V0 + 0
   \   000090   AD..         MOV     R5,?V0 + 1
   \   000092   85....       MOV     ?V0 + 8,?V0 + 4
   \   000095   8F..         MOV     ?V0 + 10,R7
   \   000097   E5..         MOV     A,?V0 + 8
   \   000099   25..         ADD     A,?V0 + 10
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   FB           MOV     R3,A
   \   0000A0   798B         MOV     R1,#-0x75
   \   0000A2   12....       LCALL   ??NLME_GetRequest?relay
   \   0000A5   85..82       MOV     DPL,?V0 + 0
   \   0000A8   85..83       MOV     DPH,?V0 + 1
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   14           DEC     A
   \   0000B2   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000B4   14           DEC     A
   \   0000B5   6013         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000B7   14           DEC     A
   \   0000B8   60A9         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   0000BA   80B5         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000BC   85..82       MOV     DPL,?V0 + 0
   \   0000BF   85..83       MOV     DPH,?V0 + 1
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E4           CLR     A
   \   0000C8   80B4         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000CA   85..82       MOV     DPL,?V0 + 0
   \   0000CD   85..83       MOV     DPH,?V0 + 1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   80A5         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1528                }
   1529              }
   1530              else
   1531              {
   1532                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D9   7E00         MOV     R6,#0x0
   1533              }
   1534            }
   1535          
   1536            // Send response
   1537            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1538                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000DB                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000DB   75..00       MOV     ?V0 + 0,#0x0
   \   0000DE   78..         MOV     R0,#?V0 + 0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E3   78..         MOV     R0,#?V0 + 6
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   EE           MOV     A,R6
   \   0000E9   F5..         MOV     ?V0 + 0,A
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   EF           MOV     A,R7
   \   0000F1   F5..         MOV     ?V0 + 0,A
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F8   7405         MOV     A,#0x5
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   FD           MOV     R5,A
   \   0000FF   7C00         MOV     R4,#0x0
   \   000101   E5..         MOV     A,?V0 + 2
   \   000103   2402         ADD     A,#0x2
   \   000105   FA           MOV     R2,A
   \   000106   E5..         MOV     A,?V0 + 3
   \   000108   3400         ADDC    A,#0x0
   \   00010A   FB           MOV     R3,A
   \   00010B   E5..         MOV     A,?V0 + 2
   \   00010D   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000110   E5..         MOV     A,?V0 + 3
   \   000112   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000115   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   000118   7405         MOV     A,#0x5
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   1539          
   1540            if ( pBuf )
   \   00011D   E5..         MOV     A,?V0 + 6
   \   00011F   45..         ORL     A,?V0 + 7
   \   000121   6007         JZ      ??ZDO_ProcessMgmtRtgReq_9
   1541            {
   1542              osal_mem_free( pBuf );
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV     R2,?V0 + 6
   \   000125   AB..         MOV     R3,?V0 + 7
   \   000127   12....       LCALL   ??osal_mem_free?relay
   1543            }
   1544          }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00012A   7401         MOV     A,#0x1
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012F   7F0C         MOV     R7,#0xc
   \   000131   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
   1545          
   1546          /*********************************************************************
   1547           * @fn          ZDO_ProcessMgmtBindReq
   1548           *
   1549           * @brief       This function finishes the processing of the Management
   1550           *              Bind Request and generates the response.
   1551           *
   1552           *   Note:      This function will limit the number of items returned
   1553           *              to ZDO_MAX_BIND_ITEMS items.
   1554           *
   1555           * @param       inMsg - incoming message (request)
   1556           *
   1557           * @return      none
   1558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1559          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1560          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1561          #if defined ( REFLECTOR )
   1562            byte x;
   1563            uint16 maxNumItems;
   1564            uint16 numItems;
   1565            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   1566            apsBindingItem_t *pList;
   1567            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000017   F5..         MOV     ?V0 + 0,A
   1568            uint8 status;
   1569          
   1570            // Get the number of table items
   1571            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000019                ; Setup parameters for call to function APSME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   79A3         MOV     R1,#-0x5d
   \   000029   12....       LCALL   ??APSME_GetRequest?relay
   1572          
   1573            if ( maxNumItems > StartIndex )
   \   00002C   85....       MOV     ?V0 + 4,?V0 + 0
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000038   C3           CLR     C
   \   000039   E5..         MOV     A,?V0 + 4
   \   00003B   98           SUBB    A,R0
   \   00003C   E4           CLR     A
   \   00003D   99           SUBB    A,R1
   \   00003E   507F         JNC     ??ZDO_ProcessMgmtBindReq_0
   1574            {
   1575              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C3           CLR     C
   \   000048   95..         SUBB    A,?V0 + 4
   \   00004A   FE           MOV     R6,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   9400         SUBB    A,#0x0
   \   00004F   FF           MOV     R7,A
   1576            }
   1577            else
   1578            {
   1579              numItems = 0;
   1580            }
   1581          
   1582            // limit the size of the list
   1583            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000050   C3           CLR     C
   \   000051   EE           MOV     A,R6
   \   000052   9404         SUBB    A,#0x4
   \   000054   EF           MOV     A,R7
   \   000055   9400         SUBB    A,#0x0
   \   000057   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1584            {
   1585              numItems = ZDO_MAX_BIND_ITEMS;
   \   000059   7E03         MOV     R6,#0x3
   \   00005B   7F00         MOV     R7,#0x0
   \   00005D   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1586            }
   1587          
   1588            // Allocate the memory to build the table
   1589            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   00005F   EE           MOV     A,R6
   \   000060   4F           ORL     A,R7
   \   000061   605C         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000063                ; Setup parameters for call to function osal_mem_alloc
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   EA           MOV     A,R2
   \   000068   75F015       MOV     B,#0x15
   \   00006B   A4           MUL     AB
   \   00006C   FA           MOV     R2,A
   \   00006D   A8F0         MOV     R0,B
   \   00006F   75F015       MOV     B,#0x15
   \   000072   EB           MOV     A,R3
   \   000073   A4           MUL     AB
   \   000074   28           ADD     A,R0
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??osal_mem_alloc?relay
   \   000079   8A..         MOV     ?V0 + 4,R2
   \   00007B   8B..         MOV     ?V0 + 5,R3
   \   00007D   8A..         MOV     ?V0 + 2,R2
   \   00007F   8B..         MOV     ?V0 + 3,R3
   \   000081   EA           MOV     A,R2
   \   000082   45..         ORL     A,?V0 + 3
   \   000084   6039         JZ      ??ZDO_ProcessMgmtBindReq_0
   1590            {
   1591              status = ZSuccess;
   \   000086   75..00       MOV     ?V0 + 1,#0x0
   1592          
   1593              // Convert buffer to list
   1594              pList = (apsBindingItem_t *)pBuf;
   1595          
   1596              // Loop through items and build list
   1597              for ( x = 0; x < numItems; x++ )
   \   000089   75..00       MOV     ?V0 + 6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   00008C   85....       MOV     ?V0 + 8,?V0 + 6
   \   00008F   C3           CLR     C
   \   000090   E5..         MOV     A,?V0 + 8
   \   000092   9E           SUBB    A,R6
   \   000093   E4           CLR     A
   \   000094   9F           SUBB    A,R7
   \   000095   502D         JNC     ??ZDO_ProcessMgmtBindReq_4
   1598              {
   1599                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   000097                ; Setup parameters for call to function APSME_GetRequest
   \   000097   AC..         MOV     R4,?V0 + 4
   \   000099   AD..         MOV     R5,?V0 + 5
   \   00009B   85....       MOV     ?V0 + 10,?V0 + 6
   \   00009E   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   25..         ADD     A,?V0 + 8
   \   0000A5   FA           MOV     R2,A
   \   0000A6   E4           CLR     A
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   FB           MOV     R3,A
   \   0000AA   79A2         MOV     R1,#-0x5e
   \   0000AC   12....       LCALL   ??APSME_GetRequest?relay
   1600                pList++;
   \   0000AF   E5..         MOV     A,?V0 + 4
   \   0000B1   2415         ADD     A,#0x15
   \   0000B3   F5..         MOV     ?V0 + 4,A
   \   0000B5   E5..         MOV     A,?V0 + 5
   \   0000B7   3400         ADDC    A,#0x0
   \   0000B9   F5..         MOV     ?V0 + 5,A
   1601              }
   \   0000BB   05..         INC     ?V0 + 6
   \   0000BD   80CD         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1602          
   1603            }
   1604            else
   1605            {
   1606              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000BF   75..8B       MOV     ?V0 + 1,#-0x75
   1607              numItems = 0;
   \   0000C2   7E00         MOV     R6,#0x0
   1608            }
   1609          
   1610            // Send response
   1611            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1612                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000C4                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000C4   75..00       MOV     ?V0 + 4,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 4
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   EE           MOV     A,R6
   \   0000D2   F5..         MOV     ?V0 + 4,A
   \   0000D4   78..         MOV     R0,#?V0 + 4
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D9   78..         MOV     R0,#?V0 + 0
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   7405         MOV     A,#0x5
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   FD           MOV     R5,A
   \   0000E5   AC..         MOV     R4,?V0 + 1
   \   0000E7   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000EA   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   0000ED   7405         MOV     A,#0x5
   \   0000EF   12....       LCALL   ?DEALLOC_XSTACK8
   1613          
   1614            if ( pBuf )
   \   0000F2   E5..         MOV     A,?V0 + 2
   \   0000F4   45..         ORL     A,?V0 + 3
   \   0000F6   6007         JZ      ??ZDO_ProcessMgmtBindReq_5
   1615            {
   1616              osal_mem_free( pBuf );
   \   0000F8                ; Setup parameters for call to function osal_mem_free
   \   0000F8   AA..         MOV     R2,?V0 + 2
   \   0000FA   AB..         MOV     R3,?V0 + 3
   \   0000FC   12....       LCALL   ??osal_mem_free?relay
   1617            }
   1618          #else
   1619            (void)inMsg;
   1620          #endif
   1621          }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000FF   7402         MOV     A,#0x2
   \   000101   02....       LJMP    ?Subroutine5 & 0xFFFF
   1622          
   1623          /*********************************************************************
   1624           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1625           *
   1626           * @brief       This function finishes the processing of the Management
   1627           *              Direct Join Request and generates the response.
   1628           *
   1629           * @param       inMsg - incoming message (request)
   1630           *
   1631           * @return      none
   1632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1633          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1634          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine115 & 0xFFFF
   1635            uint8 *deviceAddr;
   1636            uint8 capInfo;
   1637            uint8 stat;
   1638          
   1639            // Parse the message
   1640            deviceAddr = inMsg->asdu;
   1641            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1642          
   1643            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_305:
   \   00000D   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000010                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   000021   E9           MOV     A,R1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   1644          
   1645            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV     ?V0 + 0,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   8582..       MOV     ?V0 + 0,DPL
   \   000039   8583..       MOV     ?V0 + 1,DPH
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV     ?V0 + 0,#0x35
   \   000044   75..80       MOV     ?V0 + 1,#-0x80
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   1646          }
   \   000052                REQUIRE ?Subroutine9
   \   000052                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine208_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   7901         MOV     R1,#0x1
   \   000002                REQUIRE ??Subroutine227_0
   \   000002                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000008   22           RET
   1647          
   1648          /*********************************************************************
   1649           * @fn          ZDO_ProcessMgmtLeaveReq
   1650           *
   1651           * @brief       This function processes a Management Leave Request
   1652           *              and generates the response.
   1653           *
   1654           * @param       inMsg - incoming message (request)
   1655           *
   1656           * @return      none
   1657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1658          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1659          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1660            NLME_LeaveReq_t req;
   1661            ZStatus_t       status;
   1662            uint8           option;
   1663            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine116 & 0xFFFF
   1664          
   1665            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1666                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_195:
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000017   E9           MOV     A,R1
   \   000018   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001A                ; Setup parameters for call to function sAddrExtCmp
   \   00001A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??sAddrExtCmp?relay
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1667            {
   1668              // Remove this device
   1669              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1670            }
   1671            else
   1672            {
   1673              // Remove child device
   1674              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EE           MOV     A,R6
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EF           MOV     A,R7
   1675            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL   ?Subroutine41 & 0xFFFF
   1676          
   1677            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_59:
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   1678            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000046   A2E6         MOV     C,0xE0 /* A   */.6
   \   000048   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1679            {
   1680              req.removeChildren = TRUE;
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
   1681            }
   1682          
   1683            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000052   E8           MOV     A,R0
   \   000053   A2E7         MOV     C,0xE0 /* A   */.7
   \   000055   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1684            {
   1685               req.rejoin = TRUE;
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   1686            }
   1687          
   1688            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1689          
   1690            status = NLME_LeaveReq( &req );
   \   000066                ; Setup parameters for call to function NLME_LeaveReq
   \   000066   04           INC     A
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   12....       LCALL   ??NLME_LeaveReq?relay
   \   000071   E9           MOV     A,R1
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   F0           MOVX    @DPTR,A
   1691          
   1692            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000079                ; Setup parameters for call to function ZDP_SendData
   \   000079   75..00       MOV     ?V0 + 2,#0x0
   \   00007C   78..         MOV     R0,#?V0 + 2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 2,DPL
   \   000089   8583..       MOV     ?V0 + 3,DPH
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   75..34       MOV     ?V0 + 2,#0x34
   \   000094   75..80       MOV     ?V0 + 3,#-0x80
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   1693          }
   \   0000A2   7406         MOV     A,#0x6
   \   0000A4   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1694          
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1698           *
   1699           * @brief       This function processes a Management Permit Join Request
   1700           *              and generates the response.
   1701           *
   1702           * @param       inMsg - incoming message (request)
   1703           *
   1704           * @return      none
   1705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1706          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1707          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1708            uint8 stat;
   1709            uint8 duration;
   1710            uint8 tcsig;
   1711          
   1712            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1713            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1714          
   1715            // Set the network layer permit join duration
   1716            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   00000E                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00000E   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000011   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000018   E9           MOV     A,R1
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   12....       LCALL   ?Subroutine56 & 0xFFFF
   1717          
   1718            // Handle the Trust Center Significance
   1719            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1720            {
   1721              if ( tcsig == TRUE )
   1722              {
   1723                ZDSecMgrPermitJoining( duration );
   1724              }
   1725            }
   1726          
   1727            // Send a response if unicast
   1728            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \                     ??CrossCallReturnLabel_90:
   \   000022   F4           CPL     A
   \   000023   7003         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F4           CPL     A
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000028   6029         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1729            {
   1730              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002A                ; Setup parameters for call to function ZDP_SendData
   \   00002A   75..00       MOV     ?V0 + 0,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..36       MOV     ?V0 + 0,#0x36
   \   000045   75..80       MOV     ?V0 + 1,#-0x80
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   12....       LCALL   ?Subroutine119 & 0xFFFF
   1731            }
   \                     ??CrossCallReturnLabel_359:
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   1732          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000053   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   1733          
   1734          /*
   1735           * This function stub allows the next higher layer to be notified of
   1736           * a permit joining timeout.
   1737           */
   1738          /*********************************************************************
   1739           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1740           *
   1741           * @brief       This function stub allows the next higher layer to be
   1742           *              notified of a permit joining timeout. Currently, this
   1743           *              directly bypasses the APS layer.
   1744           *
   1745           * @param       none
   1746           *
   1747           * @return      none
   1748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1749          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1750          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1751            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1752            // Currently, only the ZDSecMgr needs to be notified
   1753            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1754            {
   1755              ZDSecMgrPermitJoiningTimeout();
   1756            }
   1757            #endif
   1758          }
   \   000000   02....       LJMP    ?BRET
   1759          
   1760          /*********************************************************************
   1761           * @fn          ZDO_ProcessUserDescReq
   1762           *
   1763           * @brief       This function finishes the processing of the User
   1764           *              Descriptor Request and generates the response.
   1765           *
   1766           * @param       inMsg - incoming message (request)
   1767           *
   1768           * @return      none
   1769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1770          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1771          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1772            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine69 & 0xFFFF
   1773            UserDescriptorFormat_t userDesc;
   1774          
   1775            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1776                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \                     ??CrossCallReturnLabel_297:
   \   000011   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000014   E0           MOVX    A,@DPTR
   \   000015   65..         XRL     A,?V0 + 0
   \   000017   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   00001D   7058         JNZ     ??ZDO_ProcessUserDescReq_1
   \   00001F                ; Setup parameters for call to function osal_nv_read
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   8582..       MOV     ?V0 + 2,DPL
   \   000028   8583..       MOV     ?V0 + 3,DPH
   \   00002B   78..         MOV     R0,#?V0 + 2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..11       MOV     ?V0 + 2,#0x11
   \   000033   75..00       MOV     ?V0 + 3,#0x0
   \   000036   78..         MOV     R0,#?V0 + 2
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV     R4,#0x0
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7A81         MOV     R2,#-0x7f
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ??osal_nv_read?relay
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
   \   00004C   7029         JNZ     ??ZDO_ProcessUserDescReq_1
   1777            {
   1778              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00004E                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00004E   75..00       MOV     ?V0 + 2,#0x0
   \   000051   78..         MOV     R0,#?V0 + 2
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7401         MOV     A,#0x1
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 2,DPL
   \   00005E   8583..       MOV     ?V0 + 3,DPH
   \   000061   78..         MOV     R0,#?V0 + 2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   AC..         MOV     R4,?V0 + 0
   \   000068   AD..         MOV     R5,?V0 + 1
   \   00006A   12....       LCALL   ?Subroutine120 & 0xFFFF
   1779            }
   \                     ??CrossCallReturnLabel_202:
   \   00006D   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   8021         SJMP    ??ZDO_ProcessUserDescReq_2
   1780            else
   1781            {
   1782              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1783                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..11       MOV     ?V0 + 2,#0x11
   \   00007A   75..80       MOV     ?V0 + 3,#-0x80
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   12....       LCALL   ?Subroutine135 & 0xFFFF
   1784            }
   \                     ??CrossCallReturnLabel_537:
   \   00008A   FD           MOV     R5,A
   \   00008B   7C84         MOV     R4,#-0x7c
   \   00008D   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000090   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   1785          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000098   7411         MOV     A,#0x11
   \   00009A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1786          
   1787          /*********************************************************************
   1788           * @fn          ZDO_ProcessUserDescSet
   1789           *
   1790           * @brief       This function finishes the processing of the User
   1791           *              Descriptor Set and generates the response.
   1792           *
   1793           * @param       inMsg - incoming message (request)
   1794           *
   1795           * @return      none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1798          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1799            uint8 *msg;
   1800            uint16 aoi;
   1801            UserDescriptorFormat_t userDesc;
   1802            uint8 outMsg[3];
   1803            uint8 status;
   1804          
   1805            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine82 & 0xFFFF
   1806            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_134:
   \   000011   2400         ADD     A,#0x0
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   E4           CLR     A
   \   000016   3B           ADDC    A,R3
   \   000017   F5..         MOV     ?V0 + 1,A
   1807          
   1808            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000019   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V0 + 0
   \   00001F   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1809            {
   1810              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   9410         SUBB    A,#0x10
   \   000033   500F         JNC     ??ZDO_ProcessUserDescSet_2
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   12....       LCALL   ?Subroutine52 & 0xFFFF
   1811              msg ++;  // increment one for the length field
   1812          
   1813              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_80:
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A982         MOV     R1,DPL
   \   00005E   AA83         MOV     R2,DPH
   \   000060   89..         MOV     ?V0 + 4,R1
   \   000062   8A..         MOV     ?V0 + 5,R2
   \   000064   75..00       MOV     ?V0 + 6,#0x0
   \   000067   78..         MOV     R0,#?V0 + 4
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   7407         MOV     A,#0x7
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FC           MOV     R4,A
   \   000073   7D00         MOV     R5,#0x0
   \   000075   7408         MOV     A,#0x8
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   AA82         MOV     R2,DPL
   \   00007C   AB83         MOV     R3,DPH
   \   00007E   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1814              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000084                ; Setup parameters for call to function osal_nv_write
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   8582..       MOV     ?V0 + 2,DPL
   \   00008C   8583..       MOV     ?V0 + 3,DPH
   \   00008F   78..         MOV     R0,#?V0 + 2
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   75..11       MOV     ?V0 + 2,#0x11
   \   000097   75..00       MOV     ?V0 + 3,#0x0
   \   00009A   78..         MOV     R0,#?V0 + 2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   7C00         MOV     R4,#0x0
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A81         MOV     R2,#-0x7f
   \   0000A5   7B00         MOV     R3,#0x0
   \   0000A7   12....       LCALL   ??osal_nv_write?relay
   \   0000AA   7404         MOV     A,#0x4
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   1815              if ( userDesc.len != 0 )
   \   0000AF   7404         MOV     A,#0x4
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000B8   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1816              {
   1817                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   D2E4         SETB    0xE0 /* A   */.4
   \   0000BD   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1818              }
   1819              else
   1820              {
   1821                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C2E4         CLR     0xE0 /* A   */.4
   1822              }
   1823          
   1824              status = ZDP_SUCCESS;
   1825            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000C2   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000C5   E4           CLR     A
   \   0000C6   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1826            else
   1827            {
   1828              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000D0   F0           MOVX    @DPTR,A
   1829            }
   1830          
   1831            outMsg[0] = status;
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C0E0         PUSH    A
   \   0000D4   7401         MOV     A,#0x1
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   D0E0         POP     A
   \   0000DB   F0           MOVX    @DPTR,A
   1832            outMsg[1] = LO_UINT16( aoi );
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E5..         MOV     A,?V0 + 0
   \   0000E3   F0           MOVX    @DPTR,A
   1833            outMsg[2] = LO_UINT16( aoi );
   \   0000E4   7403         MOV     A,#0x3
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E5..         MOV     A,?V0 + 0
   \   0000EB   F0           MOVX    @DPTR,A
   1834          
   1835            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1836                         inMsg->SecurityUse );
   \   0000EC                ; Setup parameters for call to function ZDP_SendData
   \   0000EC   EE           MOV     A,R6
   \   0000ED   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   0000F0   EF           MOV     A,R7
   \   0000F1   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   8582..       MOV     ?V0 + 0,DPL
   \   0000FF   8583..       MOV     ?V0 + 1,DPH
   \   000102   78..         MOV     R0,#?V0 + 0
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   75..14       MOV     ?V0 + 0,#0x14
   \   00010A   75..80       MOV     ?V0 + 1,#-0x80
   \   00010D   78..         MOV     R0,#?V0 + 0
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   7903         MOV     R1,#0x3
   \   000114   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   1837          }
   \   00011A   7415         MOV     A,#0x15
   \   00011C                REQUIRE ?Subroutine2
   \   00011C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine233_0
   \   000003                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_ProcessDeviceAnnce
   1841           *
   1842           * @brief       This function processes a device annouce message.
   1843           *
   1844           * @param       inMsg - incoming message
   1845           *
   1846           * @return      none
   1847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine228_0
   \   000004                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine229_0
   \   000006                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1848          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1849          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1850            ZDO_DeviceAnnce_t Annce;
   1851            AddrMgrEntry_t addrEntry;
   1852            uint8 parentExt[Z_EXTADDR_LEN];
   1853          
   1854            // Parse incoming message
   1855            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1856          
   1857            if ( ZSTACK_END_DEVICE_BUILD )
   1858            {
   1859              // Make sure the message didn't come from myself - end device only
   1860              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1861              {
   1862                return;
   1863              }
   1864            }
   1865          
   1866          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1867            // Clean up the neighbor table
   1868            nwkNeighborRemoveAllStranded();
   \   00001B                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   00001B   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay
   1869          
   1870            // If address conflict is detected, no need to update the address manager
   1871            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00001E                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000026   12....       LCALL   ??NLME_CheckNewAddrSet?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6401         XRL     A,#0x1
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   1872            {
   1873              return;
   1874            }
   1875          #endif
   1876          
   1877          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1878            // Check for parent's address
   1879            NLME_GetCoordExtAddr( parentExt );
   \   000031                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000031   740B         MOV     A,#0xb
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??NLME_GetCoordExtAddr?relay
   1880            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00003D                ; Setup parameters for call to function sAddrExtCmp
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   AC82         MOV     R4,DPL
   \   000044   AD83         MOV     R5,DPH
   \   000046   740B         MOV     A,#0xb
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   12....       LCALL   ??sAddrExtCmp?relay
   \   000052   E9           MOV     A,R1
   \   000053   6032         JZ      ??ZDO_ProcessDeviceAnnce_1
   1881            {
   1882              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000055                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000055   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   A8..         MOV     R0,?V0 + 0
   \   00005E   A9..         MOV     R1,?V0 + 1
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   68           XRL     A,R0
   \   000068   7003         JNZ     ??ZDO_ProcessDeviceAnnce_2
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00006D   6018         JZ      ??ZDO_ProcessDeviceAnnce_1
   1883              {
   1884                // Set the Parent's MAC's new short address
   1885                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000078   90....       MOV     DPTR,#_NIB + 23
   \   00007B   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   1886                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_334:
   \   00007E                ; Setup parameters for call to function ZMacSetReq
   \   00007E   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   000080   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   000082   794B         MOV     R1,#0x4b
   \   000084   12....       LCALL   ??ZMacSetReq?relay
   1887              }
   1888            }
   1889          
   1890            if ( ZSTACK_ROUTER_BUILD )
   1891            {
   1892              // If the device annce comes from a end device child that has moved
   1893              // to another parent, remove it from associated device list
   1894          
   1895              // If the dev annce is coming from other device's children,
   1896              // (The dev annce from its own children shall be unicast to itself,
   1897              // So check the mac destination address)
   1898              // Remove it from the associated device list. If it is not
   1899              // a child, no action will be taken in AssocRemove() anyway.
   1900              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000087   EE           MOV     A,R6
   \   000088   2411         ADD     A,#0x11
   \   00008A   F582         MOV     DPL,A
   \   00008C   EF           MOV     A,R7
   \   00008D   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000090   C082         PUSH    DPL
   \   000092   C083         PUSH    DPH
   \   000094                ; Setup parameters for call to function NLME_GetShortAddr
   \   000094   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000097   8A..         MOV     ?V0 + 0,R2
   \   000099   8B..         MOV     ?V0 + 1,R3
   \   00009B   D083         POP     DPH
   \   00009D   D082         POP     DPL
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   65..         XRL     A,?V0 + 0
   \   0000A2   7004         JNZ     ??ZDO_ProcessDeviceAnnce_3
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A8   603E         JZ      ??ZDO_ProcessDeviceAnnce_4
   1901              {
   1902                associated_devices_t *dev_ptr;
   1903          
   1904                // If it's an end device child
   1905                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000AA                ; Setup parameters for call to function AssocGetWithExt
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   AA82         MOV     R2,DPL
   \   0000B1   AB83         MOV     R3,DPH
   \   0000B3   12....       LCALL   ??AssocGetWithExt?relay
   \   0000B6   8A..         MOV     ?V0 + 0,R2
   \   0000B8   8B..         MOV     ?V0 + 1,R3
   \   0000BA   A8..         MOV     R0,?V0 + 0
   \   0000BC   A9..         MOV     R1,?V0 + 1
   1906                if ( dev_ptr )
   \   0000BE   E8           MOV     A,R0
   \   0000BF   49           ORL     A,R1
   \   0000C0   6026         JZ      ??ZDO_ProcessDeviceAnnce_4
   1907                {
   1908                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1909                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6401         XRL     A,#0x1
   \   0000CD   600D         JZ      ??ZDO_ProcessDeviceAnnce_5
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6402         XRL     A,#0x2
   \   0000DA   700C         JNZ     ??ZDO_ProcessDeviceAnnce_4
   1910                  {
   1911                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000DC                ; Setup parameters for call to function AssocRemove
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   AA82         MOV     R2,DPL
   \   0000E3   AB83         MOV     R3,DPH
   \   0000E5   12....       LCALL   ??AssocRemove?relay
   1912                  }
   1913                }
   1914              }
   1915          
   1916              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000E8                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000E8   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000EB   8A..         MOV     ?V0 + 0,R2
   \   0000ED   8B..         MOV     ?V0 + 1,R3
   \   0000EF   A8..         MOV     R0,?V0 + 0
   \   0000F1   A9..         MOV     R1,?V0 + 1
   \   0000F3   85..82       MOV     DPL,?XSP + 0
   \   0000F6   85..83       MOV     DPH,?XSP + 1
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   68           XRL     A,R0
   \   0000FB   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   000100   601C         JZ      ??ZDO_ProcessDeviceAnnce_7
   1917              {
   1918                // If an associated device is found with matched extended Address,
   1919                // update its short address
   1920                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000102                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00010A   12....       LCALL   ??AssocChangeNwkAddr?relay
   \   00010D   E9           MOV     A,R1
   \   00010E   600E         JZ      ??ZDO_ProcessDeviceAnnce_7
   1921                {
   1922                  // Update the neighbor table
   1923                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \   000110                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000118   12....       LCALL   ??nwkNeighborUpdateNwkAddr?relay
   1924          
   1925                  // Set event to save NV
   1926                  ZDApp_NVUpdate();
   \   00011B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00011B   12....       LCALL   ??ZDApp_NVUpdate?relay
   1927                }
   1928              }
   1929            }
   1930            
   1931            // Assume that the device has moved, remove existing routing entries
   1932            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   00011E                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00011E   7900         MOV     R1,#0x0
   \   000120   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000123   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1933            
   1934          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1935          
   1936          
   1937            // Fill in the extended address in address manager if we don't have it already.
   1938            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000126   7413         MOV     A,#0x13
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   E4           CLR     A
   \   00012C   12....       LCALL   ?Subroutine40 & 0xFFFF
   1939            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_56:
   \   00012F   7414         MOV     A,#0x14
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   1940            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_335:
   \   000137                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000137   7413         MOV     A,#0x13
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   AA82         MOV     R2,DPL
   \   00013E   AB83         MOV     R3,DPH
   \   000140   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000143   E9           MOV     A,R1
   \   000144   604B         JZ      ??ZDO_ProcessDeviceAnnce_0
   1941            {
   1942              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000146                ; Setup parameters for call to function osal_memset
   \   000146   7C08         MOV     R4,#0x8
   \   000148   7D00         MOV     R5,#0x0
   \   00014A   7900         MOV     R1,#0x0
   \   00014C   740B         MOV     A,#0xb
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   AA82         MOV     R2,DPL
   \   000153   AB83         MOV     R3,DPH
   \   000155   12....       LCALL   ??osal_memset?relay
   1943              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000158                ; Setup parameters for call to function sAddrExtCmp
   \   000158   7416         MOV     A,#0x16
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   AC82         MOV     R4,DPL
   \   00015F   AD83         MOV     R5,DPH
   \   000161   740B         MOV     A,#0xb
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   AA82         MOV     R2,DPL
   \   000168   AB83         MOV     R3,DPH
   \   00016A   12....       LCALL   ??sAddrExtCmp?relay
   \   00016D   E9           MOV     A,R1
   \   00016E   6021         JZ      ??ZDO_ProcessDeviceAnnce_0
   1944              {
   1945                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000170                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000170   7402         MOV     A,#0x2
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   AC82         MOV     R4,DPL
   \   000177   AD83         MOV     R5,DPH
   \   000179   7416         MOV     A,#0x16
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   AA82         MOV     R2,DPL
   \   000180   AB83         MOV     R3,DPH
   \   000182   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1946                AddrMgrEntryUpdate( &addrEntry );
   \   000185                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000185   7413         MOV     A,#0x13
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   AA82         MOV     R2,DPL
   \   00018C   AB83         MOV     R3,DPH
   \   00018E   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000191   7420         MOV     A,#0x20
   1947              }
   1948            }
   \   000193   02....       LJMP    ??Subroutine208_0 & 0xFFFF
   1949          }
   1950          
   1951          /*********************************************************************
   1952           * @fn          ZDO_BuildSimpleDescBuf
   1953           *
   1954           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1955           *
   1956           * @param       buf  - pointer to a byte array big enough for data.
   1957           * @param       desc - SimpleDescriptionFormat_t *
   1958           *
   1959           * @return      none
   1960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1961          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1962          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1963            byte cnt;
   1964            uint16 *ptr;
   1965          
   1966            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine43 & 0xFFFF
   1967            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_62:
   \   00000C   A882         MOV     R0,DPL
   \   00000E   A983         MOV     R1,DPH
   \   000010   12....       LCALL   ?Subroutine27 & 0xFFFF
   1968            *buf++ = LO_UINT16( desc->AppProfId );
   1969            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_33:
   \   000013   EC           MOV     A,R4
   \   000014   2403         ADD     A,#0x3
   \   000016   F8           MOV     R0,A
   \   000017   ED           MOV     A,R5
   \   000018   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00001B   12....       LCALL   ?Subroutine27 & 0xFFFF
   1970            *buf++ = LO_UINT16( desc->AppDeviceId );
   1971          
   1972            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_34:
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C4           SWAP    A
   \   000029   54F0         ANL     A,#0xf0
   \   00002B   12....       LCALL   ?Subroutine35 & 0xFFFF
   1973          
   1974            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_48:
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   12....       LCALL   ?Subroutine35 & 0xFFFF
   1975            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_49:
   \   000032   12....       LCALL   ?Subroutine109 & 0xFFFF
   1976            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_184:
   \   000035   8003         SJMP    ??CrossCallReturnLabel_7
   1977            {
   1978              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000037   12....       LCALL   ?Subroutine14 & 0xFFFF
   1979              *buf++ = LO_UINT16( *ptr );
   1980            }
   \                     ??CrossCallReturnLabel_7:
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FE           MOV     R6,A
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   C3           CLR     C
   \   000049   9E           SUBB    A,R6
   \   00004A   40EB         JC      ??ZDO_BuildSimpleDescBuf_0
   1981          
   1982            *buf++ = desc->AppNumOutClusters;
   \   00004C   8C82         MOV     DPL,R4
   \   00004E   8D83         MOV     DPH,R5
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ?Subroutine43 & 0xFFFF
   1983            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_63:
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   12....       LCALL   ?Subroutine109 & 0xFFFF
   1984            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_185:
   \   000067   8003         SJMP    ??CrossCallReturnLabel_8
   1985            {
   1986              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000069   12....       LCALL   ?Subroutine14 & 0xFFFF
   1987              *buf++ = LO_UINT16( *ptr );
   1988            }
   \                     ??CrossCallReturnLabel_8:
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FE           MOV     R6,A
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   C3           CLR     C
   \   00007E   9E           SUBB    A,R6
   \   00007F   40E8         JC      ??ZDO_BuildSimpleDescBuf_1
   1989          }
   \   000081   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000003   75..00       MOV     ?V0 + 0,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000004   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine234_0
   \   000004                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine235_0
   \   000001                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000008   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00000B   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   00000E   05..         INC     ?V0 + 0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine273_0
   \   000001                ; // Fall through to label ??Subroutine273_0
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDO_MatchEndDeviceBind()
   1993           *
   1994           * @brief
   1995           *
   1996           *   Called to match end device binding requests
   1997           *
   1998           * @param  bindReq  - binding request information
   1999           * @param  SecurityUse - Security enable/disable
   2000           *
   2001           * @return  none
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2004          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2005            zAddrType_t dstAddr;
   2006            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   2007            uint8 status;
   2008          
   2009            // Is this the first request?
   2010            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000017   7040         JNZ     ??ZDO_MatchEndDeviceBind_0
   2011            {
   2012              // Create match info structure
   2013              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A37         MOV     R2,#0x37
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EB           MOV     A,R3
   \   000024   12....       LCALL   ?Subroutine48 & 0xFFFF
   2014              if ( matchED )
   \                     ??CrossCallReturnLabel_71:
   \   000027   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   2015              {
   2016                // Clear the structure
   2017                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000029                ; Setup parameters for call to function osal_memset
   \   000029   7C37         MOV     R4,#0x37
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   ??osal_memset?relay
   2018          
   2019                // Copy the first request's information
   2020                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000032                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000032   EE           MOV     A,R6
   \   000033   FC           MOV     R4,A
   \   000034   EF           MOV     A,R7
   \   000035   FD           MOV     R5,A
   \   000036   90....       MOV     DPTR,#matchED
   \   000039   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   00003C   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   00003F   E9           MOV     A,R1
   \   000040   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   2021                {
   2022          
   2023                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   7488         MOV     A,#-0x78
   \   00004A   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2024                  sendRsp = TRUE;
   2025                }
   2026              }
   2027              else
   2028              {
   2029                status = ZDP_NO_ENTRY;
   2030                sendRsp = TRUE;
   2031              }
   2032          
   2033              if ( !sendRsp )
   2034              {
   2035                // Set into the correct state
   2036                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00004D   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   2037          
   2038                // Setup the timeout
   2039                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   12....       LCALL   ?Subroutine99 & 0xFFFF
   2040              }
   2041            }
   \                     ??CrossCallReturnLabel_168:
   \   000056   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2042            else
   2043            {
   2044                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000059   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   F0           MOVX    @DPTR,A
   2045          
   2046                // Copy the 2nd request's information
   2047                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   00005F                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00005F   EE           MOV     A,R6
   \   000060   FC           MOV     R4,A
   \   000061   EF           MOV     A,R7
   \   000062   FD           MOV     R5,A
   \   000063   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000066   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000069   E9           MOV     A,R1
   \   00006A   700C         JNZ     ??ZDO_MatchEndDeviceBind_5
   2048                {
   2049                  status = ZDP_NO_ENTRY;
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7488         MOV     A,#-0x78
   \   000074   F0           MOVX    @DPTR,A
   2050                  sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   2051                }
   2052          
   2053                // Make a source match for ed1
   2054                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2055                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2056                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000078                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000078   75....       MOV     ?V0 + 2,#ZDOBuildBuf & 0xff
   \   00007B   75....       MOV     ?V0 + 3,#(ZDOBuildBuf >> 8) & 0xff
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   90....       MOV     DPTR,#matchED
   \   000086   E0           MOVX    A,@DPTR
   \   000087   2429         ADD     A,#0x29
   \   000089   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008F   90....       MOV     DPTR,#matchED
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2428         ADD     A,#0x28
   \   000095   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000098   2415         ADD     A,#0x15
   \   00009A   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00009D   2414         ADD     A,#0x14
   \   00009F   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   C0E0         PUSH    A
   \   0000A8   90....       MOV     DPTR,#matchED
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   2431         ADD     A,#0x31
   \   0000AE   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000B1   D0E0         POP     A
   \   0000B3   F0           MOVX    @DPTR,A
   2057                if ( matchED->ed1numMatched )
   \   0000B4   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000B7   603C         JZ      ??ZDO_MatchEndDeviceBind_6
   2058                {
   2059                  // Save the match list
   2060                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000B9                ; Setup parameters for call to function osal_mem_alloc
   \   0000B9   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   2432         ADD     A,#0x32
   \   0000BF   12....       LCALL   ?Subroutine23 & 0xFFFF
   2061                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_426:
   \   0000C2   6025         JZ      ??ZDO_MatchEndDeviceBind_7
   2062                  {
   2063                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C4                ; Setup parameters for call to function osal_memcpy
   \   0000C4   75....       MOV     ?V0 + 4,#ZDOBuildBuf & 0xff
   \   0000C7   75....       MOV     ?V0 + 5,#(ZDOBuildBuf >> 8) & 0xff
   \   0000CA   75..00       MOV     ?V0 + 6,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D2   12....       LCALL   ?Subroutine64 & 0xFFFF
   2064                  }
   \                     ??CrossCallReturnLabel_107:
   \   0000D5   C3           CLR     C
   \   0000D6   33           RLC     A
   \   0000D7   FC           MOV     R4,A
   \   0000D8   E4           CLR     A
   \   0000D9   33           RLC     A
   \   0000DA   FD           MOV     R5,A
   \   0000DB   90....       MOV     DPTR,#matchED
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   2432         ADD     A,#0x32
   \   0000E1   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   800C         SJMP    ??ZDO_MatchEndDeviceBind_6
   2065                  else
   2066                  {
   2067                    // Allocation error, stop
   2068                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000E9   85..82       MOV     DPL,?XSP + 0
   \   0000EC   85..83       MOV     DPH,?XSP + 1
   \   0000EF   7488         MOV     A,#-0x78
   \   0000F1   F0           MOVX    @DPTR,A
   2069                    sendRsp = TRUE;
   \   0000F2   75..01       MOV     ?V0 + 0,#0x1
   2070                  }
   2071                }
   2072          
   2073                // Make a source match for ed2
   2074                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2075                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2076                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   0000F5                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F5   78..         MOV     R0,#?V0 + 2
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2412         ADD     A,#0x12
   \   000100   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000103   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000106   90....       MOV     DPTR,#matchED
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   2411         ADD     A,#0x11
   \   00010C   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00010F   242C         ADD     A,#0x2c
   \   000111   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000114   242B         ADD     A,#0x2b
   \   000116   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011C   E9           MOV     A,R1
   \   00011D   C0E0         PUSH    A
   \   00011F   90....       MOV     DPTR,#matchED
   \   000122   E0           MOVX    A,@DPTR
   \   000123   2434         ADD     A,#0x34
   \   000125   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000128   D0E0         POP     A
   \   00012A   F0           MOVX    @DPTR,A
   2077                if ( matchED->ed2numMatched )
   \   00012B   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   00012E   602E         JZ      ??ZDO_MatchEndDeviceBind_8
   2078                {
   2079                  // Save the match list
   2080                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000130                ; Setup parameters for call to function osal_mem_alloc
   \   000130   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000133   E0           MOVX    A,@DPTR
   \   000134   2435         ADD     A,#0x35
   \   000136   12....       LCALL   ?Subroutine23 & 0xFFFF
   2081                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_427:
   \   000139   603F         JZ      ??ZDO_MatchEndDeviceBind_9
   2082                  {
   2083                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00013B                ; Setup parameters for call to function osal_memcpy
   \   00013B   75....       MOV     ?V0 + 4,#ZDOBuildBuf & 0xff
   \   00013E   75....       MOV     ?V0 + 5,#(ZDOBuildBuf >> 8) & 0xff
   \   000141   75..00       MOV     ?V0 + 6,#0x0
   \   000144   78..         MOV     R0,#?V0 + 4
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000149   12....       LCALL   ?Subroutine88 & 0xFFFF
   2084                  }
   \                     ??CrossCallReturnLabel_553:
   \   00014C   C3           CLR     C
   \   00014D   33           RLC     A
   \   00014E   FC           MOV     R4,A
   \   00014F   E4           CLR     A
   \   000150   33           RLC     A
   \   000151   FD           MOV     R5,A
   \   000152   90....       MOV     DPTR,#matchED
   \   000155   E0           MOVX    A,@DPTR
   \   000156   2435         ADD     A,#0x35
   \   000158   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   2085                  else
   2086                  {
   2087                    // Allocation error, stop
   2088                    status = ZDP_NO_ENTRY;
   2089                    sendRsp = TRUE;
   2090                  }
   2091                }
   2092          
   2093                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00015E   E5..         MOV     A,?V0 + 0
   \   000160   A2E0         MOV     C,0xE0 /* A   */.0
   \   000162   401F         JC      ??ZDO_MatchEndDeviceBind_10
   \   000164   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000167   7005         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   000169   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   00016C   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2094                {
   2095                  // Do the first unbind/bind state
   2096                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   00016E                ; Setup parameters for call to function ZDMatchSendState
   \   00016E   7B00         MOV     R3,#0x0
   \   000170   7A00         MOV     R2,#0x0
   \   000172   7900         MOV     R1,#0x0
   \   000174   12....       LCALL   ??ZDMatchSendState?relay
   2097                }
   2098                else
   2099                {
   2100                  status = ZDP_NO_MATCH;
   2101                  sendRsp = TRUE;
   2102                }
   2103            }
   2104          
   2105            if ( sendRsp )
   \   000177   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   00017A   85..82       MOV     DPL,?XSP + 0
   \   00017D   85..83       MOV     DPH,?XSP + 1
   \   000180   7488         MOV     A,#-0x78
   \   000182   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   000183   85..82       MOV     DPL,?XSP + 0
   \   000186   85..83       MOV     DPH,?XSP + 1
   \   000189   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   00018B   F0           MOVX    @DPTR,A
   2106            {
   2107              // send response to this requester
   2108              dstAddr.addrMode = Addr16Bit;
   \   00018C   7409         MOV     A,#0x9
   \   00018E   12....       LCALL   ?XSTACK_DISP0_8
   \   000191   7402         MOV     A,#0x2
   \   000193   12....       LCALL   ?Subroutine56 & 0xFFFF
   2109              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_91:
   \   000196   F8           MOV     R0,A
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F9           MOV     R1,A
   \   00019A   7401         MOV     A,#0x1
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   E8           MOV     A,R0
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E9           MOV     A,R1
   \   0001A3   12....       LCALL   ?Subroutine45 & 0xFFFF
   2110              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_67:
   \   0001A6   F5..         MOV     ?V0 + 0,A
   \   0001A8   78..         MOV     R0,#?V0 + 0
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   7401         MOV     A,#0x1
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   8582..       MOV     ?V0 + 0,DPL
   \   0001B5   8583..       MOV     ?V0 + 1,DPH
   \   0001B8   78..         MOV     R0,#?V0 + 0
   \   0001BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BD   75..20       MOV     ?V0 + 0,#0x20
   \   0001C0   75..80       MOV     ?V0 + 1,#-0x80
   \   0001C3   78..         MOV     R0,#?V0 + 0
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C8   7901         MOV     R1,#0x1
   \   0001CA   7406         MOV     A,#0x6
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   AC82         MOV     R4,DPL
   \   0001D1   AD83         MOV     R5,DPH
   \   0001D3   EE           MOV     A,R6
   \   0001D4   FA           MOV     R2,A
   \   0001D5   EF           MOV     A,R7
   \   0001D6   FB           MOV     R3,A
   \   0001D7   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0001DA   12....       LCALL   ?DEALLOC_XSTACK8
   2111          
   2112              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001DD   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0001E0   703C         JNZ     ??ZDO_MatchEndDeviceBind_12
   2113              {
   2114                // send response to first requester
   2115                dstAddr.addrMode = Addr16Bit;
   \   0001E2   7409         MOV     A,#0x9
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   7402         MOV     A,#0x2
   \   0001E9   F0           MOVX    @DPTR,A
   2116                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   0001EA   12....       LCALL   ?Subroutine77 & 0xFFFF
   2117                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2118              }
   \                     ??CrossCallReturnLabel_124:
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F6   7401         MOV     A,#0x1
   \   0001F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FB   8582..       MOV     ?V0 + 0,DPL
   \   0001FE   8583..       MOV     ?V0 + 1,DPH
   \   000201   78..         MOV     R0,#?V0 + 0
   \   000203   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000206   75..20       MOV     ?V0 + 0,#0x20
   \   000209   75..80       MOV     ?V0 + 1,#-0x80
   \   00020C   78..         MOV     R0,#?V0 + 0
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000211   7901         MOV     R1,#0x1
   \   000213   7406         MOV     A,#0x6
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00021B   12....       LCALL   ?DEALLOC_XSTACK8
   2119          
   2120              // Process ended - release memory used
   2121              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00021E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00021E   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2122            }
   2123          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000221   740A         MOV     A,#0xa
   \   000223   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006                REQUIRE ??Subroutine236_0
   \   000006                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000003   FC           MOV     R4,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_CompareClusterLists?relay
   \   000008   7404         MOV     A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine237_0
   \   000003                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   08           INC     R0
   \   000006   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007                REQUIRE ??Subroutine239_0
   \   000007                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   08           INC     R0
   \   000001   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   000002   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   000004   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00000A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   00000A   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   12....       LCALL   ??ZDP_SendData?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine244_0
   \   000001                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   49           ORL     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2434         ADD     A,#0x34
   \   000006                REQUIRE ??Subroutine255_0
   \   000006                ; // Fall through to label ??Subroutine255_0
   2124          
   2125          /*********************************************************************
   2126           * @fn      ZDO_RemoveMatchMemory()
   2127           *
   2128           * @brief   Called to clear the memory used for the end device bind.
   2129           *
   2130           * @param  none
   2131           *
   2132           * @return  none
   2133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2134          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2135          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2136            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00000A   7003         JNZ     $+5
   \   00000C   02....       LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
   2137            {
   2138              if ( matchED->ed2Matched != NULL )
   \   00000F   90....       MOV     DPTR,#matchED
   \   000012   E0           MOVX    A,@DPTR
   \   000013   2435         ADD     A,#0x35
   \   000015   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000018   6009         JZ      ??CrossCallReturnLabel_96
   2139                osal_mem_free( matchED->ed2Matched );
   \   00001A                ; Setup parameters for call to function osal_mem_free
   \   00001A   90....       MOV     DPTR,#matchED
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   2435         ADD     A,#0x35
   \   000020   12....       LCALL   ?Subroutine60 & 0xFFFF
   2140              if ( matchED->ed1Matched != NULL )
   \                     ??CrossCallReturnLabel_96:
   \   000023   90....       MOV     DPTR,#matchED
   \   000026   E0           MOVX    A,@DPTR
   \   000027   2432         ADD     A,#0x32
   \   000029   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00002C   6009         JZ      ??CrossCallReturnLabel_97
   2141                osal_mem_free( matchED->ed1Matched );
   \   00002E                ; Setup parameters for call to function osal_mem_free
   \   00002E   90....       MOV     DPTR,#matchED
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2432         ADD     A,#0x32
   \   000034   12....       LCALL   ?Subroutine60 & 0xFFFF
   2142          
   2143              if ( matchED->ed1.inClusters != NULL )
   \                     ??CrossCallReturnLabel_97:
   \   000037   90....       MOV     DPTR,#matchED
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2412         ADD     A,#0x12
   \   00003D   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000040   6009         JZ      ??CrossCallReturnLabel_98
   2144                osal_mem_free( matchED->ed1.inClusters );
   \   000042                ; Setup parameters for call to function osal_mem_free
   \   000042   90....       MOV     DPTR,#matchED
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2412         ADD     A,#0x12
   \   000048   12....       LCALL   ?Subroutine60 & 0xFFFF
   2145          
   2146              if ( matchED->ed1.outClusters != NULL )
   \                     ??CrossCallReturnLabel_98:
   \   00004B   90....       MOV     DPTR,#matchED
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   2415         ADD     A,#0x15
   \   000051   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000054   6009         JZ      ??CrossCallReturnLabel_99
   2147                osal_mem_free( matchED->ed1.outClusters );
   \   000056                ; Setup parameters for call to function osal_mem_free
   \   000056   90....       MOV     DPTR,#matchED
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   2415         ADD     A,#0x15
   \   00005C   12....       LCALL   ?Subroutine60 & 0xFFFF
   2148          
   2149              if ( matchED->ed2.inClusters != NULL )
   \                     ??CrossCallReturnLabel_99:
   \   00005F   90....       MOV     DPTR,#matchED
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2429         ADD     A,#0x29
   \   000065   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000068   6009         JZ      ??CrossCallReturnLabel_100
   2150                osal_mem_free( matchED->ed2.inClusters );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   90....       MOV     DPTR,#matchED
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   2429         ADD     A,#0x29
   \   000070   12....       LCALL   ?Subroutine60 & 0xFFFF
   2151          
   2152              if ( matchED->ed2.outClusters != NULL )
   \                     ??CrossCallReturnLabel_100:
   \   000073   90....       MOV     DPTR,#matchED
   \   000076   E0           MOVX    A,@DPTR
   \   000077   242C         ADD     A,#0x2c
   \   000079   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00007C   6009         JZ      ??CrossCallReturnLabel_101
   2153                osal_mem_free( matchED->ed2.outClusters );
   \   00007E                ; Setup parameters for call to function osal_mem_free
   \   00007E   90....       MOV     DPTR,#matchED
   \   000081   E0           MOVX    A,@DPTR
   \   000082   242C         ADD     A,#0x2c
   \   000084   12....       LCALL   ?Subroutine60 & 0xFFFF
   2154          
   2155              osal_mem_free( matchED );
   \                     ??CrossCallReturnLabel_101:
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   90....       MOV     DPTR,#matchED
   \   00008A   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2156          
   2157              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_435:
   \   00008D   90....       MOV     DPTR,#matchED
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   2158            }
   2159          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000094                REQUIRE ?Subroutine0
   \   000094                ; // Fall through to label ?Subroutine0
   2160          
   2161          /*********************************************************************
   2162           * @fn      ZDO_CopyMatchInfo()
   2163           *
   2164           * @brief   Called to copy memory used for the end device bind.
   2165           *
   2166           * @param  srcReq - source information
   2167           * @param  dstReq - destination location
   2168           *
   2169           * @return  TRUE if copy was successful.
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005                REQUIRE ??Subroutine240_0
   \   000005                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine241_0
   \   000002                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2172          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2173            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V0 + 2,#0x1
   2174          
   2175            // Copy bind information into the match info structure
   2176            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   75..00       MOV     ?V0 + 6,#0x0
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   2177          
   2178            // Initialize the destination cluster pointers
   2179            destReq->inClusters = NULL;
   \   000026   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000029   12....       LCALL   ?Subroutine137 & 0xFFFF
   2180            destReq->outClusters = NULL;
   \                     ??CrossCallReturnLabel_223:
   \   00002C   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00002F   12....       LCALL   ?Subroutine132 & 0xFFFF
   2181          
   2182            // Copy input cluster IDs
   2183            if ( srcReq->numInClusters )
   \                     ??CrossCallReturnLabel_214:
   \   000032   2411         ADD     A,#0x11
   \   000034   F582         MOV     DPL,A
   \   000036   E5..         MOV     A,?V0 + 1
   \   000038   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   00003B   602A         JZ      ??ZDO_CopyMatchInfo_0
   2184            {
   2185              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00003D   EE           MOV     A,R6
   \   00003E   2412         ADD     A,#0x12
   \   000040   12....       LCALL   ?Subroutine29 & 0xFFFF
   2186              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_35:
   \   000043   601F         JZ      ??ZDO_CopyMatchInfo_1
   2187              {
   2188                // Copy the clusters
   2189                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2190                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   2412         ADD     A,#0x12
   \   000049   12....       LCALL   ?Subroutine102 & 0xFFFF
   2191              }
   \                     ??CrossCallReturnLabel_172:
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   2411         ADD     A,#0x11
   \   000053   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000056   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000059   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   00005C   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2192              else
   2193                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000064   75..00       MOV     ?V0 + 2,#0x0
   2194            }
   2195          
   2196            // Copy output cluster IDs
   2197            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   2414         ADD     A,#0x14
   \   00006B   F582         MOV     DPL,A
   \   00006D   E5..         MOV     A,?V0 + 1
   \   00006F   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000072   6025         JZ      ??ZDO_CopyMatchInfo_2
   2198            {
   2199              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000074   EE           MOV     A,R6
   \   000075   2415         ADD     A,#0x15
   \   000077   12....       LCALL   ?Subroutine29 & 0xFFFF
   2200              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_36:
   \   00007A   604A         JZ      ??ZDO_CopyMatchInfo_3
   2201              {
   2202                // Copy the clusters
   2203                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2204                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   E5..         MOV     A,?V0 + 0
   \   00007E   2415         ADD     A,#0x15
   \   000080   12....       LCALL   ?Subroutine102 & 0xFFFF
   2205              }
   \                     ??CrossCallReturnLabel_173:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   2414         ADD     A,#0x14
   \   00008A   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00008D   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000090   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000093   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   2206              else
   2207                allOK = FALSE;
   2208            }
   2209          
   2210            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_2:
   \   000099   E5..         MOV     A,?V0 + 2
   \   00009B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009D   4022         JC      ??CrossCallReturnLabel_430
   2211            {
   2212              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_4:
   \   00009F   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000A2   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   0000A5   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   0000A8   6006         JZ      ??CrossCallReturnLabel_429
   2213                osal_mem_free( destReq->inClusters );
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2412         ADD     A,#0x12
   \   0000AD   12....       LCALL   ?Subroutine62 & 0xFFFF
   2214              if ( destReq->outClusters != NULL )
   \                     ??CrossCallReturnLabel_429:
   \   0000B0   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000B3   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   0000B6   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   0000B9   6006         JZ      ??CrossCallReturnLabel_430
   2215                osal_mem_free( destReq->outClusters );
   \   0000BB                ; Setup parameters for call to function osal_mem_free
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2415         ADD     A,#0x15
   \   0000BE   12....       LCALL   ?Subroutine62 & 0xFFFF
   2216            }
   2217          
   2218            return ( allOK );
   \                     ??CrossCallReturnLabel_430:
   \   0000C1   A9..         MOV     R1,?V0 + 2
   \   0000C3   02....       LJMP    ??Subroutine233_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000C6   75..00       MOV     ?V0 + 2,#0x0
   \   0000C9   80D4         SJMP    ??ZDO_CopyMatchInfo_4
   2219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000003   C3           CLR     C
   \   000004   33           RLC     A
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   F5..         MOV     ?V0 + 4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 5,A
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   88..         MOV     ?V0 + 4,R0
   \   000007   89..         MOV     ?V0 + 5,R1
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C3           CLR     C
   \   00000B   33           RLC     A
   \   00000C   FA           MOV     R2,A
   \   00000D   E4           CLR     A
   \   00000E   33           RLC     A
   \   00000F   FB           MOV     R3,A
   \   000010   12....       LCALL   ??osal_mem_alloc?relay
   \   000013   85..82       MOV     DPL,?V0 + 4
   \   000016   85..83       MOV     DPH,?V0 + 5
   \   000019   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   00001C   85..82       MOV     DPL,?V0 + 4
   \   00001F   85..83       MOV     DPH,?V0 + 5
   \   000022   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine254_0
   \   000004                ; // Fall through to label ??Subroutine254_0
   2220          
   2221          /*********************************************************************
   2222           * @fn      ZDMatchSendState()
   2223           *
   2224           * @brief   State machine for the End device match message algorithm.
   2225           *
   2226           * @param  reason - state of algoritm
   2227           * @param  status - initial message status
   2228           * @param  TransSeq - next transaction sequence number
   2229           *
   2230           * @return  FALSE if error and we are not currently matching, TRUE
   2231           *          if success.
   2232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2233          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2234          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   2235            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V0 + 4,#0x0
   \   000013   75..00       MOV     ?V0 + 5,#0x0
   2236            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V0 + 3,#-0x1
   2237            zAddrType_t dstAddr;
   2238            zAddrType_t destinationAddr;
   2239            uint16 msgType;
   2240            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V0 + 8,#-0x1
   \   00001C   75..FF       MOV     ?V0 + 9,#-0x1
   2241            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
   \   000022   75..00       MOV     ?V0 + 1,#0x0
   2242            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E4           CLR     A
   \   00002C   12....       LCALL   ?Subroutine48 & 0xFFFF
   2243          
   2244            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_72:
   \   00002F   7005         JNZ     ??ZDMatchSendState_0
   2245              return ( FALSE );
   \                     ??ZDMatchSendState_1:
   \   000031   7900         MOV     R1,#0x0
   \   000033   02....       LJMP    ??ZDMatchSendState_2 & 0xFFFF
   2246          
   2247            // Check sequence number
   2248            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   000036   7403         MOV     A,#0x3
   \   000038   65..         XRL     A,?V0 + 2
   \   00003A   6006         JZ      ??ZDMatchSendState_3
   \   00003C   7402         MOV     A,#0x2
   \   00003E   65..         XRL     A,?V0 + 2
   \   000040   700D         JNZ     ??ZDMatchSendState_4
   2249            {
   2250              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_3:
   \   000042   90....       MOV     DPTR,#matchED
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2430         ADD     A,#0x30
   \   000048   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   2251                return( FALSE ); // ignore the message
   2252            }
   \                     ??CrossCallReturnLabel_547:
   \   00004B   65..         XRL     A,?V0 + 7
   \   00004D   70E2         JNZ     ??ZDMatchSendState_1
   2253          
   2254            // turn off timer
   2255            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_4:
   \   00004F                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004F   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   000051   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   2256          
   2257            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00005A   7401         MOV     A,#0x1
   \   00005C   65..         XRL     A,?V0 + 2
   \   00005E   700B         JNZ     ??ZDMatchSendState_5
   2258            {
   2259              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_6:
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8043         SJMP    ??ZDMatchSendState_7
   2260            }
   2261          
   2262            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_5:
   \   00006B   E5..         MOV     A,?V0 + 2
   \   00006D   6006         JZ      ??ZDMatchSendState_8
   \   00006F   7403         MOV     A,#0x3
   \   000071   65..         XRL     A,?V0 + 2
   \   000073   7019         JNZ     ??ZDMatchSendState_9
   2263            {
   2264              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_8:
   \   000075   90....       MOV     DPTR,#matchED
   \   000078   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007B   F0           MOVX    @DPTR,A
   2265          
   2266              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00007C   7403         MOV     A,#0x3
   \   00007E   65..         XRL     A,?V0 + 2
   \   000080   7028         JNZ     ??ZDMatchSendState_10
   \   000082   E5..         MOV     A,?V0 + 6
   \   000084   6028         JZ      ??ZDMatchSendState_7
   2267              {
   2268                rspStatus = status;
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   80DA         SJMP    ??ZDMatchSendState_6
   2269              }
   2270            }
   2271            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_9:
   \   00008E   7402         MOV     A,#0x2
   \   000090   65..         XRL     A,?V0 + 2
   \   000092   701A         JNZ     ??ZDMatchSendState_7
   2272            {
   2273              if ( status == ZDP_SUCCESS )
   \   000094   E5..         MOV     A,?V0 + 6
   \   000096   90....       MOV     DPTR,#matchED
   \   000099   7005         JNZ     ??ZDMatchSendState_11
   2274              {
   2275                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   00009B   12....       LCALL   ?Subroutine86 & 0xFFFF
   2276              }
   \                     ??CrossCallReturnLabel_141:
   \   00009E   80C8         SJMP    ??ZDMatchSendState_6
   2277              else
   2278              {
   2279                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_11:
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   242F         ADD     A,#0x2f
   \   0000A3   12....       LCALL   ?Subroutine90 & 0xFFFF
   2280              }
   2281            }
   \                     ??CrossCallReturnLabel_150:
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   80BE         SJMP    ??ZDMatchSendState_6
   2282          
   2283            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_10:
   \   0000AA   E5..         MOV     A,?V0 + 2
   \   0000AC   6019         JZ      ??ZDMatchSendState_12
   \                     ??ZDMatchSendState_7:
   \   0000AE   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000B1   7014         JNZ     ??ZDMatchSendState_12
   2284            {
   2285              // Move to the next cluster ID
   2286              if ( matchED->ed1numMatched )
   \   0000B3   90....       MOV     DPTR,#matchED
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   2431         ADD     A,#0x31
   \   0000B9   08           INC     R0
   \   0000BA   08           INC     R0
   \   0000BB   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   0000BE   7005         JNZ     ??ZDMatchSendState_13
   2287                matchED->ed1numMatched--;
   2288              else if ( matchED->ed2numMatched )
   \   0000C0   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000C3   6002         JZ      ??ZDMatchSendState_12
   2289                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_13:
   \   0000C5   14           DEC     A
   \   0000C6   F0           MOVX    @DPTR,A
   2290            }
   2291          
   2292            // What message do we send now
   2293            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000C7   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000CA   90....       MOV     DPTR,#matchED
   \   0000CD   6014         JZ      ??ZDMatchSendState_14
   2294            {
   2295              ed = &(matchED->ed1);
   \   0000CF   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2296              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2297              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2298              dstEP = matchED->ed2.endpoint;
   2299            }
   \                     ??CrossCallReturnLabel_289:
   \   0000D2   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000D5   2432         ADD     A,#0x32
   \   0000D7   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000DA   241D         ADD     A,#0x1d
   \   0000DC   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000DF   2425         ADD     A,#0x25
   \   0000E1   8020         SJMP    ??ZDMatchSendState_15
   2300            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000E3   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0000E6   6020         JZ      ??ZDMatchSendState_16
   2301            {
   2302              ed = &(matchED->ed2);
   \   0000E8   90....       MOV     DPTR,#matchED
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   2417         ADD     A,#0x17
   \   0000EE   F5..         MOV     ?V0 + 0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   12....       LCALL   ?Subroutine96 & 0xFFFF
   2303              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2304              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2305              dstEP = matchED->ed1.endpoint;
   2306            }
   \                     ??CrossCallReturnLabel_163:
   \   0000F7   2435         ADD     A,#0x35
   \   0000F9   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000FC   2406         ADD     A,#0x6
   \   0000FE   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000101   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_15:
   \   000103   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000106   F5..         MOV     ?V0 + 3,A
   2307          
   2308            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000108   7409         MOV     A,#0x9
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?Subroutine53 & 0xFFFF
   2309          
   2310            // Send the next message
   2311            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_84:
   \   000112   6003         JZ      $+5
   \   000114   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   \   000117   E5..         MOV     A,?V0 + 0
   \   000119   45..         ORL     A,?V0 + 1
   \   00011B   7003         JNZ     $+5
   \   00011D   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   2312            {
   2313              // Send unbind/bind message to source
   2314              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000120   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000123   7004         JNZ     ??ZDMatchSendState_18
   2315                msgType = Unbind_req;
   \   000125   7E22         MOV     R6,#0x22
   \   000127   8002         SJMP    ??ZDMatchSendState_19
   2316              else
   2317                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000129   7E21         MOV     R6,#0x21
   2318          
   2319              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_19:
   \   00012B   85..82       MOV     DPL,?V0 + 0
   \   00012E   85..83       MOV     DPH,?V0 + 1
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000136   7401         MOV     A,#0x1
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2320          
   2321              // Save off the transaction sequence number
   2322              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_336:
   \   00013E   90....       MOV     DPTR,#ZDP_TransID
   \   000141   E0           MOVX    A,@DPTR
   \   000142   C0E0         PUSH    A
   \   000144   90....       MOV     DPTR,#matchED
   \   000147   E0           MOVX    A,@DPTR
   \   000148   2430         ADD     A,#0x30
   \   00014A   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   2323          
   2324              destinationAddr.addrMode = Addr64Bit;
   \   000150   7412         MOV     A,#0x12
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   7403         MOV     A,#0x3
   \   000157   F0           MOVX    @DPTR,A
   2325              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000158                ; Setup parameters for call to function sAddrExtCpy
   \   000158   AC..         MOV     R4,?V0 + 4
   \   00015A   AD..         MOV     R5,?V0 + 5
   \   00015C   740A         MOV     A,#0xa
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   AA82         MOV     R2,DPL
   \   000163   AB83         MOV     R3,DPH
   \   000165   12....       LCALL   ??sAddrExtCpy?relay
   2326          
   2327              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2328                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000168                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000168   85..82       MOV     DPL,?V0 + 0
   \   00016B   85..83       MOV     DPH,?V0 + 1
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F5..         MOV     ?V0 + 4,A
   \   000172   78..         MOV     R0,#?V0 + 4
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000177   78..         MOV     R0,#?V0 + 3
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017C   740C         MOV     A,#0xc
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   8582..       MOV     ?V0 + 4,DPL
   \   000184   8583..       MOV     ?V0 + 5,DPH
   \   000187   78..         MOV     R0,#?V0 + 4
   \   000189   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018C   78..         MOV     R0,#?V0 + 8
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000191   E5..         MOV     A,?V0 + 0
   \   000193   2406         ADD     A,#0x6
   \   000195   F5..         MOV     ?V0 + 4,A
   \   000197   E5..         MOV     A,?V0 + 1
   \   000199   3400         ADDC    A,#0x0
   \   00019B   F5..         MOV     ?V0 + 5,A
   \   00019D   78..         MOV     R0,#?V0 + 4
   \   00019F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A2   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   0001A5   E5..         MOV     A,?V0 + 1
   \   0001A7   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0001AA   7409         MOV     A,#0x9
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   AC82         MOV     R4,DPL
   \   0001B1   AD83         MOV     R5,DPH
   \   0001B3   EE           MOV     A,R6
   \   0001B4   FA           MOV     R2,A
   \   0001B5   7B00         MOV     R3,#0x0
   \   0001B7   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   0001BA   7408         MOV     A,#0x8
   \   0001BC   12....       LCALL   ?DEALLOC_XSTACK8
   2329          
   2330              // Set timeout for response
   2331              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001BF                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001BF   12....       LCALL   ?Subroutine99 & 0xFFFF
   2332            }
   \                     ??CrossCallReturnLabel_169:
   \   0001C2   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   2333            else
   2334            {
   2335              // Send the response messages to requesting devices
   2336              // send response to first requester
   2337              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001C5   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL   ?Subroutine21 & 0xFFFF
   2338              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_23:
   \   0001CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D1   7401         MOV     A,#0x1
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   8582..       MOV     ?V0 + 0,DPL
   \   0001D9   8583..       MOV     ?V0 + 1,DPH
   \   0001DC   78..         MOV     R0,#?V0 + 0
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E1   75..20       MOV     ?V0 + 0,#0x20
   \   0001E4   75..80       MOV     ?V0 + 1,#-0x80
   \   0001E7   78..         MOV     R0,#?V0 + 0
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EC   7901         MOV     R1,#0x1
   \   0001EE   7406         MOV     A,#0x6
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0001F6   12....       LCALL   ?DEALLOC_XSTACK8
   2339          
   2340              // send response to second requester
   2341              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001F9   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0001FC   7054         JNZ     ??ZDMatchSendState_21
   2342              {
   2343                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   0001FE   90....       MOV     DPTR,#matchED
   \   000201   E0           MOVX    A,@DPTR
   \   000202   2419         ADD     A,#0x19
   \   000204   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000207   F8           MOV     R0,A
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F9           MOV     R1,A
   \   00020B   7401         MOV     A,#0x1
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2344                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \                     ??CrossCallReturnLabel_337:
   \   000213                ; Setup parameters for call to function ZDP_SendData
   \   000213   90....       MOV     DPTR,#matchED
   \   000216   E0           MOVX    A,@DPTR
   \   000217   2418         ADD     A,#0x18
   \   000219   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   2345              }
   \                     ??CrossCallReturnLabel_550:
   \   00021C   F5..         MOV     ?V0 + 0,A
   \   00021E   78..         MOV     R0,#?V0 + 0
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000223   7401         MOV     A,#0x1
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   8582..       MOV     ?V0 + 0,DPL
   \   00022B   8583..       MOV     ?V0 + 1,DPH
   \   00022E   78..         MOV     R0,#?V0 + 0
   \   000230   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000233   75..20       MOV     ?V0 + 0,#0x20
   \   000236   75..80       MOV     ?V0 + 1,#-0x80
   \   000239   78..         MOV     R0,#?V0 + 0
   \   00023B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023E   7901         MOV     R1,#0x1
   \   000240   7406         MOV     A,#0x6
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   AC82         MOV     R4,DPL
   \   000247   AD83         MOV     R5,DPH
   \   000249   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00024C   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00024F   12....       LCALL   ?DEALLOC_XSTACK8
   2346          
   2347              // Process ended - release memory used
   2348              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   000252                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000252   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2349            }
   2350          
   2351            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   000255   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_2:
   \   000257   7413         MOV     A,#0x13
   \   000259   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025C                REQUIRE ?Subroutine7
   \   00025C                ; // Fall through to label ?Subroutine7
   2352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   90....       MOV     DPTR,#matchED
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   90....       MOV     DPTR,#matchED
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   242F         ADD     A,#0x2f
   \   000003   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000006   28           ADD     A,R0
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   39           ADDC    A,R1
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   24FE         ADD     A,#-0x2
   \   00000F   F582         MOV     DPL,A
   \   000011   E9           MOV     A,R1
   \   000012   34FF         ADDC    A,#-0x1
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 8,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   90....       MOV     DPTR,#matchED
   \   000020   E0           MOVX    A,@DPTR
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   2353          
   2354          /*********************************************************************
   2355           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2356           *
   2357           * @brief   End device bind timeout.
   2358           *
   2359           * @param  none
   2360           *
   2361           * @return  none
   2362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2363          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2364          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2365            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay
   2366          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2367          
   2368          /*********************************************************************
   2369           * ZDO MESSAGE PARSING API FUNCTIONS
   2370           */
   2371          
   2372          /*********************************************************************
   2373           * @fn          ZDO_ParseEndDeviceBindReq
   2374           *
   2375           * @brief       This function parses the End_Device_Bind_req message.
   2376           *
   2377           *     NOTE:  The clusters lists in bindReq are allocated in this
   2378           *            function and must be freed by that calling function.
   2379           *
   2380           * @param       inMsg  - incoming message (request)
   2381           * @param       bindReq - pointer to place to parse message to
   2382           *
   2383           * @return      none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2386          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2387            uint8 *msg;
   2388          
   2389            // Parse the message
   2390            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   00000F   12....       LCALL   ?Subroutine49 & 0xFFFF
   2391            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_73:
   \   000012   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   12....       LCALL   ?Subroutine46 & 0xFFFF
   2392            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_339:
   \   00001C   EA           MOV     A,R2
   \   00001D   240E         ADD     A,#0xe
   \   00001F   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000022   12....       LCALL   ?Subroutine17 & 0xFFFF
   2393            msg = inMsg->asdu;
   2394          
   2395            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_15:
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine26 & 0xFFFF
   2396            msg += 2;
   2397          
   2398            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_31:
   \   000030   2406         ADD     A,#0x6
   \   000032   FA           MOV     R2,A
   \   000033   E5..         MOV     A,?V0 + 1
   \   000035   12....       LCALL   ?Subroutine57 & 0xFFFF
   2399            msg += Z_EXTADDR_LEN;
   2400          
   2401            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_492:
   \   000038   C0E0         PUSH    A
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   240E         ADD     A,#0xe
   \   00003E   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000041   D0E0         POP     A
   \   000043   12....       LCALL   ?Subroutine15 & 0xFFFF
   2402            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000046   F8           MOV     R0,A
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   240F         ADD     A,#0xf
   \   00004B   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00004E   E8           MOV     A,R0
   \   00004F   12....       LCALL   ?Subroutine34 & 0xFFFF
   2403            msg += 2;
   2404          
   2405            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_46:
   \   000052   2412         ADD     A,#0x12
   \   000054   F582         MOV     DPL,A
   \   000056   E5..         MOV     A,?V0 + 1
   \   000058   12....       LCALL   ?Subroutine132 & 0xFFFF
   2406            bindReq->outClusters = NULL;
   \                     ??CrossCallReturnLabel_215:
   \   00005B   2415         ADD     A,#0x15
   \   00005D   F582         MOV     DPL,A
   \   00005F   E5..         MOV     A,?V0 + 1
   \   000061   12....       LCALL   ?Subroutine137 & 0xFFFF
   2407          
   2408            if ((bindReq->numInClusters = *msg++) &&
   2409                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_224:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   A3           INC     DPTR
   \   00006A   0E           INC     R6
   \   00006B   AF83         MOV     R7,DPH
   \   00006D   C0E0         PUSH    A
   \   00006F   E5..         MOV     A,?V0 + 0
   \   000071   2411         ADD     A,#0x11
   \   000073   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   601F         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   2412         ADD     A,#0x12
   \   00007F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000082   6016         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2410            {
   2411              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   000084                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000084   E5..         MOV     A,?V0 + 0
   \   000086   2412         ADD     A,#0x12
   \   000088   12....       LCALL   ?Subroutine95 & 0xFFFF
   2412            }
   \                     ??CrossCallReturnLabel_160:
   \   00008B   2411         ADD     A,#0x11
   \   00008D   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000090   8A..         MOV     ?V0 + 2,R2
   \   000092   8B..         MOV     ?V0 + 3,R3
   \   000094   AE..         MOV     R6,?V0 + 2
   \   000096   AF..         MOV     R7,?V0 + 3
   \   000098   8007         SJMP    ??CrossCallReturnLabel_516
   2413            else
   2414            {
   2415              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00009A   E5..         MOV     A,?V0 + 0
   \   00009C   2411         ADD     A,#0x11
   \   00009E   12....       LCALL   ?Subroutine138 & 0xFFFF
   2416            }
   2417          
   2418            if ((bindReq->numOutClusters = *msg++) &&
   2419                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??CrossCallReturnLabel_516:
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   AE82         MOV     R6,DPL
   \   0000A9   AF83         MOV     R7,DPH
   \   0000AB   C0E0         PUSH    A
   \   0000AD   E5..         MOV     A,?V0 + 0
   \   0000AF   2414         ADD     A,#0x14
   \   0000B1   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   6017         JZ      ??ZDO_ParseEndDeviceBindReq_1
   \   0000B9   E5..         MOV     A,?V0 + 0
   \   0000BB   2415         ADD     A,#0x15
   \   0000BD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   0000C0   600E         JZ      ??ZDO_ParseEndDeviceBindReq_1
   2420            {
   2421              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000C2                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C2   E5..         MOV     A,?V0 + 0
   \   0000C4   2415         ADD     A,#0x15
   \   0000C6   12....       LCALL   ?Subroutine95 & 0xFFFF
   2422            }
   \                     ??CrossCallReturnLabel_161:
   \   0000C9   2414         ADD     A,#0x14
   \   0000CB   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000CE   8007         SJMP    ??CrossCallReturnLabel_517
   2423            else
   2424            {
   2425              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000D0   E5..         MOV     A,?V0 + 0
   \   0000D2   2414         ADD     A,#0x14
   \   0000D4   12....       LCALL   ?Subroutine138 & 0xFFFF
   2426            }
   2427          }
   \                     ??CrossCallReturnLabel_517:
   \   0000D7   02....       LJMP    ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000007   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000007   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000A   E5..         MOV     A,?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003                REQUIRE ??Subroutine247_0
   \   000003                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   EE           MOV     A,R6
   \   000004   2408         ADD     A,#0x8
   \   000006   FE           MOV     R6,A
   \   000007   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   88..         MOV     ?V0 + 2,R0
   \   000008   89..         MOV     ?V0 + 3,R1
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B                REQUIRE ??Subroutine249_0
   \   00000B                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_mem_alloc?relay
   \   000009   85..82       MOV     DPL,?V0 + 2
   \   00000C   85..83       MOV     DPH,?V0 + 3
   \   00000F   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000012   85..82       MOV     DPL,?V0 + 2
   \   000015   85..83       MOV     DPH,?V0 + 3
   \   000018   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine251_0
   \   000004                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine257_0
   \   000003                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000006                REQUIRE ??Subroutine269_0
   \   000006                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   FC           MOV     R4,A
   \   000005   EF           MOV     A,R7
   \   000006   FD           MOV     R5,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   22           RET
   2428          
   2429          /*********************************************************************
   2430           * @fn          ZDO_ParseBindUnbindReq
   2431           *
   2432           * @brief       This function parses the Bind_req or Unbind_req message.
   2433           *
   2434           * @param       inMsg  - incoming message (request)
   2435           * @param       pReq - place to put parsed information
   2436           *
   2437           * @return      none
   2438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2439          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2440          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2441            uint8 *msg;
   2442          
   2443            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine116 & 0xFFFF
   2444            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_196:
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   2445            msg += Z_EXTADDR_LEN;
   2446            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_494:
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine15 & 0xFFFF
   2447            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_10:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   85..83       MOV     DPH,?V0 + 1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine12 & 0xFFFF
   2448            msg += 2;
   2449            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_650:
   \   000036   F8           MOV     R0,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   2413         ADD     A,#0x13
   \   00003B   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   00003E   E8           MOV     A,R0
   \   00003F   12....       LCALL   ?Subroutine31 & 0xFFFF
   2450            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_40:
   \   000042   7403         MOV     A,#0x3
   \   000044   68           XRL     A,R0
   \   000045   7018         JNZ     ??ZDO_ParseBindUnbindReq_0
   2451            {
   2452              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   240B         ADD     A,#0xb
   \   00004F   12....       LCALL   ?Subroutine59 & 0xFFFF
   2453              msg += Z_EXTADDR_LEN;
   2454              pReq->dstEndpoint = *msg;
   2455            }
   \                     ??CrossCallReturnLabel_94:
   \   000052   C0E0         PUSH    A
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   2414         ADD     A,#0x14
   \   000058   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   00005B   D0E0         POP     A
   \   00005D   800E         SJMP    ??CrossCallReturnLabel_226
   2456            else
   2457            {
   2458              // copy group address
   2459              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00005F   12....       LCALL   ?Subroutine93 & 0xFFFF
   2460            }
   \                     ??CrossCallReturnLabel_155:
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   240B         ADD     A,#0xb
   \   000066   F582         MOV     DPL,A
   \   000068   E5..         MOV     A,?V0 + 1
   \   00006A   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00006D   F0           MOVX    @DPTR,A
   2461          }
   \   00006E   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   FA           MOV     R2,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003                REQUIRE ??Subroutine264_0
   \   000003                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine271_0
   \   000002                ; // Fall through to label ??Subroutine271_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine272_0
   \   000004                ; // Fall through to label ??Subroutine272_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine272_0:
   \   000000   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
   2462          
   2463          /*********************************************************************
   2464           * @fn      ZDO_ParseAddrRsp
   2465           *
   2466           * @brief   Turns the inMsg (incoming message) into the out parsed
   2467           *          structure.
   2468           *
   2469           * @param   inMsg - incoming message
   2470           *
   2471           * @return  pointer to parsed structures.  This structure was
   2472           *          allocated using osal_mem_alloc, so it must be freed
   2473           *          by the calling function [osal_mem_free()].
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2476          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2477            ZDO_NwkIEEEAddrResp_t *rsp;
   2478            uint8 *msg;
   2479            byte cnt = 0;
   2480          
   2481            // Calculate the number of items in the list
   2482            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000009   EE           MOV     A,R6
   \   00000A   2410         ADD     A,#0x10
   \   00000C   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   00000F   C3           CLR     C
   \   000010   940C         SUBB    A,#0xc
   \   000012   400D         JC      ??ZDO_ParseAddrRsp_0
   2483              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000014   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   240B         ADD     A,#0xb
   \   00001A   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   00001D   F5..         MOV     ?V0 + 2,A
   \   00001F   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2484            else
   2485              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   000021   75..00       MOV     ?V0 + 2,#0x0
   2486          
   2487            // Make buffer
   2488            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   E5..         MOV     A,?V0 + 2
   \   000026   C3           CLR     C
   \   000027   33           RLC     A
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   33           RLC     A
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   240D         ADD     A,#0xd
   \   00002F   FA           MOV     R2,A
   \   000030   E9           MOV     A,R1
   \   000031   12....       LCALL   ?Subroutine128 & 0xFFFF
   2489          
   2490            if ( rsp )
   \                     ??CrossCallReturnLabel_210:
   \   000034   6071         JZ      ??ZDO_ParseAddrRsp_2
   2491            {
   2492              msg = inMsg->asdu;
   \   000036   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000039   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   2493          
   2494              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_624:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   12....       LCALL   ?Subroutine50 & 0xFFFF
   2495              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_76:
   \   000043   7062         JNZ     ??ZDO_ParseAddrRsp_2
   2496              {
   2497                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000045                ; Setup parameters for call to function sAddrExtCpy
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   EA           MOV     A,R2
   \   00004A   2403         ADD     A,#0x3
   \   00004C   0A           INC     R2
   \   00004D   0A           INC     R2
   \   00004E   0A           INC     R2
   \   00004F   EB           MOV     A,R3
   \   000050   12....       LCALL   ?Subroutine57 & 0xFFFF
   2498                msg += Z_EXTADDR_LEN;
   2499                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_493:
   \   000053   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ?Subroutine34 & 0xFFFF
   2500          
   2501                msg += 2;
   2502                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_47:
   \   00005A   240B         ADD     A,#0xb
   \   00005C   12....       LCALL   ?Subroutine138 & 0xFFFF
   2503          
   2504                // StartIndex field is only present if NumAssocDev field is non-zero.
   2505                if ( cnt > 0 )
   \                     ??CrossCallReturnLabel_518:
   \   00005F   E5..         MOV     A,?V0 + 2
   \   000061   6044         JZ      ??ZDO_ParseAddrRsp_2
   2506                {
   2507                  uint16 *pList = &(rsp->devList[0]);
   \   000063   E5..         MOV     A,?V0 + 0
   \   000065   240D         ADD     A,#0xd
   \   000067   F8           MOV     R0,A
   \   000068   E5..         MOV     A,?V0 + 1
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F9           MOV     R1,A
   2508                  byte n = cnt;
   \   00006D   85....       MOV     ?V0 + 3,?V0 + 2
   2509          
   2510                  rsp->numAssocDevs = *msg++;
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   E0           MOVX    A,@DPTR
   \   000075   C0E0         PUSH    A
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   240B         ADD     A,#0xb
   \   00007B   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00007E   D0E0         POP     A
   \   000080   12....       LCALL   ?Subroutine30 & 0xFFFF
   2511                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_37:
   \   000083   C0E0         PUSH    A
   \   000085   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000088   D0E0         POP     A
   \   00008A   12....       LCALL   ?Subroutine31 & 0xFFFF
   2512          
   2513                  while ( n != 0 )
   2514                  {
   2515                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_41:
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   EC           MOV     A,R4
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   12....       LCALL   ?Subroutine37 & 0xFFFF
   2516                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_53:
   \   00009E   12....       LCALL   ?Subroutine144 & 0xFFFF
   2517                    n--;
   2518                  }
   \                     ??CrossCallReturnLabel_231:
   \   0000A1   15..         DEC     ?V0 + 3
   \   0000A3   E5..         MOV     A,?V0 + 3
   \   0000A5   70E6         JNZ     ??CrossCallReturnLabel_41
   2519                }
   2520              }
   2521            }
   2522            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   0000A7   AA..         MOV     R2,?V0 + 0
   \   0000A9   AB..         MOV     R3,?V0 + 1
   \   0000AB   02....       LJMP    ??Subroutine212_0 & 0xFFFF
   2523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000003   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2524          
   2525          /*********************************************************************
   2526           * @fn          ZDO_ParseNodeDescRsp
   2527           *
   2528           * @brief       This function parses the Node_Desc_rsp message.
   2529           *
   2530           * @param       inMsg - incoming message
   2531           * @param       pNDRsp - place to parse the message into
   2532           *
   2533           * @return      none
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2536          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2537            uint8 *msg;
   2538          
   2539            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2540          
   2541            pNDRsp->status = *msg++;
   2542            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2543          
   2544            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2545            {
   2546              msg += 2;
   \   00000D   12....       LCALL   ?Subroutine142 & 0xFFFF
   2547              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_227:
   \   000010   FA           MOV     R2,A
   \   000011   ED           MOV     A,R5
   \   000012   3400         ADDC    A,#0x0
   \   000014   FB           MOV     R3,A
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   5407         ANL     A,#0x7
   \   00001C   FE           MOV     R6,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   54F8         ANL     A,#0xf8
   \   000024   4E           ORL     A,R6
   \   000025   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   2548          
   2549              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_583:
   \   000028   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   92E3         MOV     0xE0 /* A   */.3,C
   \   000031   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   2550              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_584:
   \   000034   A2E4         MOV     C,0xE0 /* A   */.4
   \   000036   8B83         MOV     DPH,R3
   \   000038   8A82         MOV     DPL,R2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   92E4         MOV     0xE0 /* A   */.4,C
   \   00003D   12....       LCALL   ?Subroutine52 & 0xFFFF
   2551          
   2552              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_81:
   \   000040   08           INC     R0
   \   000041   A983         MOV     R1,DPH
   2553              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000043   EC           MOV     A,R4
   \   000044   2404         ADD     A,#0x4
   \   000046   0A           INC     R2
   \   000047   ED           MOV     A,R5
   \   000048   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00004B   5407         ANL     A,#0x7
   \   00004D   FE           MOV     R6,A
   \   00004E   8882         MOV     DPL,R0
   \   000050   8983         MOV     DPH,R1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   54F8         ANL     A,#0xf8
   \   000055   4E           ORL     A,R6
   \   000056   FE           MOV     R6,A
   \   000057   12....       LCALL   ?Subroutine39 & 0xFFFF
   2554              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_581:
   \   00005A   5407         ANL     A,#0x7
   \   00005C   FF           MOV     R7,A
   \   00005D   A3           INC     DPTR
   \   00005E   08           INC     R0
   \   00005F   A983         MOV     R1,DPH
   \   000061   74F8         MOV     A,#-0x8
   \   000063   5E           ANL     A,R6
   \   000064   4F           ORL     A,R7
   \   000065   12....       LCALL   ?Subroutine39 & 0xFFFF
   2555              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_582:
   \   000068   8C82         MOV     DPL,R4
   \   00006A   8D83         MOV     DPH,R5
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   12....       LCALL   ?Subroutine32 & 0xFFFF
   2556              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_575:
   \   000073   8C82         MOV     DPL,R4
   \   000075   8D83         MOV     DPH,R5
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   12....       LCALL   ?Subroutine24 & 0xFFFF
   2557              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_27:
   \   000080   12....       LCALL   ?Subroutine24 & 0xFFFF
   2558              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   000083   A3           INC     DPTR
   \   000084   12....       LCALL   ?Subroutine20 & 0xFFFF
   2559              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   000087   12....       LCALL   ?Subroutine20 & 0xFFFF
   2560              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_21:
   \   00008A   12....       LCALL   ?Subroutine32 & 0xFFFF
   2561              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_576:
   \   00008D   FE           MOV     R6,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FB           MOV     R3,A
   \   000091   EE           MOV     A,R6
   \   000092   FA           MOV     R2,A
   \   000093   EC           MOV     A,R4
   \   000094   240B         ADD     A,#0xb
   \   000096   F582         MOV     DPL,A
   \   000098   ED           MOV     A,R5
   \   000099   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00009C   EA           MOV     A,R2
   \   00009D   12....       LCALL   ?Subroutine37 & 0xFFFF
   2562              msg += 2;
   2563              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_52:
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   8983         MOV     DPH,R1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   EC           MOV     A,R4
   \   0000A8   240D         ADD     A,#0xd
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   ED           MOV     A,R5
   \   0000AD   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   0000B0   D0E0         POP     A
   \   0000B2   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   2564              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_577:
   \   0000B5   C0E0         PUSH    A
   \   0000B7   EC           MOV     A,R4
   \   0000B8   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   0000BB   ED           MOV     A,R5
   \   0000BC   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine52 & 0xFFFF
   2565              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_82:
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   C0E0         PUSH    A
   \   0000C7   EC           MOV     A,R4
   \   0000C8   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   2566            }
   \                     ??CrossCallReturnLabel_565:
   \   0000CB   ED           MOV     A,R5
   \   0000CC   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0000CF   D0E0         POP     A
   \   0000D1   F0           MOVX    @DPTR,A
   2567          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000D2   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine260_0
   \   000001                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   EC           MOV     A,R4
   \   000004   2403         ADD     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine261_0
   \   000004                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   E0           MOVX    A,@DPTR
   \   000024   22           RET
   2568          
   2569          /*********************************************************************
   2570           * @fn          ZDO_ParesPowerDescRsp
   2571           *
   2572           * @brief       This function parses the Power_Desc_rsp message.
   2573           *
   2574           * @param       inMsg  - incoming message
   2575           * @param       pNPRsp - place to parse the message into
   2576           *
   2577           * @return      none
   2578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2579          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2580          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2581            uint8 *msg;
   2582          
   2583            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2584            pNPRsp->status = *msg++;
   2585            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2586          
   2587            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7057         JNZ     ??CrossCallReturnLabel_512
   2588            {
   2589              msg += 2;
   \   00000A   12....       LCALL   ?Subroutine142 & 0xFFFF
   2590              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   2591              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   2592              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   2593              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2594            }
   \                     ??CrossCallReturnLabel_228:
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   0C           INC     R4
   \   000011   0C           INC     R4
   \   000012   0C           INC     R4
   \   000013   FD           MOV     R5,A
   \   000014   8C82         MOV     DPL,R4
   \   000016   8D83         MOV     DPH,R5
   \   000018   E0           MOVX    A,@DPTR
   \   000019   540F         ANL     A,#0xf
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FB           MOV     R3,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   54F0         ANL     A,#0xf0
   \   000026   FE           MOV     R6,A
   \   000027   EA           MOV     A,R2
   \   000028   4E           ORL     A,R6
   \   000029   FE           MOV     R6,A
   \   00002A   EB           MOV     A,R3
   \   00002B   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00002E   A3           INC     DPTR
   \   00002F   08           INC     R0
   \   000030   A983         MOV     R1,DPH
   \   000032   EE           MOV     A,R6
   \   000033   54F0         ANL     A,#0xf0
   \   000035   4A           ORL     A,R2
   \   000036   FA           MOV     R2,A
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EB           MOV     A,R3
   \   00003E   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000041   54F0         ANL     A,#0xf0
   \   000043   FF           MOV     R7,A
   \   000044   EB           MOV     A,R3
   \   000045   540F         ANL     A,#0xf
   \   000047   FB           MOV     R3,A
   \   000048   EA           MOV     A,R2
   \   000049   FE           MOV     R6,A
   \   00004A   EF           MOV     A,R7
   \   00004B   4B           ORL     A,R3
   \   00004C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00004F   EF           MOV     A,R7
   \   000050   54F0         ANL     A,#0xf0
   \   000052   FF           MOV     R7,A
   \   000053   EA           MOV     A,R2
   \   000054   FB           MOV     R3,A
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   4B           ORL     A,R3
   \   000059   FB           MOV     R3,A
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   12....       LCALL   ?Subroutine154 & 0xFFFF
   2595          }
   \                     ??CrossCallReturnLabel_512:
   \   000061                REQUIRE ?Subroutine6
   \   000061                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   FF           MOV     R7,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   EE           MOV     A,R6
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   00000C   540F         ANL     A,#0xf
   \   00000E   FA           MOV     R2,A
   \   00000F   22           RET
   2596          
   2597          /*********************************************************************
   2598           * @fn          ZDO_ParseSimpleDescRsp
   2599           *
   2600           * @brief       This function parse the Simple_Desc_rsp message.
   2601           *
   2602           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2603           *         in the SimpleDescriptionFormat_t structure are allocated
   2604           *         and the calling function needs to free [osal_msg_free()]
   2605           *         these buffers.
   2606           *
   2607           * @param       inMsg  - incoming message
   2608           * @param       pSimpleDescRsp - place to parse the message into
   2609           *
   2610           * @return      none
   2611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2612          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2614            uint8 *msg;
   2615          
   2616            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2617            pSimpleDescRsp->status = *msg++;
   2618            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2619            msg += sizeof ( uint16 );
   2620            msg++; // Skip past the length field.
   2621          
   2622            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   7015         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2623            {
   2624              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   0C           INC     R4
   \   00000E   0C           INC     R4
   \   00000F   0C           INC     R4
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   E8           MOV     A,R0
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2625            }
   2626          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001F   80..         SJMP    ?Subroutine6
   2627          
   2628          /*********************************************************************
   2629           * @fn          ZDO_ParseEPListRsp
   2630           *
   2631           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2632           *
   2633           * @param       inMsg  - incoming message
   2634           *
   2635           * @return      none
   2636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine212_0
   \   000004                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2637          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2638          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2639            ZDO_ActiveEndpointRsp_t *pRsp;
   2640            uint8 *msg;
   2641            uint8 Status;
   2642            uint8 cnt;
   2643          
   2644            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000008   3400         ADDC    A,#0x0
   \   00000A   12....       LCALL   ?Subroutine103 & 0xFFFF
   2645            Status = *msg++;
   \                     ??CrossCallReturnLabel_291:
   \   00000D   85..82       MOV     DPL,?V0 + 0
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 5,A
   \   000015   A3           INC     DPTR
   \   000016   8582..       MOV     ?V0 + 0,DPL
   \   000019   8583..       MOV     ?V0 + 1,DPH
   2646            cnt = msg[2];
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 4,A
   2647          
   2648            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ?Subroutine124 & 0xFFFF
   2649            if ( pRsp )
   \                     ??CrossCallReturnLabel_208:
   \   000024   6030         JZ      ??ZDO_ParseEPListRsp_0
   2650            {
   2651              pRsp->status = Status;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   F0           MOVX    @DPTR,A
   2652              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002D   85..82       MOV     DPL,?V0 + 0
   \   000030   85..83       MOV     DPH,?V0 + 1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   12....       LCALL   ?Subroutine28 & 0xFFFF
   2653              msg += sizeof( uint16 );
   2654              pRsp->cnt = cnt;
   2655              msg++; // pass cnt
   2656              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_598:
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   85..82       MOV     DPL,?V0 + 0
   \   00003B   85..83       MOV     DPH,?V0 + 1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A982         MOV     R1,DPL
   \   000043   AA83         MOV     R2,DPH
   \   000045   89..         MOV     ?V0 + 0,R1
   \   000047   8A..         MOV     ?V0 + 1,R2
   \   000049   88..         MOV     ?V0 + 2,R0
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000050   12....       LCALL   ?Subroutine129 & 0xFFFF
   2657            }
   \                     ??CrossCallReturnLabel_590:
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   2658          
   2659            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000056   02....       LJMP    ?Subroutine4 & 0xFFFF
   2660          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   AC..         MOV     R4,?V0 + 4
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005   2404         ADD     A,#0x4
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009                REQUIRE ??Subroutine262_0
   \   000009                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F                REQUIRE ??Subroutine263_0
   \   00000F                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000007   8A..         MOV     ?V0 + 2,R2
   \   000009   8B..         MOV     ?V0 + 3,R3
   \   00000B   AE..         MOV     R6,?V0 + 2
   \   00000D   AF..         MOV     R7,?V0 + 3
   \   00000F   EE           MOV     A,R6
   \   000010   4F           ORL     A,R7
   \   000011   22           RET
   2661          
   2662          /*********************************************************************
   2663           * @fn          ZDO_ParseServerDiscRsp
   2664           *
   2665           * @brief       Parse the Server_Discovery_rsp message.
   2666           *
   2667           * @param       inMsg - incoming message.
   2668           * @param       pRsp - place to put the parsed information.
   2669           *
   2670           * @return      none
   2671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2672          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2673          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2674            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8A82         MOV     DPL,R2
   \   000015   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000018   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   2675            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_586:
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   00002E   A3           INC     DPTR
   \   00002F   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2676          }
   \                     ??CrossCallReturnLabel_328:
   \   000032   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   2677          
   2678          /*********************************************************************
   2679           * @fn          ZDO_ParseMgmtLqiRsp
   2680           *
   2681           * @brief       This function parses the incoming Management
   2682           *              LQI response
   2683           *
   2684           * @param       inMsg - incoming message
   2685           *
   2686           * @return      a pointer to parsed response structure (NULL if not allocated).
   2687           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2688           *          by the calling function [osal_mem_free()].
   2689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2690          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2691          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2692            ZDO_MgmtLqiRsp_t *pRsp;
   2693            uint8 status;
   2694            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 5,#0x0
   2695            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   2696            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2697            uint8 *msg;
   2698          
   2699            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine73 & 0xFFFF
   2700          
   2701            status = *msg++;
   2702            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_116:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_122
   2703            {
   2704              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine76 & 0xFFFF
   2705              startIndex = *msg++;
   2706              neighborLqiCount = *msg++;
   2707            }
   2708          
   2709            // Allocate a buffer big enough to handle the list.
   2710            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2711                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??CrossCallReturnLabel_122:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F00E       MOV     B,#0xe
   \   00001B   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AE..         MOV     R6,?V0 + 0
   \   000024   AF..         MOV     R7,?V0 + 1
   2712            if ( pRsp )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   6065         JZ      ??ZDO_ParseMgmtLqiRsp_0
   2713            {
   2714              uint8 x;
   2715              neighborLqiItem_t *pList = pRsp->list;
   \   00002A   EE           MOV     A,R6
   \   00002B   2404         ADD     A,#0x4
   \   00002D   F5..         MOV     ?V0 + 0,A
   \   00002F   EF           MOV     A,R7
   \   000030   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   2716              pRsp->status = status;
   \                     ??CrossCallReturnLabel_340:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E5..         MOV     A,?V0 + 7
   \   000039   F0           MOVX    @DPTR,A
   2717              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   00003A   A3           INC     DPTR
   \   00003B   E5..         MOV     A,?V0 + 6
   \   00003D   12....       LCALL   ?Subroutine162 & 0xFFFF
   2718              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_250:
   \   000040   A3           INC     DPTR
   \   000041   E5..         MOV     A,?V0 + 5
   \   000043   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   2719              pRsp->neighborLqiCount = neighborLqiCount;
   2720          
   2721              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_600:
   \   000046   75..00       MOV     ?V0 + 5,#0x0
   \   000049   803D         SJMP    ??ZDO_ParseMgmtLqiRsp_1
   2722              {
   2723                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00004B                ; Setup parameters for call to function sAddrExtCpy
   \   00004B   AC..         MOV     R4,?V0 + 2
   \   00004D   AD..         MOV     R5,?V0 + 3
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   2404         ADD     A,#0x4
   \   000053   12....       LCALL   ?Subroutine183 & 0xFFFF
   2724                msg += Z_EXTADDR_LEN;
   2725          
   2726                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \                     ??CrossCallReturnLabel_607:
   \   000056   E5..         MOV     A,?V0 + 2
   \   000058   2410         ADD     A,#0x10
   \   00005A   12....       LCALL   ?Subroutine133 & 0xFFFF
   2727                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_216:
   \   00005D   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000060   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2728                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_329:
   \   000063   E5..         MOV     A,?V0 + 2
   \   000065   2405         ADD     A,#0x5
   \   000067   12....       LCALL   ?Subroutine133 & 0xFFFF
   2729                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_217:
   \   00006A   C0E0         PUSH    A
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   240D         ADD     A,#0xd
   \   000070   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000073   D0E0         POP     A
   \   000075   12....       LCALL   ?Subroutine13 & 0xFFFF
   2730                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_3:
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   240C         ADD     A,#0xc
   \   00007C   12....       LCALL   ?Subroutine138 & 0xFFFF
   2731                pList++;
   \                     ??CrossCallReturnLabel_519:
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   240E         ADD     A,#0xe
   \   000083   12....       LCALL   ?Subroutine141 & 0xFFFF
   2732              }
   \                     ??CrossCallReturnLabel_343:
   \   000086   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000088   E5..         MOV     A,?V0 + 5
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V0 + 4
   \   00008D   40BC         JC      ??ZDO_ParseMgmtLqiRsp_2
   2733            }
   2734          
   2735            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093                REQUIRE ?Subroutine8
   \   000093                ; // Fall through to label ?Subroutine8
   2736          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   E5F0         MOV     A,B
   \   000006                REQUIRE ??Subroutine265_0
   \   000006                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0 + 2,DPL
   \   000014   8583..       MOV     ?V0 + 3,DPH
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000009   22           RET
   2737          
   2738          /*********************************************************************
   2739           * @fn          ZDO_ParseMgmNwkDiscRsp
   2740           *
   2741           * @brief       This function parses the incoming Management
   2742           *              Network Discover response.
   2743           *
   2744           * @param       inMsg - incoming message
   2745           *
   2746           * @return      pointer to parsed response.  This structure was
   2747           *          allocated using osal_mem_alloc, so it must be freed
   2748           *          by the calling function [osal_mem_free()].
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2751          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2752            ZDO_MgmNwkDiscRsp_t *pRsp;
   2753            uint8 status;
   2754            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2755            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2756            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2757            uint8 *msg;
   2758          
   2759            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine70 & 0xFFFF
   2760            status = *msg++;
   \                     ??CrossCallReturnLabel_621:
   \   000011   F5..         MOV     ?V0 + 7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2761          
   2762            if ( status == ZSuccess )
   \   000018   7008         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2763            {
   2764              networkCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine171 & 0xFFFF
   2765              startIndex = *msg++;
   2766              networkListCount = *msg++;
   2767            }
   \                     ??CrossCallReturnLabel_258:
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2768          
   2769            // Allocate a buffer big enough to handle the list.
   2770            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2771                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   85....       MOV     ?V0 + 0,?V0 + 4
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   7404         MOV     A,#0x4
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?S_SHL
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   2404         ADD     A,#0x4
   \   000033   FA           MOV     R2,A
   \   000034   E5..         MOV     A,?V0 + 1
   \   000036   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000039   8A..         MOV     ?V0 + 2,R2
   \   00003B   8B..         MOV     ?V0 + 3,R3
   2772            if ( pRsp )
   \   00003D   EA           MOV     A,R2
   \   00003E   45..         ORL     A,?V0 + 3
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2773            {
   2774              uint8 x;
   2775              mgmtNwkDiscItem_t *pList;
   2776          
   2777              pRsp->status = status;
   \   000045   12....       LCALL   ?Subroutine18 & 0xFFFF
   2778              pRsp->networkCount = networkCount;
   2779              pRsp->startIndex = startIndex;
   2780              pRsp->networkListCount = networkListCount;
   2781              pList = pRsp->list;
   \                     ??CrossCallReturnLabel_16:
   \   000048   EA           MOV     A,R2
   \   000049   2404         ADD     A,#0x4
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   EB           MOV     A,R3
   \   00004E   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   2782          
   2783              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_341:
   \   000051   75..00       MOV     ?V0 + 5,#0x0
   \   000054   806F         SJMP    ??ZDO_ParseMgmNwkDiscRsp_2
   2784              {
   2785                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV     A,R6
   \   000057   FC           MOV     R4,A
   \   000058   EF           MOV     A,R7
   \   000059   FD           MOV     R5,A
   \   00005A   AA..         MOV     R2,?V0 + 0
   \   00005C   AB..         MOV     R3,?V0 + 1
   \   00005E   12....       LCALL   ??sAddrExtCpy?relay
   2786                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000061   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2787                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_330:
   \   000068   EE           MOV     A,R6
   \   000069   2408         ADD     A,#0x8
   \   00006B   FE           MOV     R6,A
   \   00006C   EF           MOV     A,R7
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   FF           MOV     R7,A
   2788          
   2789                pList->logicalChannel = *msg++;
   \   000070   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000073   12....       LCALL   ?Subroutine47 & 0xFFFF
   2790                pList->stackProfile = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_69:
   \   000076   540F         ANL     A,#0xf
   \   000078   C0E0         PUSH    A
   \   00007A   E5..         MOV     A,?V0 + 0
   \   00007C   240B         ADD     A,#0xb
   \   00007E   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000081   D0E0         POP     A
   \   000083   12....       LCALL   ?Subroutine51 & 0xFFFF
   2791                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_78:
   \   000086   C0E0         PUSH    A
   \   000088   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00008B   D0E0         POP     A
   \   00008D   12....       LCALL   ?Subroutine30 & 0xFFFF
   2792                pList->beaconOrder = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_38:
   \   000090   540F         ANL     A,#0xf
   \   000092   C0E0         PUSH    A
   \   000094   E5..         MOV     A,?V0 + 0
   \   000096   240D         ADD     A,#0xd
   \   000098   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   00009B   D0E0         POP     A
   \   00009D   12....       LCALL   ?Subroutine51 & 0xFFFF
   2793                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_79:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   E5..         MOV     A,?V0 + 0
   \   0000A4   240E         ADD     A,#0xe
   \   0000A6   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0000A9   D0E0         POP     A
   \   0000AB   12....       LCALL   ?Subroutine30 & 0xFFFF
   2794                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_39:
   \   0000AE   C0E0         PUSH    A
   \   0000B0   E5..         MOV     A,?V0 + 0
   \   0000B2   240F         ADD     A,#0xf
   \   0000B4   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   0000B7   D0E0         POP     A
   \   0000B9   12....       LCALL   ?Subroutine31 & 0xFFFF
   2795                pList++;
   \                     ??CrossCallReturnLabel_42:
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   2410         ADD     A,#0x10
   \   0000C0   12....       LCALL   ?Subroutine141 & 0xFFFF
   2796              }
   \                     ??CrossCallReturnLabel_344:
   \   0000C3   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000C5   E5..         MOV     A,?V0 + 5
   \   0000C7   C3           CLR     C
   \   0000C8   95..         SUBB    A,?V0 + 4
   \   0000CA   408A         JC      ??ZDO_ParseMgmNwkDiscRsp_3
   2797            }
   2798          
   2799            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000CC   AA..         MOV     R2,?V0 + 2
   \   0000CE   AB..         MOV     R3,?V0 + 3
   \   0000D0   02....       LJMP    ?Subroutine8 & 0xFFFF
   2800          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine266_0
   \   000004                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C4           SWAP    A
   \   000007   540F         ANL     A,#0xf
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003                REQUIRE ??Subroutine267_0
   \   000003                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V0 + 7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   00000D   E5..         MOV     A,?V0 + 5
   \   00000F   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000012   E5..         MOV     A,?V0 + 4
   \   000014   F0           MOVX    @DPTR,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
   2801          
   2802          /*********************************************************************
   2803           * @fn          ZDO_ParseMgmtRtgRsp
   2804           *
   2805           * @brief       This function parses the incoming Management
   2806           *              Routing response.
   2807           *
   2808           * @param       inMsg - incoming message
   2809           *
   2810           * @return      a pointer to parsed response structure (NULL if not allocated).
   2811           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2812           *          by the calling function [osal_mem_free()].
   2813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2814          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2815          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2816            ZDO_MgmtRtgRsp_t *pRsp;
   2817            uint8 status;
   2818            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   2819            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   2820            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   2821            uint8 *msg;
   2822          
   2823            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine70 & 0xFFFF
   2824          
   2825            status = *msg++;
   \                     ??CrossCallReturnLabel_622:
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2826            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2827            {
   2828              rtgCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine104 & 0xFFFF
   2829              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_174:
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   A3           INC     DPTR
   2830              rtgListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   2831            }
   2832          
   2833            // Allocate a buffer big enough to handle the list
   2834            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2835                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   12....       LCALL   ?Subroutine130 & 0xFFFF
   2836            if ( pRsp )
   \                     ??CrossCallReturnLabel_612:
   \   000031   EA           MOV     A,R2
   \   000032   4B           ORL     A,R3
   \   000033   6063         JZ      ??ZDO_ParseMgmtRtgRsp_1
   2837            {
   2838              uint8 x;
   2839              rtgItem_t *pList = pRsp->list;
   \   000035   EA           MOV     A,R2
   \   000036   2404         ADD     A,#0x4
   \   000038   F8           MOV     R0,A
   \   000039   EB           MOV     A,R3
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F9           MOV     R1,A
   2840              pRsp->status = status;
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E5..         MOV     A,?V0 + 3
   \   000043   F0           MOVX    @DPTR,A
   2841              pRsp->rtgCount = rtgCount;
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   12....       LCALL   ?Subroutine49 & 0xFFFF
   2842              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_74:
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine49 & 0xFFFF
   2843              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_75:
   \   00004F   A3           INC     DPTR
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   F0           MOVX    @DPTR,A
   2844          
   2845              for ( x = 0; x < rtgListCount; x++ )
   \   000053   75..00       MOV     ?V0 + 1,#0x0
   \   000056   8039         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   2846              {
   2847                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00005F   FD           MOV     R5,A
   \   000060   E5..         MOV     A,?V0 + 2
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   ED           MOV     A,R5
   \   000069   12....       LCALL   ??Subroutine272_0 & 0xFFFF
   2848                msg += 2;
   2849                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_653:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   12....       LCALL   ?Subroutine47 & 0xFFFF
   2850                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_70:
   \   000073   F5..         MOV     ?V0 + 2,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FD           MOV     R5,A
   \   000078   E5..         MOV     A,?V0 + 2
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   ED           MOV     A,R5
   \   000083   F0           MOVX    @DPTR,A
   2851                msg += 2;
   \   000084   12....       LCALL   ?Subroutine144 & 0xFFFF
   2852                pList++;
   \                     ??CrossCallReturnLabel_232:
   \   000087   E8           MOV     A,R0
   \   000088   2407         ADD     A,#0x7
   \   00008A   F8           MOV     R0,A
   \   00008B   E9           MOV     A,R1
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   F9           MOV     R1,A
   2853              }
   \   00008F   05..         INC     ?V0 + 1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   000091   E5..         MOV     A,?V0 + 1
   \   000093   C3           CLR     C
   \   000094   95..         SUBB    A,?V0 + 0
   \   000096   40C0         JC      ??ZDO_ParseMgmtRtgRsp_3
   2854            }
   2855          
   2856            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000098   02....       LJMP    ??Subroutine212_0 & 0xFFFF
   2857          }
   2858          
   2859          /*********************************************************************
   2860           * @fn          ZDO_ParseMgmtBindRsp
   2861           *
   2862           * @brief       This function parses the incoming Management
   2863           *              Binding response.
   2864           *
   2865           * @param       inMsg - pointer to message to parse
   2866           *
   2867           * @return      a pointer to parsed response structure (NULL if not allocated).
   2868           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2869           *          by the calling function [osal_mem_free()].
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2872          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2873            ZDO_MgmtBindRsp_t *pRsp;
   2874            uint8 status;
   2875            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2876            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2877            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2878            uint8 *msg;
   2879          
   2880            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine73 & 0xFFFF
   2881          
   2882            status = *msg++;
   2883            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_117:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_123
   2884            {
   2885              bindingCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine76 & 0xFFFF
   2886              startIndex = *msg++;
   2887              bindingListCount = *msg++;
   2888            }
   2889          
   2890            // Allocate a buffer big enough to handle the list
   2891            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2892                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??CrossCallReturnLabel_123:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F015       MOV     B,#0x15
   \   00001B   A4           MUL     AB
   \   00001C   2404         ADD     A,#0x4
   \   00001E   FA           MOV     R2,A
   \   00001F   E5F0         MOV     A,B
   \   000021   12....       LCALL   ?Subroutine128 & 0xFFFF
   2893            if ( pRsp )
   \                     ??CrossCallReturnLabel_211:
   \   000024   7003         JNZ     $+5
   \   000026   02....       LJMP    ??ZDO_ParseMgmtBindRsp_0 & 0xFFFF
   2894            {
   2895              uint8 x;
   2896              apsBindingItem_t *pList = pRsp->list;
   \   000029   EA           MOV     A,R2
   \   00002A   2404         ADD     A,#0x4
   \   00002C   FE           MOV     R6,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FF           MOV     R7,A
   2897              pRsp->status = status;
   \   000031   12....       LCALL   ?Subroutine18 & 0xFFFF
   2898              pRsp->bindingCount = bindingCount;
   2899              pRsp->startIndex = startIndex;
   2900              pRsp->bindingListCount = bindingListCount;
   2901          
   2902              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_17:
   \   000034   75..00       MOV     ?V0 + 5,#0x0
   \   000037   801A         SJMP    ??ZDO_ParseMgmtBindRsp_1
   2903              {
   2904                osal_cpyExtAddr( pList->srcAddr, msg );
   2905                msg += Z_EXTADDR_LEN;
   2906                pList->srcEP = *msg++;
   2907          
   2908                // Get the Cluster ID
   2909          
   2910                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2911                msg += 2;
   2912                pList->dstAddr.addrMode = *msg++;
   2913                if ( pList->dstAddr.addrMode == Addr64Bit )
   2914                {
   2915                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2916                  msg += Z_EXTADDR_LEN;
   2917                  pList->dstEP = *msg++;
   2918                }
   2919                else
   2920                {
   2921                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000039   12....       LCALL   ?Subroutine93 & 0xFFFF
   2922                  msg += 2;
   2923                }
   \                     ??CrossCallReturnLabel_156:
   \   00003C   EE           MOV     A,R6
   \   00003D   240B         ADD     A,#0xb
   \   00003F   F582         MOV     DPL,A
   \   000041   EF           MOV     A,R7
   \   000042   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000045   E8           MOV     A,R0
   \   000046   12....       LCALL   ?Subroutine33 & 0xFFFF
   2924          
   2925                pList++;
   \                     ??CrossCallReturnLabel_44:
   \   000049   EE           MOV     A,R6
   \   00004A   2415         ADD     A,#0x15
   \   00004C   FE           MOV     R6,A
   \   00004D   EF           MOV     A,R7
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FF           MOV     R7,A
   \   000051   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   000053   E5..         MOV     A,?V0 + 5
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 4
   \   000058   5058         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   00005A                ; Setup parameters for call to function sAddrExtCpy
   \   00005A   AC..         MOV     R4,?V0 + 2
   \   00005C   AD..         MOV     R5,?V0 + 3
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000073   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000086   85..82       MOV     DPL,?V0 + 2
   \   000089   F583         MOV     DPH,A
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000090   E8           MOV     A,R0
   \   000091   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000094   7403         MOV     A,#0x3
   \   000096   68           XRL     A,R0
   \   000097   70A0         JNZ     ??ZDO_ParseMgmtBindRsp_2
   \   000099                ; Setup parameters for call to function sAddrExtCpy
   \   000099   AC..         MOV     R4,?V0 + 2
   \   00009B   AD..         MOV     R5,?V0 + 3
   \   00009D   12....       LCALL   ?Subroutine148 & 0xFFFF
   2926              }
   2927            }
   \                     ??CrossCallReturnLabel_237:
   \   0000A0   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000A3   C0E0         PUSH    A
   \   0000A5   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   0000A8   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   0000AB   D0E0         POP     A
   \   0000AD   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B0   8097         SJMP    ??CrossCallReturnLabel_44
   2928          
   2929            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   0000B2   AA..         MOV     R2,?V0 + 0
   \   0000B4   AB..         MOV     R3,?V0 + 1
   \   0000B6   02....       LJMP    ?Subroutine7 & 0xFFFF
   2930          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??sAddrExtCpy?relay
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2408         ADD     A,#0x8
   \   000008   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   E5..         MOV     A,?V0 + 3
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F5..         MOV     ?V0 + 3,A
   \   000010   22           RET
   2931          
   2932          /*********************************************************************
   2933           * @fn          ZDO_ParseUserDescRsp
   2934           *
   2935           * @brief       This function parses the incoming User
   2936           *              Descriptor Response.
   2937           *
   2938           * @param       inMsg - incoming response message
   2939           *
   2940           * @return      a pointer to parsed response structure (NULL if not allocated).
   2941           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2942           *          by the calling function [osal_mem_free()].
   2943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2944          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2945          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2946            ZDO_UserDescRsp_t *pRsp;
   2947            uint8 *msg;
   2948            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2949          
   2950            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00000B   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00000E   88..         MOV     ?V0 + 0,R0
   \   000010   89..         MOV     ?V0 + 1,R1
   2951          
   2952            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2953              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   2954          
   2955            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   85....       MOV     ?V0 + 2,?V0 + 4
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   12....       LCALL   ?Subroutine124 & 0xFFFF
   2956            if ( pRsp )
   \                     ??CrossCallReturnLabel_209:
   \   000027   6030         JZ      ??ZDO_ParseUserDescRsp_1
   2957            {
   2958              pRsp->status = msg[0];
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   12....       LCALL   ?Subroutine55 & 0xFFFF
   2959              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_89:
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   85..82       MOV     DPL,?V0 + 0
   \   00003C   85..83       MOV     DPH,?V0 + 1
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?Subroutine28 & 0xFFFF
   2960              pRsp->length = descLen;
   2961              if ( descLen )
   \                     ??CrossCallReturnLabel_599:
   \   000043   6014         JZ      ??ZDO_ParseUserDescRsp_1
   2962                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   2404         ADD     A,#0x4
   \   000049   12....       LCALL   ?Subroutine141 & 0xFFFF
   2963            }
   \                     ??CrossCallReturnLabel_345:
   \   00004C   88..         MOV     ?V0 + 2,R0
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000053   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   2964          
   2965            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000059   02....       LJMP    ?Subroutine4 & 0xFFFF
   2966          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   22           RET
   2967          
   2968          /*********************************************************************
   2969           * @fn          ZDO_ParseSimpleDescBuf
   2970           *
   2971           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2972           *
   2973           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2974           * @param       desc - SimpleDescriptionFormat_t *
   2975           *
   2976           *              This routine allocates storage for the cluster IDs because
   2977           *              they are 16-bit and need to be aligned to be properly processed.
   2978           *              This routine returns non-zero if an allocation fails.
   2979           *
   2980           *              NOTE: This means that the caller or user of the input structure
   2981           *                    is responsible for freeing the memory
   2982           *
   2983           * @return      0: success
   2984           *              1: failure due to malloc failure.
   2985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2986          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2987          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2988            uint8 num, i;
   2989          
   2990            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   2991            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_11:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   2992            buf += 2;
   2993            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_652:
   \   00001E   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000021   12....       LCALL   ?Subroutine12 & 0xFFFF
   2994            buf += 2;
   2995            desc->AppDevVer = *buf >> 4;
   2996          
   2997            desc->Reserved = 0;
   \                     ??CrossCallReturnLabel_651:
   \   000024   C4           SWAP    A
   \   000025   540F         ANL     A,#0xf
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine45 & 0xFFFF
   2998            buf++;
   2999          
   3000            // move in input cluster list (if any). allocate aligned memory.
   3001            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_68:
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   0E           INC     R6
   \   000036   0E           INC     R6
   \   000037   AF83         MOV     R7,DPH
   \   000039   8C82         MOV     DPL,R4
   \   00003B   8D83         MOV     DPH,R5
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   F0           MOVX    @DPTR,A
   \   000044   88..         MOV     ?V0 + 4,R0
   3002            if ( num )
   \   000046   6021         JZ      ??ZDO_ParseSimpleDescBuf_0
   3003            {
   3004              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000048   EC           MOV     A,R4
   \   000049   2407         ADD     A,#0x7
   \   00004B   F8           MOV     R0,A
   \   00004C   ED           MOV     A,R5
   \   00004D   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000050   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000053   7004         JNZ     ??ZDO_ParseSimpleDescBuf_1
   3005              {
   3006                // malloc failed. we're done.
   3007                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000055   7901         MOV     R1,#0x1
   \   000057   807B         SJMP    ??ZDO_ParseSimpleDescBuf_3
   3008              }
   3009              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   8006         SJMP    ??CrossCallReturnLabel_50
   3010              {
   3011                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00005D   12....       LCALL   ?Subroutine71 & 0xFFFF
   3012                buf += 2;
   3013              }
   \                     ??CrossCallReturnLabel_114:
   \   000060   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000063   EA           MOV     A,R2
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 4
   \   000067   40F4         JC      ??ZDO_ParseSimpleDescBuf_4
   3014            }
   3015          
   3016            // move in output cluster list (if any). allocate aligned memory.
   3017            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000069   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   88..         MOV     ?V0 + 4,R0
   3018            if (num)
   \   00007E   6052         JZ      ??ZDO_ParseSimpleDescBuf_5
   3019            {
   3020              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   240A         ADD     A,#0xa
   \   000084   F8           MOV     R0,A
   \   000085   E5..         MOV     A,?V0 + 1
   \   000087   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00008A   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   00008D   7030         JNZ     ??ZDO_ParseSimpleDescBuf_6
   3021              {
   3022                // malloc failed. free input cluster list memory if there is any
   3023                if ( desc->pAppInClusterList != NULL )
   \   00008F   85..82       MOV     DPL,?V0 + 0
   \   000092   85..83       MOV     DPH,?V0 + 1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   00009F   60B4         JZ      ??ZDO_ParseSimpleDescBuf_2
   3024                {
   3025                  osal_mem_free(desc->pAppInClusterList);
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2407         ADD     A,#0x7
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   3400         ADDC    A,#0x0
   \   0000AB   F5..         MOV     ?V0 + 3,A
   \   0000AD                ; Setup parameters for call to function osal_mem_free
   \   0000AD   85..82       MOV     DPL,?V0 + 2
   \   0000B0   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   3026                  
   3027                  desc->pAppInClusterList = NULL;
   \                     ??CrossCallReturnLabel_431:
   \   0000B3   85..82       MOV     DPL,?V0 + 2
   \   0000B6   85..83       MOV     DPH,?V0 + 3
   \   0000B9   E4           CLR     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   8096         SJMP    ??ZDO_ParseSimpleDescBuf_2
   3028                }
   3029                return 1;
   3030              }
   3031              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000BF   7A00         MOV     R2,#0x0
   \   0000C1   8009         SJMP    ??CrossCallReturnLabel_51
   3032              {
   3033                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000C3   12....       LCALL   ?Subroutine71 & 0xFFFF
   3034                buf += 2;
   3035              }
   \                     ??CrossCallReturnLabel_115:
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000CC   EA           MOV     A,R2
   \   0000CD   C3           CLR     C
   \   0000CE   95..         SUBB    A,?V0 + 4
   \   0000D0   40F1         JC      ??ZDO_ParseSimpleDescBuf_7
   3036            }
   3037            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   0000D2   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000D4   7F05         MOV     R7,#0x5
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA
   3038          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   88..         MOV     ?V0 + 2,R0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007   E5..         MOV     A,?V0 + 4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine270_0
   \   000001                ; // Fall through to label ??Subroutine270_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EC           MOV     A,R4
   \   00000A   2400         ADD     A,#0x0
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   EA           MOV     A,R2
   \   000010   33           RLC     A
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F9           MOV     R1,A
   \   000015   85..82       MOV     DPL,?V0 + 0
   \   000018   85..83       MOV     DPH,?V0 + 1
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   ED           MOV     A,R5
   \   000015   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000018   0A           INC     R2
   \   000019   22           RET
   3039          
   3040          /*********************************************************************
   3041           * @fn          ZDO_ParseDeviceAnnce
   3042           *
   3043           * @brief       Parse a Device Announce message.
   3044           *
   3045           * @param       inMsg - Incoming message
   3046           * @param       pAnnce - place to put the parsed information
   3047           *
   3048           * @return      none
   3049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3050          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3051          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3052            uint8 *msg;
   3053          
   3054            // Parse incoming message
   3055            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00000C   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00000F   FF           MOV     R7,A
   3056            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000018   12....       LCALL   ?Subroutine26 & 0xFFFF
   3057            msg += 2;
   3058            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_32:
   \   00001B   2402         ADD     A,#0x2
   \   00001D   12....       LCALL   ?Subroutine59 & 0xFFFF
   3059            msg += Z_EXTADDR_LEN;
   3060            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_95:
   \   000020   85..82       MOV     DPL,?V0 + 0
   \   000023   85..83       MOV     DPH,?V0 + 1
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
   3061          }
   \   000031   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   3062          
   3063          /*********************************************************************
   3064           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3065           *
   3066           * @brief       This function handles parsing of the incoming Management
   3067           *              Network Update notify.
   3068           *
   3069           * @param       inMsg - incoming message (request)
   3070           *
   3071           * @return      a pointer to parsed response structure (NULL if not allocated).
   3072           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3073           *          by the calling function [osal_mem_free()].
   3074           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3075          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3076          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3077            uint8 status;
   3078            uint32 scannedChannels = 0;
   \   000005   90....       MOV     DPTR,#__Constant_0
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   12....       LCALL   ?L_MOV_X
   3079            uint16 totalTransmissions = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   3080            uint16 transmissionFailures = 0;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   3081            uint8 listCount = 0;
   \   000019   75..00       MOV     ?V0 + 14,#0x0
   3082            uint8 *msg = inMsg->asdu;
   \   00001C   12....       LCALL   ?Subroutine70 & 0xFFFF
   3083            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3084          
   3085            status = *msg++;
   \                     ??CrossCallReturnLabel_623:
   \   00001F   F5..         MOV     ?V0 + 10,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3086            if ( status == ZSuccess )
   \   000026   7034         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3087            {
   3088              scannedChannels = osal_build_uint32( msg, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7904         MOV     R1,#0x4
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??osal_build_uint32?relay
   \   000031   8A..         MOV     ?V0 + 4,R2
   \   000033   8B..         MOV     ?V0 + 5,R3
   \   000035   8C..         MOV     ?V0 + 6,R4
   \   000037   8D..         MOV     ?V0 + 7,R5
   3089              msg += 4;
   \   000039   EE           MOV     A,R6
   \   00003A   2404         ADD     A,#0x4
   \   00003C   FE           MOV     R6,A
   \   00003D   EF           MOV     A,R7
   \   00003E   3400         ADDC    A,#0x0
   \   000040   FF           MOV     R7,A
   3090              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   3091              msg += 2;
   \                     ??CrossCallReturnLabel_295:
   \   000048   12....       LCALL   ?Subroutine122 & 0xFFFF
   3092              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_666:
   \   00004B   FA           MOV     R2,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   EA           MOV     A,R2
   \   000050   12....       LCALL   ?Subroutine143 & 0xFFFF
   3093              msg += 2;
   \                     ??CrossCallReturnLabel_230:
   \   000053   12....       LCALL   ?Subroutine122 & 0xFFFF
   3094              listCount = *msg++;
   3095            }
   \                     ??CrossCallReturnLabel_667:
   \   000056   F5..         MOV     ?V0 + 14,A
   \   000058   A3           INC     DPTR
   \   000059   0E           INC     R6
   \   00005A   AF83         MOV     R7,DPH
   3096          
   3097            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   85....       MOV     ?V0 + 8,?V0 + 14
   \   00005F   E5..         MOV     A,?V0 + 8
   \   000061   240A         ADD     A,#0xa
   \   000063   FA           MOV     R2,A
   \   000064   E4           CLR     A
   \   000065   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000068   8A..         MOV     ?V0 + 8,R2
   \   00006A   8B..         MOV     ?V0 + 9,R3
   3098          
   3099            if ( pRsp )
   \   00006C   EA           MOV     A,R2
   \   00006D   45..         ORL     A,?V0 + 9
   \   00006F   604A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_1
   3100            {
   3101              pRsp->status = status;
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 10
   \   000077   F0           MOVX    @DPTR,A
   3102              pRsp->scannedChannels = scannedChannels;
   \   000078   A3           INC     DPTR
   \   000079   78..         MOV     R0,#?V0 + 4
   \   00007B   12....       LCALL   ?L_MOV_TO_X
   3103              pRsp->totalTransmissions = totalTransmissions;
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E5..         MOV     A,?V0 + 1
   \   00008D   12....       LCALL   ?Subroutine42 & 0xFFFF
   3104              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_60:
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 3
   \   000096   12....       LCALL   ?Subroutine42 & 0xFFFF
   3105              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_61:
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V0 + 14
   \   00009D   F0           MOVX    @DPTR,A
   3106          
   3107              // Allocate a buffer big enough to handle the list.
   3108              if ( listCount > 0 )
   \   00009E   601B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_1
   3109                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000A0                ; Setup parameters for call to function osal_memcpy
   \   0000A0   8E..         MOV     ?V0 + 0,R6
   \   0000A2   8F..         MOV     ?V0 + 1,R7
   \   0000A4   75..00       MOV     ?V0 + 2,#0x0
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   AC..         MOV     R4,?V0 + 14
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   EA           MOV     A,R2
   \   0000B1   240A         ADD     A,#0xa
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EB           MOV     A,R3
   \   0000B5   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   3110            }
   \                     ??CrossCallReturnLabel_592:
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   3111          
   3112            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   0000BB   AA..         MOV     R2,?V0 + 8
   \   0000BD   AB..         MOV     R3,?V0 + 9
   \   0000BF   7F10         MOV     R7,#0x10
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
   3113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005                REQUIRE ??Subroutine274_0
   \   000005                ; // Fall through to label ??Subroutine274_0
   3114          
   3115          /*********************************************************************
   3116           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3117           *
   3118           * @brief       This function handles parsing the incoming Management
   3119           *              Network Update request and starts the request (if needed).
   3120           *
   3121           * @param       inMsg - incoming message (request)
   3122           * @param       pReq - pointer to place to parse message to
   3123           *
   3124           * @return      none
   3125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3126          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3127          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3128            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine81 & 0xFFFF
   3129          
   3130            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_133:
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   85..83       MOV     DPH,?V0 + 1
   \   000012   12....       LCALL   ?XSTORE_R2345
   3131            msg += 4;
   \   000015   EE           MOV     A,R6
   \   000016   2404         ADD     A,#0x4
   \   000018   FE           MOV     R6,A
   \   000019   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   3132            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_669:
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ?Subroutine50 & 0xFFFF
   3133          
   3134            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_77:
   \   000029   C3           CLR     C
   \   00002A   9406         SUBB    A,#0x6
   \   00002C   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3135            {
   3136              // Request is to scan over channelMask
   3137              pReq->scanCount = *msg;
   \   00002E   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   3138            }
   \                     ??CrossCallReturnLabel_618:
   \   000031   8038         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3139            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000033   85..82       MOV     DPL,?V0 + 0
   \   000036   85..83       MOV     DPH,?V0 + 1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   64FE         XRL     A,#0xfe
   \   000040   600E         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000042   85..82       MOV     DPL,?V0 + 0
   \   000045   85..83       MOV     DPH,?V0 + 1
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F4           CPL     A
   \   00004E   701C         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3140            {
   3141              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3142              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000050   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000053   A3           INC     DPTR
   \   000054   12....       LCALL   ?Subroutine31 & 0xFFFF
   3143          
   3144              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_43:
   \   000057   85..82       MOV     DPL,?V0 + 0
   \   00005A   85..83       MOV     DPH,?V0 + 1
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F4           CPL     A
   \   000063   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3145              {
   3146                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000065   12....       LCALL   ?Subroutine75 & 0xFFFF
   3147              }
   3148            }
   \                     ??CrossCallReturnLabel_121:
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00006B   F0           MOVX    @DPTR,A
   3149          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   00006C   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3150          
   3151          /*********************************************************************
   3152          *********************************************************************/
   3153          
   3154          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   1      0     70
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> sAddrExtCpy                   0      0     74
       -> ZDP_BindUnbindReq             0      0     90
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> ZDP_SendData                  0      0     84
       -> ZDP_SendData                  0      0     84
       -> ZDO_RemoveMatchMemory         0      0     74
     ZDO_AnyClusterMatches              0      0     41
     ZDO_BuildSimpleDescBuf             1      0      9
     ZDO_CompareClusterLists            0      0     44
     ZDO_ConvertOTAClusters             0      0     37
     ZDO_CopyMatchInfo                  0      0     43
       -> osal_memcpy                   0      0     36
       -> osal_mem_alloc                0      0     30
       -> osal_memcpy                   0      0     36
       -> osal_mem_alloc                0      0     30
       -> osal_memcpy                   0      0     36
       -> osal_mem_free                 0      0     30
       -> osal_mem_free                 0      0     30
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             1      0     17
       -> ZDP_SendData                  0      0     34
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_Init                           2      0      0
       -> sAddrExtCpy                   4      0      0
       -> NLME_CoordinatorInit          4      0      0
       -> APS_ReflectorInit             4      0      0
     ZDO_MatchEndDeviceBind             1      0     30
       -> osal_mem_alloc                0      0     50
       -> osal_memset                   0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> APS_SetEndDeviceBindTimeout
                                        0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDMatchSendState              0      0     50
       -> ZDP_SendData                  0      0     60
       -> ZDP_SendData                  0      0     60
       -> ZDO_RemoveMatchMemory         0      0     50
     ZDO_ParseAddrRsp                   1      0     14
       -> osal_mem_alloc                0      0     28
       -> sAddrExtCpy                   0      0     28
     ZDO_ParseBindUnbindReq             1      0     10
       -> sAddrExtCpy                   0      0     20
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseDeviceAnnce               1      0     52
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseEPListRsp                 1      0     17
       -> osal_mem_alloc                0      0     28
       -> osal_memcpy                   0      0     34
     ZDO_ParseEndDeviceBindReq          1      0     12
       -> sAddrExtCpy                   0      0     24
       -> osal_mem_alloc                0      0     24
       -> ZDO_ConvertOTAClusters        0      0     24
       -> osal_mem_alloc                0      0     24
       -> ZDO_ConvertOTAClusters        0      0     24
     ZDO_ParseMgmNwkDiscRsp             1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtBindRsp               1      0     18
       -> osal_mem_alloc                0      0     36
       -> sAddrExtCpy                   0      0     36
       -> sAddrExtCpy                   0      0     36
     ZDO_ParseMgmtLqiRsp                1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtNwkUpdateNotify       1      0     27
       -> osal_build_uint32             0      0     48
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
     ZDO_ParseMgmtNwkUpdateReq          1      0     10
       -> osal_build_uint32             0      0     20
     ZDO_ParseMgmtRtgRsp                1      0     14
       -> osal_mem_alloc                0      0     28
     ZDO_ParseNodeDescRsp               2      0      9
     ZDO_ParsePowerDescRsp              1      0      9
     ZDO_ParseServerDiscRsp             1      0      9
     ZDO_ParseSimpleDescBuf             1      0     22
       -> osal_mem_alloc                0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_free                 0      0     26
     ZDO_ParseSimpleDescRsp             1      0      9
       -> ZDO_ParseSimpleDescBuf        0      0     18
     ZDO_ParseUserDescRsp               1      0     17
       -> osal_mem_alloc                0      0     28
       -> osal_memcpy                   0      0     34
     ZDO_ProcessActiveEPReq             0      0     21
       -> NLME_GetShortAddr             0      0     28
       -> afNumEndPoints                0      0     28
       -> afEndPoints                   0      0     28
       -> ZDP_EPRsp                     0      0     42
     ZDO_ProcessBindUnbindReq           0      0     29
       -> sAddrExtCpy                   0      0     48
       -> NLME_GetExtAddr               0      0     48
       -> sAddrExtCmp                   0      0     48
       -> bindNumOfEntries              0      0     48
       -> APSME_BindRequest             0      0     50
       -> ZDApp_NVUpdate                0      0     48
       -> APSME_LookupNwkAddr           0      0     48
       -> ZDP_NwkAddrReq                0      0     48
       -> APSME_UnBindRequest           0      0     50
       -> ZDApp_NVUpdate                0      0     48
       -> ZDP_SendData                  0      0     58
     ZDO_ProcessDeviceAnnce             2      0     42
       -> ZDO_ParseDeviceAnnce          0      0     84
       -> nwkNeighborRemoveAllStranded
                                        0      0     84
       -> NLME_CheckNewAddrSet          0      0     84
       -> NLME_GetCoordExtAddr          0      0     84
       -> sAddrExtCmp                   0      0     84
       -> NLME_GetCoordShortAddr        0      0     84
       -> ZMacSetReq                    0      0     84
       -> NLME_GetShortAddr             4      0     84
       -> AssocGetWithExt               0      0     84
       -> AssocRemove                   0      0     84
       -> NLME_GetShortAddr             0      0     84
       -> AssocChangeNwkAddr            0      0     84
       -> nwkNeighborUpdateNwkAddr      0      0     84
       -> ZDApp_NVUpdate                0      0     84
       -> RTG_RemoveRtgEntry            0      0     84
       -> AddrMgrEntryLookupNwk         0      0     84
       -> osal_memset                   0      0     84
       -> sAddrExtCmp                   0      0     84
       -> AddrMgrExtAddrSet             0      0     84
       -> AddrMgrEntryUpdate            0      0     84
     ZDO_ProcessMatchDescReq            1      0     34
       -> NLME_IsAddressBroadcast       0      0     54
       -> ZDP_EPRsp                     0      0     68
       -> NLME_IsAddressBroadcast       0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_msg_send                 0      0     54
       -> osal_mem_free                 0      0     54
       -> ZDO_AnyClusterMatches         0      0     58
       -> ZDO_AnyClusterMatches         0      0     58
       -> osal_msg_allocate             0      0     54
       -> osal_memcpy                   0      0     60
       -> osal_memcpy                   0      0     60
       -> ZDP_EPRsp                     0      0     68
       -> HalLcdWriteScreen             0      0     54
       -> HalLcdWriteScreen             0      0     54
       -> osal_mem_free                 0      0     54
       -> osal_mem_free                 0      0     54
     ZDO_ProcessMgmtBindReq             0      0     29
       -> APSME_GetRequest              0      0     48
       -> osal_mem_alloc                0      0     48
       -> APSME_GetRequest              0      0     48
       -> ZDP_MgmtBindRsp               0      0     58
       -> osal_mem_free                 0      0     48
     ZDO_ProcessMgmtDirectJoinReq       1      0     16
       -> NLME_DirectJoinRequest        0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtLeaveReq            1      0     23
       -> AddrMgrExtAddrValid           0      0     36
       -> NLME_GetExtAddr               0      0     36
       -> sAddrExtCmp                   0      0     36
       -> NLME_LeaveReq                 0      0     36
       -> ZDP_SendData                  0      0     46
     ZDO_ProcessMgmtLqiReq              1      0     64
       -> NLME_GetRequest               0      0    118
       -> AssocCount                    0      0    118
       -> osal_mem_alloc                0      0    118
       -> osal_memset                   0      0    118
       -> AssocFindDevice               0      0    118
       -> sAddrExtCpy                   0      0    118
       -> AddrMgrEntryLookupNwk         0      0    118
       -> sAddrExtCpy                   0      0    118
       -> NLME_GetRequest               0      0    118
       -> sAddrExtCpy                   0      0    118
       -> osal_memset                   0      0    118
       -> ZDP_MgmtLqiRsp                0      0    128
       -> osal_mem_free                 0      0    118
     ZDO_ProcessMgmtNwkDiscReq          1      0     17
       -> osal_build_uint32             0      0     34
       -> NLME_NwkDiscReq2              0      0     34
       -> NLME_NwkDiscTerm              0      0     34
     ZDO_ProcessMgmtPermitJoinReq       1      0     16
       -> NLME_PermitJoiningRequest     0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtRtgReq              0      0     26
       -> NLME_GetRequest               0      0     42
       -> osal_mem_alloc                0      0     42
       -> NLME_GetRequest               0      0     42
       -> ZDP_MgmtRtgRsp                0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessNodeDescReq             0      0     14
       -> ZDP_NodeDescMsg               0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessPowerDescReq            0      0     14
       -> ZDP_PowerDescMsg              0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessServerDiscReq           0      0     14
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessSimpleDescReq           0      0     12
       -> afFindSimpleDesc              0      0     24
       -> ZDP_SimpleDescMsg             0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_ProcessUserDescReq             0      0     33
       -> osal_nv_read                  0      0     66
       -> ZDP_UserDescRsp               0      0     64
       -> ZDP_GenericRsp                0      0     66
     ZDO_ProcessUserDescSet             1      0     41
       -> osal_memcpy                   0      0     78
       -> osal_nv_write                 0      0     80
       -> ZDP_SendData                  0      0     82
     ZDO_RemoveMatchMemory              2      0     37
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    0      0     18
       -> NLME_NetworkFormationRequest
                                        0      0     36
       -> osal_start_timerEx            0      0     22
       -> NLME_StartRouterRequest       0      0     22
       -> HalLcdWriteScreen             0      0     22
     ZDO_UpdateAddrManager              2      0     13
       -> AddrMgrExtAddrSet             4      0     26
       -> AddrMgrEntryUpdate            4      0     26
     ZDO_UpdateNwkStatus                1      0     12
       -> osal_msg_find                 0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_send                 0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     ZDOBuildBuf                               52
     ZDO_EDBind                                 2
     matchED                                    2
     apsChannelMask                             4
     ZDO_Init                                  33
     ?Subroutine0                               7
     ZDO_StartDevice                          138
     ??Subroutine229_0                          4
     ?Subroutine170                             6
     ZDO_UpdateNwkStatus                      126
     ??Subroutine206_0                          5
     ?Subroutine174                             2
     ??Subroutine214_0                          7
     ?Subroutine83                              9
     ?Subroutine154                             1
     ??Subroutine216_0                          5
     ??Subroutine231_0                          5
     ?Subroutine108                             7
     ??Subroutine273_0                          6
     ZDO_CompareClusterLists                  126
     ?Subroutine118                            16
     ??Subroutine226_0                          4
     ??Subroutine233_0                          5
     ZDO_AnyClusterMatches                     81
     ?Subroutine103                             2
     ??Subroutine207_0                          6
     ZDO_ProcessNodeDescReq                    66
     ??Subroutine209_0                          5
     ?Subroutine68                             24
     ?Subroutine165                             3
     ??Subroutine210_0                         13
     ?Subroutine66                             20
     ?Subroutine205                             5
     ?Subroutine200                             7
     ?Subroutine181                            13
     ??Subroutine232_0                          5
     ??Subroutine254_0                          4
     ?Subroutine202                             5
     ??Subroutine258_0                          5
     ??Subroutine259_0                          5
     ZDO_ProcessPowerDescReq                   66
     ?Subroutine3                               2
     ??Subroutine208_0                          3
     ZDO_ProcessSimpleDescReq                 148
     ?Subroutine82                              9
     ??Subroutine238_0                          4
     ??Subroutine241_0                          7
     ?Subroutine172                             8
     ZDO_ProcessActiveEPReq                   115
     ?Subroutine69                             10
     ??Subroutine211_0                         12
     ??Subroutine212_0                          5
     ?Subroutine178                             7
     ?Subroutine134                             4
     ?Subroutine193                            12
     ??Subroutine248_0                          7
     ?Subroutine135                             3
     ??Subroutine252_0                          3
     ??Subroutine253_0                          4
     ZDO_ConvertOTAClusters                    66
     ZDO_ProcessMatchDescReq                  927
     ?Subroutine125                             7
     ??Subroutine213_0                          8
     ?Subroutine112                             4
     ?Subroutine111                            12
     ?Subroutine101                             4
     ?Subroutine177                            10
     ?Subroutine92                             28
     ?Subroutine104                             6
     ?Subroutine46                              2
     ??Subroutine222_0                          1
     ??Subroutine223_0                          5
     ??Subroutine224_0                          4
     ?Subroutine54                              8
     ?Subroutine41                              8
     ?Subroutine40                              8
     ??Subroutine242_0                          7
     ?Subroutine53                              4
     ?Subroutine160                             9
     ??Subroutine246_0                          4
     ?Subroutine17                              9
     ?Subroutine166                             4
     ?Subroutine176                             6
     ??Subroutine250_0                          8
     ?Subroutine204                             2
     ?Subroutine195                             6
     ?Subroutine161                             6
     ?Subroutine197                             7
     ?Subroutine94                             12
     ?Subroutine143                             9
     ?Subroutine1                               3
     ZDO_ProcessBindUnbindReq                 335
     ?Subroutine126                             6
     ??Subroutine215_0                          8
     ?Subroutine114                             7
     ?Subroutine74                             39
     ?Subroutine121                            23
     ?Subroutine186                             9
     ?Subroutine140                             4
     ??Subroutine245_0                          4
     ?Subroutine194                             2
     ?Subroutine148                             8
     ZDO_UpdateAddrManager                     57
     ZDO_ProcessServerDiscReq                  67
     ?Subroutine115                             4
     ??Subroutine217_0                          4
     ?Subroutine120                             4
     ?Subroutine93                              5
     ZDO_EndDeviceTimeoutCB                   225
     ?Subroutine61                              3
     ?Subroutine60                              7
     ?Subroutine167                             9
     ?Subroutine169                             1
     ??Subroutine243_0                          6
     ?Subroutine201                             8
     ??Subroutine244_0                          4
     ?Subroutine199                            11
     ??Subroutine255_0                          1
     ??Subroutine256_0                          4
     ZDO_ProcessMgmtLqiReq                    621
     ?Subroutine5                               8
     ?Subroutine150                             1
     ??Subroutine218_0                          6
     ?Subroutine149                             1
     ??Subroutine219_0                          6
     ?Subroutine145                            18
     ?Subroutine127                             1
     ??Subroutine220_0                          2
     ??Subroutine221_0                          6
     ?Subroutine44                             12
     ?Subroutine25                             25
     ?Subroutine22                              8
     ?Subroutine19                             13
     ?Subroutine191                             3
     ?Subroutine16                             16
     ?Subroutine189                            11
     ?Subroutine123                            19
     ?Subroutine110                             6
     ?Subroutine84                              3
     ??Subroutine230_0                          3
     ??Subroutine239_0                         10
     ?Subroutine139                             8
     ??Subroutine251_0                          6
     ?Subroutine157                             7
     ?Subroutine180                             7
     ??Subroutine264_0                          7
     ?Subroutine147                             1
     ??Subroutine268_0                          6
     ?Subroutine159                             9
     ZDO_ProcessMgmtNwkDiscReq                122
     ?Subroutine45                              5
     ?Subroutine162                             4
     ?Subroutine55                              9
     ??Subroutine274_0                          4
     ?Subroutine188                            10
     ?Subroutine81                             13
     ZDO_ProcessMgmtRtgReq                    308
     ?Subroutine141                             4
     ??Subroutine225_0                          5
     ZDO_ProcessMgmtBindReq                   260
     ZDO_ProcessMgmtDirectJoinReq              82
     ?Subroutine9                               5
     ?Subroutine119                             2
     ??Subroutine227_0                          9
     ZDO_ProcessMgmtLeaveReq                  167
     ?Subroutine116                             5
     ZDO_ProcessMgmtPermitJoinReq              86
     ?Subroutine56                              6
     NLME_PermitJoiningTimeout                  3
     ZDO_ProcessUserDescReq                   157
     ZDO_ProcessUserDescSet                   284
     ?Subroutine2                               3
     ?Subroutine52                              4
     ?Subroutine158                             7
     ?Subroutine100                             4
     ??Subroutine228_0                          6
     ZDO_ProcessDeviceAnnce                   406
     ZDO_BuildSimpleDescBuf                   132
     ?Subroutine109                             7
     ?Subroutine43                              9
     ?Subroutine35                             14
     ?Subroutine27                              8
     ?Subroutine155                             4
     ??Subroutine234_0                          1
     ??Subroutine235_0                         10
     ?Subroutine14                             17
     ?Subroutine175                            12
     ?Subroutine192                            10
     ?Subroutine6                               5
     ?Subroutine173                             1
     ZDO_MatchEndDeviceBind                   550
     ?Subroutine146                             6
     ??Subroutine236_0                          7
     ?Subroutine89                             10
     ?Subroutine87                              9
     ?Subroutine85                             11
     ?Subroutine78                              8
     ?Subroutine67                              3
     ??Subroutine237_0                         10
     ?Subroutine23                              7
     ?Subroutine65                              4
     ?Subroutine106                            13
     ?Subroutine99                             14
     ?Subroutine97                             14
     ?Subroutine196                             6
     ?Subroutine90                              4
     ?Subroutine79                             12
     ?Subroutine77                             13
     ?Subroutine64                             10
     ?Subroutine168                             1
     ?Subroutine48                              7
     ?Subroutine21                             18
     ?Subroutine163                             9
     ?Subroutine88                              6
     ZDO_RemoveMatchMemory                    148
     ?Subroutine62                              5
     ??Subroutine240_0                          2
     ZDO_CopyMatchInfo                        203
     ?Subroutine113                            11
     ?Subroutine102                            12
     ?Subroutine29                             38
     ?Subroutine137                             4
     ?Subroutine190                             8
     ?Subroutine132                             6
     ?Subroutine182                             4
     ZDMatchSendState                         604
     ?Subroutine7                               5
     ?Subroutine105                            13
     ?Subroutine96                             18
     ?Subroutine86                              9
     ?Subroutine80                             12
     ?Subroutine63                             34
     ?Subroutine187                             9
     ZDO_EndDeviceBindMatchTimeoutCB
                                               16
     ZDO_ParseEndDeviceBindReq                218
     ?Subroutine131                            11
     ?Subroutine95                             13
     ?Subroutine57                              3
     ??Subroutine247_0                         11
     ?Subroutine11                             11
     ??Subroutine249_0                         28
     ?Subroutine15                              9
     ?Subroutine138                             4
     ?Subroutine34                              6
     ?Subroutine151                             3
     ??Subroutine257_0                          5
     ?Subroutine203                            10
     ?Subroutine49                              4
     ?Subroutine198                             8
     ?Subroutine153                             9
     ?Subroutine107                             6
     ??Subroutine269_0                          6
     ?Subroutine26                             10
     ZDO_ParseBindUnbindReq                   113
     ?Subroutine183                             3
     ?Subroutine31                              4
     ?Subroutine156                             7
     ?Subroutine12                              2
     ??Subroutine271_0                          4
     ??Subroutine272_0                          9
     ?Subroutine59                             17
     ZDO_ParseAddrRsp                         174
     ?Subroutine37                              7
     ?Subroutine184                             7
     ?Subroutine98                             12
     ?Subroutine30                              5
     ?Subroutine144                             4
     ??Subroutine267_0                          9
     ?Subroutine128                            11
     ?Subroutine50                              8
     ZDO_ParseNodeDescRsp                     213
     ?Subroutine32                              1
     ??Subroutine260_0                          8
     ?Subroutine24                              4
     ?Subroutine152                            22
     ?Subroutine20                              6
     ?Subroutine142                             7
     ?Subroutine39                              4
     ??Subroutine261_0                          4
     ?Subroutine10                             37
     ZDO_ParsePowerDescRsp                     97
     ?Subroutine38                             16
     ZDO_ParseSimpleDescRsp                    33
     ?Subroutine4                               4
     ZDO_ParseEPListRsp                        89
     ?Subroutine129                             9
     ??Subroutine262_0                          7
     ?Subroutine28                             15
     ??Subroutine263_0                          7
     ?Subroutine124                            18
     ZDO_ParseServerDiscRsp                    53
     ??Subroutine270_0                          9
     ZDO_ParseMgmtLqiRsp                      147
     ?Subroutine8                               5
     ?Subroutine133                             4
     ?Subroutine130                             6
     ??Subroutine265_0                          4
     ?Subroutine76                             10
     ?Subroutine171                            13
     ?Subroutine73                             24
     ?Subroutine185                            15
     ?Subroutine13                             10
     ?Subroutine179                            10
     ZDO_ParseMgmNwkDiscRsp                   211
     ?Subroutine72                              4
     ??Subroutine266_0                         13
     ?Subroutine51                             10
     ?Subroutine70                              3
     ?Subroutine47                              9
     ?Subroutine18                             22
     ?Subroutine164                             5
     ?Subroutine75                             17
     ZDO_ParseMgmtRtgRsp                      155
     ZDO_ParseMgmtBindRsp                     185
     ?Subroutine58                             12
     ?Subroutine33                             17
     ZDO_ParseUserDescRsp                      92
     ?Subroutine117                             4
     ZDO_ParseSimpleDescBuf                   217
     ?Subroutine136                            10
     ?Subroutine91                              1
     ?Subroutine71                             28
     ?Subroutine36                             26
     ZDO_ParseDeviceAnnce                      52
     ZDO_ParseMgmtNwkUpdateNotify             196
     ?Subroutine42                              8
     ?Subroutine122                             5
     ZDO_ParseMgmtNwkUpdateReq                111
     ??ZDO_Init?relay                           6
     ??ZDO_StartDevice?relay                    6
     ??ZDO_UpdateNwkStatus?relay                6
     ??ZDO_CompareClusterLists?relay            6
     ??ZDO_AnyClusterMatches?relay              6
     ??ZDO_ProcessNodeDescReq?relay             6
     ??ZDO_ProcessPowerDescReq?relay            6
     ??ZDO_ProcessSimpleDescReq?relay           6
     ??ZDO_ProcessActiveEPReq?relay             6
     ??ZDO_ConvertOTAClusters?relay             6
     ??ZDO_ProcessMatchDescReq?relay            6
     ??ZDO_ProcessBindUnbindReq?relay           6
     ??ZDO_UpdateAddrManager?relay              6
     ??ZDO_ProcessServerDiscReq?relay           6
     ??ZDO_EndDeviceTimeoutCB?relay             6
     ??ZDO_ProcessMgmtLqiReq?relay              6
     ??ZDO_ProcessMgmtNwkDiscReq?relay          6
     ??ZDO_ProcessMgmtRtgReq?relay              6
     ??ZDO_ProcessMgmtBindReq?relay             6
     ??ZDO_ProcessMgmtDirectJoinReq?relay       6
     ??ZDO_ProcessMgmtLeaveReq?relay            6
     ??ZDO_ProcessMgmtPermitJoinReq?relay       6
     ??NLME_PermitJoiningTimeout?relay          6
     ??ZDO_ProcessUserDescReq?relay             6
     ??ZDO_ProcessUserDescSet?relay             6
     ??ZDO_ProcessDeviceAnnce?relay             6
     ??ZDO_BuildSimpleDescBuf?relay             6
     ??ZDO_MatchEndDeviceBind?relay             6
     ??ZDO_RemoveMatchMemory?relay              6
     ??ZDO_CopyMatchInfo?relay                  6
     ??ZDMatchSendState?relay                   6
     ??ZDO_EndDeviceBindMatchTimeoutCB?relay    6
     ??ZDO_ParseEndDeviceBindReq?relay          6
     ??ZDO_ParseBindUnbindReq?relay             6
     ??ZDO_ParseAddrRsp?relay                   6
     ??ZDO_ParseNodeDescRsp?relay               6
     ??ZDO_ParsePowerDescRsp?relay              6
     ??ZDO_ParseSimpleDescRsp?relay             6
     ??ZDO_ParseEPListRsp?relay                 6
     ??ZDO_ParseServerDiscRsp?relay             6
     ??ZDO_ParseMgmtLqiRsp?relay                6
     ??ZDO_ParseMgmNwkDiscRsp?relay             6
     ??ZDO_ParseMgmtRtgRsp?relay                6
     ??ZDO_ParseMgmtBindRsp?relay               6
     ??ZDO_ParseUserDescRsp?relay               6
     ??ZDO_ParseSimpleDescBuf?relay             6
     ??ZDO_ParseDeviceAnnce?relay               6
     ??ZDO_ParseMgmtNwkUpdateNotify?relay       6
     ??ZDO_ParseMgmtNwkUpdateReq?relay          6
     ?<Constant "StartDevice ERR">             16
     ?<Constant "MODE unknown">                13
     ?<Constant "End Device Bind">             16
     ?<Constant "Success Sent">                13
     ?<Constant "Timeout">                      8
     ?<Constant "Match Desc Req">              15
     ?<Constant "Rsp Sent">                     9
     ?<Constant "Non Matched">                 12
     __Constant_0                               4

 
 11 347 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    106 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
 11 641 bytes of CODE  memory
    102 bytes of CONST memory (+ 4 bytes shared)
     60 bytes of XDATA memory

Errors: none
Warnings: none
