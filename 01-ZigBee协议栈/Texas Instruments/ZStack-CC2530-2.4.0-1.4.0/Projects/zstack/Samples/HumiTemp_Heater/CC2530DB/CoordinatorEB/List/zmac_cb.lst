###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         11/Dec/2018  09:58:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Components\zmac\f8w\zmac_cb.c               #
#    Command line       =  -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"   #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0x1010                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\z #
#                          mac\f8w\zmac_cb.c" -D ZTOOL_P1 -D MT_TASK -D       #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬ #
#                          Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530- #
#                          2.4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heate #
#                          r\CC2530DB\CoordinatorEB\List\" -lA                #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\CoordinatorEB\List\" --diag_suppress        #
#                          Pe001,Pa010 -o "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ #
#                          \03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                 #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\CoordinatorEB #
#                          \Obj\" -e --no_code_motion --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03 #
#                          -≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\" -I          #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\Source\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥ #
#                          £”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æ #
#                          ﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\hal\target\CC2530 #
#                          EB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ #
#                          ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\mac\high_level\"  #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\mac\low_level\ #
#                          srf04\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03- #
#                          œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                     #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\mt\" -I           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\"    #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc #
#                          \" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥ #
#                          ˙¬Î\01-ZigBee–≠“È’ª\Texas                          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\" -I                   #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\services\sdata\"  #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\stack\af\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sapi\" -I   #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sec\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sys\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\zdo\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\zmac\" -I         #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz   #
#                          --require_prototypes                               #
#    List file          =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC2 #
#                          530DB\CoordinatorEB\List\zmac_cb.lst               #
#    Object file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC2 #
#                          530DB\CoordinatorEB\Obj\zmac_cb.r51                #
#                                                                             #
#                                                                             #
###############################################################################

F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2010-05-18 18:54:25 -0700 (Tue, 18 May 2010) $
      4            Revision:       $Revision: 22542 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          /********************************************************************************************************
     91           *                                               LOCALS
     92           ********************************************************************************************************/
     93          
     94          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          
     97          /* LQI Adjustment Function */
     98          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
     99          
    100          /*********************************************************************
    101           * ZMAC Function Pointers
    102           */
    103          
    104          /*
    105           * ZMac Application callback function. This function will be called
    106           * for every MAC message that is received over-the-air or generated
    107           * locally by MAC for the application.
    108           *
    109           * The callback function should return TRUE if it has handled the
    110           * MAC message and no further action should be taken with it. It
    111           * should return FALSE if it has not handled the MAC message and
    112           * normal processing should take place.
    113           *
    114           * NOTE: The processing in this function should be kept to the
    115           *       minimum.
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /*********************************************************************
    121           * ZMAC Functions
    122           */
    123          
    124          /**************************************************************************************************
    125           * @fn       MAC_CbackEvent()
    126           *
    127           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    128           *
    129           * @param    pData - pointer to macCbackEvent_t
    130           *
    131           * @return   none
    132           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    134          #ifndef MT_MAC_CB_FUNC
    135          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    136          #if !defined NONWK
    137            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 2,A
    138            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000020   F8           MOV     R0,A
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E8           MOV     A,R0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
    139            macCbackEvent_t *msgPtr;
    140          
    141            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    142             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    143             */
    144            if (tmp == 0)
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    145            {
    146              return;
    147            }
    148          
    149            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    150            if ( event == MAC_MCPS_DATA_IND )
   \   000036   740D         MOV     A,#0xd
   \   000038   65..         XRL     A,?V0 + 2
   \   00003A   7048         JNZ     ??MAC_CbackEvent_1
    151            {
    152              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00003C                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   7953         MOV     R1,#0x53
   \   000042   12....       LCALL   ??MAC_MlmeGetReq?relay
    153              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    154                  (pData->dataInd.msdu.len == 0))
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FE         XRL     A,#0xfe
   \   00004D   7003         JNZ     ??MAC_CbackEvent_2
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F4           CPL     A
   \                     ??MAC_CbackEvent_2:
   \   000052   6015         JZ      ??MAC_CbackEvent_3
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F4           CPL     A
   \   00005B   7003         JNZ     ??MAC_CbackEvent_4
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F4           CPL     A
   \                     ??MAC_CbackEvent_4:
   \   000060   6007         JZ      ??MAC_CbackEvent_3
   \   000062   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   700D         JNZ     ??MAC_CbackEvent_5
    155              {
    156                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   000069                ; Setup parameters for call to function mac_msg_deallocate
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   02....       LJMP    ??CrossCallReturnLabel_15 & 0xFFFF
    157                return;
    158              }
    159              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FE           MOV     R6,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FF           MOV     R7,A
   \   000081   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    160            }
    161            else
    162            {
    163              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   000084   7405         MOV     A,#0x5
   \   000086   65..         XRL     A,?V0 + 2
   \   000088   7014         JNZ     ??MAC_CbackEvent_7
    164              {
    165                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   12....       LCALL   ?Subroutine2 & 0xFFFF
    166              }
   \                     ??CrossCallReturnLabel_2:
   \   000095   2421         ADD     A,#0x21
   \   000097   F8           MOV     R0,A
   \   000098   E4           CLR     A
   \   000099   3400         ADDC    A,#0x0
   \   00009B   F9           MOV     R1,A
   \   00009C   802A         SJMP    ??MAC_CbackEvent_8
    167              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   00009E   7407         MOV     A,#0x7
   \   0000A0   65..         XRL     A,?V0 + 2
   \   0000A2   7030         JNZ     ??MAC_CbackEvent_9
    168              {
    169                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A4   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A7   700F         JNZ     ??MAC_CbackEvent_10
    170                {
    171                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   241B         ADD     A,#0x1b
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   801B         SJMP    ??MAC_CbackEvent_11
    172                }
    173                else
    174                {
    175                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   12....       LCALL   ?Subroutine2 & 0xFFFF
    176                }
    177              }
   \                     ??CrossCallReturnLabel_3:
   \   0000C1   75F021       MOV     B,#0x21
   \   0000C4   A4           MUL     AB
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A9F0         MOV     R1,B
   \                     ??MAC_CbackEvent_8:
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   28           ADD     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   39           ADDC    A,R1
   \                     ??MAC_CbackEvent_11:
   \   0000D3   F0           MOVX    @DPTR,A
    178          
    179              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   0000D4                ; Setup parameters for call to function osal_msg_allocate
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000DC   8A..         MOV     ?V0 + 0,R2
   \   0000DE   8B..         MOV     ?V0 + 1,R3
   \   0000E0   AE..         MOV     R6,?V0 + 0
   \   0000E2   AF..         MOV     R7,?V0 + 1
   \   0000E4   EE           MOV     A,R6
   \   0000E5   4F           ORL     A,R7
   \   0000E6   7041         JNZ     ??MAC_CbackEvent_12
    180              {
    181                // Not enough memory. If data confirm - try again
    182                if ( event == MAC_MCPS_DATA_CNF )
   \   0000E8   740C         MOV     A,#0xc
   \   0000EA   65..         XRL     A,?V0 + 2
   \   0000EC   6003         JZ      $+5
   \   0000EE   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    183                {
    184                  halIntState_t intState;
    185          
    186                  // This is not normally deallocated here because the pZMac_AppCallback()
    187                  // application may need it.
    188                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000F1   A2AF         MOV     C,0xa8.7
   \   0000F3   E4           CLR     A
   \   0000F4   33           RLC     A
   \   0000F5   F5..         MOV     ?V0 + 0,A
   \   0000F7   C2AF         CLR     0xa8.7
    189          
    190                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   0000F9                ; Setup parameters for call to function mac_msg_deallocate
   \   0000F9   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000FC   12....       LCALL   ??mac_msg_deallocate?relay
    191                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   0000FF                ; Setup parameters for call to function osal_msg_allocate
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000107   8A..         MOV     ?V0 + 4,R2
   \   000109   8B..         MOV     ?V0 + 5,R3
   \   00010B   AE..         MOV     R6,?V0 + 4
   \   00010D   AF..         MOV     R7,?V0 + 5
   \   00010F   EE           MOV     A,R6
   \   000110   4F           ORL     A,R7
   \   000111   7009         JNZ     ??MAC_CbackEvent_13
    192                  {
    193                    // Still no allocation, something is wrong
    194                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000113   E5..         MOV     A,?V0 + 0
   \   000115   A2E0         MOV     C,0xE0 /* A   */.0
   \   000117   92AF         MOV     0xa8.7,C
    195                    return;
   \   000119   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    196                  }
    197                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   00011C   E5..         MOV     A,?V0 + 0
   \   00011E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000120   92AF         MOV     0xa8.7,C
    198                  pData->dataCnf.pDataReq = NULL;
   \   000122   12....       LCALL   ?Subroutine4 & 0xFFFF
    199                }
    200                else
    201                {
    202                  // This message is dropped
    203                  return;
    204                }
    205              }
   \                     ??CrossCallReturnLabel_7:
   \   000125   E4           CLR     A
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   F0           MOVX    @DPTR,A
    206              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_12:
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   85..82       MOV     DPL,?XSP + 0
   \   00012C   85..83       MOV     DPH,?XSP + 1
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F5..         MOV     ?V0 + 0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   85....       MOV     ?V0 + 4,?V0 + 0
   \   000137   F5..         MOV     ?V0 + 5,A
   \   000139   75..00       MOV     ?V0 + 6,#0x0
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000141   85....       MOV     ?V0 + 0,?V0 + 2
   \   000144   12....       LCALL   ?Subroutine3 & 0xFFFF
    207            }
   \                     ??CrossCallReturnLabel_5:
   \   000147   FC           MOV     R4,A
   \   000148   7D00         MOV     R5,#0x0
   \   00014A   EE           MOV     A,R6
   \   00014B   FA           MOV     R2,A
   \   00014C   EF           MOV     A,R7
   \   00014D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
    208          
    209            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   000153   7405         MOV     A,#0x5
   \   000155   65..         XRL     A,?V0 + 2
   \   000157   7073         JNZ     ??MAC_CbackEvent_14
    210            {
    211              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    212          
    213              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000159   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00015C   EE           MOV     A,R6
   \   00015D   2403         ADD     A,#0x3
   \   00015F   F5..         MOV     ?V0 + 8,A
   \   000161   EF           MOV     A,R7
   \   000162   3400         ADDC    A,#0x0
   \   000164   F5..         MOV     ?V0 + 9,A
   \   000166                ; Setup parameters for call to function osal_memcpy
   \   000166   85..82       MOV     DPL,?V0 + 8
   \   000169   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016F   7C21         MOV     R4,#0x21
   \   000171   7D00         MOV     R5,#0x0
   \   000173   AA..         MOV     R2,?V0 + 0
   \   000175   AB..         MOV     R3,?V0 + 1
   \   000177   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
    214              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00017D   85..82       MOV     DPL,?V0 + 8
   \   000180   85..83       MOV     DPH,?V0 + 9
   \   000183   E5..         MOV     A,?V0 + 0
   \   000185   F0           MOVX    @DPTR,A
   \   000186   A3           INC     DPTR
   \   000187   E5..         MOV     A,?V0 + 1
   \   000189   F0           MOVX    @DPTR,A
    215              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   00018A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00018D                ; Setup parameters for call to function osal_memcpy
   \   00018D   85..82       MOV     DPL,?V0 + 0
   \   000190   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000196   8E82         MOV     DPL,R6
   \   000198   8F83         MOV     DPH,R7
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   FC           MOV     R4,A
   \   0001A4   7D00         MOV     R5,#0x0
   \   0001A6   85..82       MOV     DPL,?V0 + 8
   \   0001A9   85..83       MOV     DPH,?V0 + 9
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   2421         ADD     A,#0x21
   \   0001AF   FA           MOV     R2,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   3400         ADDC    A,#0x0
   \   0001B4   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
    216              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001BA   85..82       MOV     DPL,?V0 + 8
   \   0001BD   85..83       MOV     DPH,?V0 + 9
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   2421         ADD     A,#0x21
   \   0001C3   F8           MOV     R0,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   12....       LCALL   ?Subroutine10 & 0xFFFF
    217            }
   \                     ??CrossCallReturnLabel_18:
   \   0001C9   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    218            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0001CC   7407         MOV     A,#0x7
   \   0001CE   65..         XRL     A,?V0 + 2
   \   0001D0   6003         JZ      $+5
   \   0001D2   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    219            {
    220              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    221          
    222              if (ZMac_ScanBuf != NULL)
   \   0001D5   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F8           MOV     R0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F9           MOV     R1,A
   \   0001DD   E8           MOV     A,R0
   \   0001DE   49           ORL     A,R1
   \   0001DF   7003         JNZ     $+5
   \   0001E1   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    223              {
    224                void *pTmp = ZMac_ScanBuf;
   \   0001E4   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F5..         MOV     ?V0 + 8,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F5..         MOV     ?V0 + 9,A
    225                ZMac_ScanBuf = NULL;
   \   0001EE   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001F1   E4           CLR     A
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   F0           MOVX    @DPTR,A
    226          
    227                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0001F5   8E82         MOV     DPL,R6
   \   0001F7   8F83         MOV     DPH,R7
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   7027         JNZ     ??MAC_CbackEvent_15
    228                {
    229                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0001FE   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000201   EE           MOV     A,R6
   \   000202   240B         ADD     A,#0xb
   \   000204   F8           MOV     R0,A
   \   000205   EF           MOV     A,R7
   \   000206   12....       LCALL   ?Subroutine10 & 0xFFFF
    230                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \                     ??CrossCallReturnLabel_19:
   \   000209                ; Setup parameters for call to function osal_memcpy
   \   000209   85....       MOV     ?V0 + 4,?V0 + 8
   \   00020C   85....       MOV     ?V0 + 5,?V0 + 9
   \   00020F   78..         MOV     R0,#?V0 + 4
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000214   7C1B         MOV     R4,#0x1b
   \   000216   7D00         MOV     R5,#0x0
   \   000218   85..82       MOV     DPL,?V0 + 0
   \   00021B   85..83       MOV     DPH,?V0 + 1
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   FA           MOV     R2,A
   \   000220   A3           INC     DPTR
   \   000221   E0           MOVX    A,@DPTR
   \   000222   FB           MOV     R3,A
   \   000223   8038         SJMP    ??MAC_CbackEvent_16
    231                }
    232                else
    233                {
    234                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_15:
   \   000225   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000228   8E82         MOV     DPL,R6
   \   00022A   8F83         MOV     DPH,R7
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   E5..         MOV     A,?V0 + 0
   \   000237   F0           MOVX    @DPTR,A
   \   000238   A3           INC     DPTR
   \   000239   E5..         MOV     A,?V0 + 1
   \   00023B   F0           MOVX    @DPTR,A
    235                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   00023C                ; Setup parameters for call to function osal_memcpy
   \   00023C   88..         MOV     ?V0 + 4,R0
   \   00023E   89..         MOV     ?V0 + 5,R1
   \   000240   78..         MOV     R0,#?V0 + 4
   \   000242   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   75F021       MOV     B,#0x21
   \   000255   A4           MUL     AB
   \   000256   FC           MOV     R4,A
   \   000257   ADF0         MOV     R5,B
   \   000259   AA..         MOV     R2,?V0 + 0
   \   00025B   AB..         MOV     R3,?V0 + 1
    236                }
   \                     ??MAC_CbackEvent_16:
   \   00025D   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000260   12....       LCALL   ?DEALLOC_XSTACK8
    237          
    238                osal_mem_free(pTmp);
   \   000263                ; Setup parameters for call to function osal_mem_free
   \   000263   AA..         MOV     R2,?V0 + 8
   \   000265   AB..         MOV     R3,?V0 + 9
   \   000267   12....       LCALL   ??osal_mem_free?relay
    239              }
    240            }
    241          
    242            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_6:
   \   00026A   90....       MOV     DPTR,#pZMac_AppCallback
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   F8           MOV     R0,A
   \   00026F   A3           INC     DPTR
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F9           MOV     R1,A
   \   000272   E8           MOV     A,R0
   \   000273   49           ORL     A,R1
   \   000274   6010         JZ      ??MAC_CbackEvent_17
   \   000276                ; Setup parameters for indirect call
   \   000276   EE           MOV     A,R6
   \   000277   FA           MOV     R2,A
   \   000278   EF           MOV     A,R7
   \   000279   FB           MOV     R3,A
   \   00027A   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00027D   12....       LCALL   ?CALL_IND
   \   000280   E9           MOV     A,R1
   \   000281   6003         JZ      $+5
   \   000283   02....       LJMP    ??MAC_CbackEvent_18 & 0xFFFF
    243            {
    244              // Filter out non-zigbee packets
    245              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_17:
   \   000286   740D         MOV     A,#0xd
   \   000288   65..         XRL     A,?V0 + 2
   \   00028A   6003         JZ      $+5
   \   00028C   02....       LJMP    ??MAC_CbackEvent_19 & 0xFFFF
    246              {
    247                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    248                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    249                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00028F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000292   F8           MOV     R0,A
   \   000293   A3           INC     DPTR
   \   000294   E0           MOVX    A,@DPTR
   \   000295   F9           MOV     R1,A
   \   000296   8882         MOV     DPL,R0
   \   000298   8983         MOV     DPH,R1
   \   00029A   A3           INC     DPTR
   \   00029B   E0           MOVX    A,@DPTR
   \   00029C   54E0         ANL     A,#0xe0
   \   00029E   FA           MOV     R2,A
    250                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    251                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   00029F   8882         MOV     DPL,R0
   \   0002A1   8983         MOV     DPH,R1
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   5403         ANL     A,#0x3
   \   0002A6   C3           CLR     C
   \   0002A7   9402         SUBB    A,#0x2
   \   0002A9   4003         JC      $+5
   \   0002AB   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   0002AE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   13           RRC     A
   \   0002B3   13           RRC     A
   \   0002B4   543F         ANL     A,#0x3f
   \   0002B6   540F         ANL     A,#0xf
   \   0002B8   F8           MOV     R0,A
   \   0002B9   90....       MOV     DPTR,#_NIB + 17
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   68           XRL     A,R0
   \   0002BE   6003         JZ      $+5
   \   0002C0   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   0002C3   EA           MOV     A,R2
   \   0002C4   6003         JZ      $+5
   \   0002C6   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   0002C9   85..82       MOV     DPL,?XSP + 0
   \   0002CC   85..83       MOV     DPH,?XSP + 1
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   241A         ADD     A,#0x1a
   \   0002D2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002D5   6402         XRL     A,#0x2
   \   0002D7   6003         JZ      $+5
   \   0002D9   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
    252                {
    253                  // Drop the message
    254                  mac_msg_deallocate( (uint8 **)&pData );
    255                  return;
    256                }
    257                else
    258                {
    259                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \   0002DC   EE           MOV     A,R6
   \   0002DD   2412         ADD     A,#0x12
   \   0002DF   F8           MOV     R0,A
   \   0002E0   EF           MOV     A,R7
   \   0002E1   3400         ADDC    A,#0x0
   \   0002E3   F9           MOV     R1,A
    260                  // See if LQI needs adjustment due to frame correlation
    261                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002E4                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002E4   E8           MOV     A,R0
   \   0002E5   241C         ADD     A,#0x1c
   \   0002E7   FA           MOV     R2,A
   \   0002E8   E9           MOV     A,R1
   \   0002E9   3400         ADDC    A,#0x0
   \   0002EB   FB           MOV     R3,A
   \   0002EC   E8           MOV     A,R0
   \   0002ED   241D         ADD     A,#0x1d
   \   0002EF   F582         MOV     DPL,A
   \   0002F1   E9           MOV     A,R1
   \   0002F2   12....       LCALL   ?Subroutine11 & 0xFFFF
    262          
    263                  // Look for broadcast message that has a radius of greater 1
    264                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    265                         && (pData->dataInd.msdu.p[6] > 1) )
   \                     ??CrossCallReturnLabel_20:
   \   0002F5   85..82       MOV     DPL,?XSP + 0
   \   0002F8   85..83       MOV     DPH,?XSP + 1
   \   0002FB   E0           MOVX    A,@DPTR
   \   0002FC   241B         ADD     A,#0x1b
   \   0002FE   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000301   F4           CPL     A
   \   000302   7003         JNZ     ??MAC_CbackEvent_20
   \   000304   A3           INC     DPTR
   \   000305   E0           MOVX    A,@DPTR
   \   000306   F4           CPL     A
   \                     ??MAC_CbackEvent_20:
   \   000307   7035         JNZ     ??CrossCallReturnLabel_21
   \   000309   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00030C   A3           INC     DPTR
   \   00030D   A3           INC     DPTR
   \   00030E   A3           INC     DPTR
   \   00030F   A3           INC     DPTR
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   E0           MOVX    A,@DPTR
   \   000313   C3           CLR     C
   \   000314   9402         SUBB    A,#0x2
   \   000316   4026         JC      ??CrossCallReturnLabel_21
    266                  {
    267                    // Send the messsage to a special broadcast queue
    268                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   000318                ; Setup parameters for call to function nwk_broadcastSend
   \   000318   EE           MOV     A,R6
   \   000319   FA           MOV     R2,A
   \   00031A   EF           MOV     A,R7
   \   00031B   FB           MOV     R3,A
   \   00031C   12....       LCALL   ??nwk_broadcastSend?relay
   \   00031F   E9           MOV     A,R1
   \   000320   6003         JZ      $+5
   \   000322   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000325   802F         SJMP    ??MAC_CbackEvent_0
    269                    {
    270                      // Drop the message, too many broadcast messages to process
    271                      mac_msg_deallocate( (uint8 **)&pData );
    272                    }
    273                    return;
    274                  }
    275                }
    276              }
    277              else if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_19:
   \   000327   740C         MOV     A,#0xc
   \   000329   65..         XRL     A,?V0 + 2
   \   00032B   7011         JNZ     ??CrossCallReturnLabel_21
    278              {
    279                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    280                // See if LQI needs adjustment due to frame correlation
    281                ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   00032D                ; Setup parameters for call to function ZMacLqiAdjust
   \   00032D   EE           MOV     A,R6
   \   00032E   240C         ADD     A,#0xc
   \   000330   FA           MOV     R2,A
   \   000331   EF           MOV     A,R7
   \   000332   3400         ADDC    A,#0x0
   \   000334   FB           MOV     R3,A
   \   000335   EE           MOV     A,R6
   \   000336   240D         ADD     A,#0xd
   \   000338   F582         MOV     DPL,A
   \   00033A   EF           MOV     A,R7
   \   00033B   12....       LCALL   ?Subroutine11 & 0xFFFF
    282              }
    283          
    284              // Application hasn't already processed this message. Send it to NWK task.
    285              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??CrossCallReturnLabel_21:
   \   00033E                ; Setup parameters for call to function osal_msg_send
   \   00033E   EE           MOV     A,R6
   \   00033F   FA           MOV     R2,A
   \   000340   EF           MOV     A,R7
   \   000341   FB           MOV     R3,A
   \   000342   90....       MOV     DPTR,#NWK_TaskID
   \   000345   E0           MOVX    A,@DPTR
   \   000346   F9           MOV     R1,A
   \   000347   12....       LCALL   ??osal_msg_send?relay
    286            }
    287          
    288            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_18:
   \   00034A   740C         MOV     A,#0xc
   \   00034C   65..         XRL     A,?V0 + 2
   \   00034E   7006         JNZ     ??MAC_CbackEvent_0
    289            {
    290              // If the application needs 'pDataReq' then we cannot free it here.
    291              // The application must free it after using it. Note that 'pDataReq'
    292              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    293          
    294              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000350                ; Setup parameters for call to function mac_msg_deallocate
   \   000350   12....       LCALL   ?Subroutine8 & 0xFFFF
    295            }
   \                     ??CrossCallReturnLabel_15:
   \   000353   12....       LCALL   ??mac_msg_deallocate?relay
   \                     ??MAC_CbackEvent_0:
   \   000356   7404         MOV     A,#0x4
   \   000358   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035B   7F0A         MOV     R7,#0xa
   \   00035D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000360                REQUIRE _A_IEN0
    296          #endif
    297          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EE           MOV     A,R6
   \   000001   2409         ADD     A,#0x9
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??ZMacLqiAdjust?relay
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F5..         MOV     ?V0 + 4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 5,A
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2403         ADD     A,#0x3
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_msg_allocate?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007                REQUIRE ??Subroutine19_0
   \   000007                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine20_0
   \   000001                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine21_0
   \   000001                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000006   22           RET
    298          #else  // ifdef MT_MAC_CB_FUNC
    299          {
    300            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    301            switch (pData->hdr.event)
    302            {
    303              case MAC_MLME_ASSOCIATE_IND:
    304                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    305                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    306                break;
    307          
    308              case MAC_MLME_ASSOCIATE_CNF:
    309                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    310                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    311                break;
    312          
    313              case MAC_MLME_DISASSOCIATE_IND:
    314                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    315                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    316                break;
    317          
    318              case MAC_MLME_DISASSOCIATE_CNF:
    319                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    320                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    321                break;
    322          
    323              case MAC_MLME_BEACON_NOTIFY_IND:
    324                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    325                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    326                break;
    327          
    328              case MAC_MLME_ORPHAN_IND:
    329                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    330                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    331                break;
    332          
    333              case MAC_MLME_SCAN_CNF:
    334                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    335                {
    336                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    337                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    338                }
    339          
    340                if (ZMac_ScanBuf != NULL)
    341                {
    342                  void *pTmp = ZMac_ScanBuf;
    343                  ZMac_ScanBuf = NULL;
    344                  osal_mem_free(pTmp);
    345                }
    346                break;
    347          
    348              case MAC_MLME_START_CNF:
    349                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    350                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    351                break;
    352          
    353              case MAC_MLME_SYNC_LOSS_IND:
    354                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    355                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    356                break;
    357          
    358              case MAC_MLME_POLL_CNF:
    359                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    360                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    361                break;
    362          
    363              case MAC_MLME_COMM_STATUS_IND:
    364                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    365                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    366                break;
    367          
    368              case MAC_MCPS_DATA_CNF:
    369                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    370          
    371                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    372                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    373                break;
    374          
    375              case MAC_MCPS_DATA_IND:
    376                  {
    377                    /*
    378                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    379                       buffer and re-organize the contents into ZMAC format.
    380                    */
    381                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    382                    uint8 event, status, len, *msdu;
    383          
    384                    /* Store parameters */
    385                    event = pData->hdr.event;
    386                    status = pData->hdr.status;
    387                    len = pData->dataInd.msdu.len;
    388                    msdu = pData->dataInd.msdu.p;
    389          
    390                    /* Copy header */
    391                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    392          
    393                    /* Security - set to zero for now*/
    394                    pDataInd->Sec.SecurityLevel = false;
    395          
    396                    /* Restore parameters */
    397                    pDataInd->hdr.Status = status;
    398                    pDataInd->hdr.Event = event;
    399                    pDataInd->msduLength = len;
    400          
    401                    if (len)
    402                      pDataInd->msdu = msdu;
    403                    else
    404                      pDataInd->msdu = NULL;
    405          
    406                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    407                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    408          
    409                    /* free buffer */
    410                    mac_msg_deallocate( (uint8 **)&pData );
    411                  }
    412                  break;
    413          
    414              case MAC_MCPS_PURGE_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    416                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    417                break;
    418          
    419              default:
    420                break;
    421            }
    422          }
    423          #endif
    424          
    425          /********************************************************************************************************
    426           * @fn      MAC_CbackCheckPending
    427           *
    428           * @brief   Return number of pending indirect msg
    429           *
    430           * @param   None
    431           *
    432           * @return  Number of indirect msg holding
    433           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    435          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    436          #if !defined (NONWK)
    437            if ( ZSTACK_ROUTER_BUILD )
    438            {
    439              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL   ??nwkDB_ReturnIndirectHoldingCnt?relay
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
    440            }
    441            else
    442            {
    443              return (0);
    444            }
    445          #else
    446            return (0);
    447          #endif
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    449          
    450          /********************************************************************************************************
    451           * @fn      ZMacLqiAdjustMode
    452           *
    453           * @brief   Sets/return LQI adjust mode
    454           *
    455           * @param   mode - LQI_ADJ_GET = return current mode only
    456           *                 LQI_ADJ_OFF = disable LQI adjusts
    457           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    458           *
    459           * @return  current LQI adjust mode
    460           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    462          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    463            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   6005         JZ      ??ZMacLqiAdjustMode_0
    464            {
    465              lqiAdjMode = mode;
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#lqiAdjMode
   \   00000F   F0           MOVX    @DPTR,A
    466            }
    467            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV     DPTR,#lqiAdjMode
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   80..         SJMP    ?Subroutine0
    468          }
    469          
    470          /********************************************************************************************************
    471           * @fn      ZMacLqiAdjust
    472           *
    473           * @brief   Adjust LQI according to correlation value
    474           *
    475           * @notes - the IEEE 802.15.4 specification provides some general statements on
    476           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    477           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    478           *          802.15.4 signals detectable by the receiver, and LQ values should be
    479           *          uniformly distributed between these two limits." Section E.2.3: "The
    480           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    481           *          received packet. When energy level and SNR information are combined,
    482           *          they can indicate whether a corrupt packet resulted from low signal
    483           *          strength or from high signal strength plus interference."
    484           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    485           *          packet correlation value (related to SNR) to scale incoming LQI value
    486           *          (related to signal strength) to 'derate' noisy packets.
    487           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    488           *          implement their own proprietary LQI adjustment algorithm.
    489           *
    490           * @param   corr - packet correlation value
    491           * @param   lqi  - ptr to link quality (scaled rssi)
    492           *
    493           * @return  *lqi - adjusted link quality
    494           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    496          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    497            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV     DPTR,#lqiAdjMode
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6054         JZ      ??ZMacLqiAdjust_0
    498            {
    499              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
    500          
    501              // Keep correlation within theoretical limits
    502              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9432         SUBB    A,#0x32
   \   00001D   5004         JNC     ??ZMacLqiAdjust_1
    503              {
    504                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV     R6,#0x32
   \   000021   8008         SJMP    ??ZMacLqiAdjust_2
    505              }
    506              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   946F         SUBB    A,#0x6f
   \   000027   4002         JC      ??ZMacLqiAdjust_2
    507              {
    508                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV     R6,#0x6e
    509              }
    510          
    511              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV     DPTR,#lqiAdjMode
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   7022         JNZ     ??ZMacLqiAdjust_3
    512              {
    513                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    514                           which is computed from the incoming correlation value between
    515                           theorectical minimum/maximum values. This is a very simple way
    516                           of 'derating' the incoming LQI as correlation value drops. */
    517                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   8E..         MOV     ?V0 + 0,R6
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   24CE         ADD     A,#-0x32
   \   000039   F5..         MOV     ?V0 + 0,A
   \   00003B   E4           CLR     A
   \   00003C   34FF         ADDC    A,#-0x1
   \   00003E   F5..         MOV     ?V0 + 1,A
   \   000040   E8           MOV     A,R0
   \   000041   85..F0       MOV     B,?V0 + 0
   \   000044   A4           MUL     AB
   \   000045   C8           XCH     A,R0
   \   000046   AAF0         MOV     R2,B
   \   000048   85..F0       MOV     B,?V0 + 1
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   F9           MOV     R1,A
   \   00004E   7A3C         MOV     R2,#0x3c
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ?US_DIV_MOD
    518              }
    519              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    520              {
    521                /* MODE2 - location for developer to implement a proprietary algorithm */
    522              }
    523          
    524              // Replace incoming LQI with scaled value
    525              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000055   C3           CLR     C
   \   000056   E9           MOV     A,R1
   \   000057   9401         SUBB    A,#0x1
   \   000059   4004         JC      ??ZMacLqiAdjust_4
   \   00005B   74FF         MOV     A,#-0x1
   \   00005D   8001         SJMP    ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005F   E8           MOV     A,R0
   \                     ??ZMacLqiAdjust_5:
   \   000060   8C82         MOV     DPL,R4
   \   000062   8D83         MOV     DPH,R5
   \   000064   F0           MOVX    @DPTR,A
    526            }
    527          }
   \                     ??ZMacLqiAdjust_0:
   \   000065   7F02         MOV     R7,#0x2
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackCheckPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacLqiAdjustMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacLqiAdjust?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MAC_CbackCheckPending              2      0      0
       -> nwkDB_ReturnIndirectHoldingCnt
                                        4      0      0
     MAC_CbackEvent                     0      0     25
       -> MAC_MlmeGetReq                0      0     44
       -> mac_msg_deallocate            0      0     44
       -> osal_msg_allocate             0      0     44
       -> mac_msg_deallocate            0      0     44
       -> osal_msg_allocate             0      0     44
       -> osal_memcpy                   0      0     50
       -> osal_memcpy                   0      0     50
       -> osal_memcpy                   0      0     50
       -> osal_memcpy                   0      0     50
       -> osal_memcpy                   0      0     50
       -> osal_mem_free                 0      0     44
       -> ZMacLqiAdjust                 0      0     44
       -> nwk_broadcastSend             0      0     44
       -> ZMacLqiAdjust                 0      0     44
       -> osal_msg_send                 0      0     44
       -> mac_msg_deallocate            0      0     44
     ZMacLqiAdjust                      1      0     32
     ZMacLqiAdjustMode                  2      0      0


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_IEN0                          1
     zmacCBSizeTable                 17
     lqiAdjMode                       1
     pZMac_AppCallback                2
     MAC_CbackEvent                 864
     ?Subroutine14                   11
     ?Subroutine13                   11
     ?Subroutine12                    1
     ??Subroutine18_0                 6
     ?Subroutine11                   10
     ?Subroutine10                   15
     ?Subroutine9                    12
     ?Subroutine8                    16
     ?Subroutine7                     9
     ?Subroutine6                    12
     ?Subroutine5                     4
     ?Subroutine15                    7
     ?Subroutine4                     7
     ?Subroutine16                    4
     ?Subroutine17                    7
     ??Subroutine19_0                 1
     ??Subroutine20_0                 1
     ??Subroutine21_0                 6
     ?Subroutine3                    15
     ?Subroutine2                    13
     ?Subroutine1                     7
     MAC_CbackCheckPending            7
     ?Subroutine0                     7
     ZMacLqiAdjustMode               23
     ZMacLqiAdjust                  106
     ??MAC_CbackEvent?relay           6
     ??MAC_CbackCheckPending?relay    6
     ??ZMacLqiAdjustMode?relay        6
     ??ZMacLqiAdjust?relay            6

 
 1 182 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
 1 223 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     3 bytes of XDATA memory

Errors: none
Warnings: none
