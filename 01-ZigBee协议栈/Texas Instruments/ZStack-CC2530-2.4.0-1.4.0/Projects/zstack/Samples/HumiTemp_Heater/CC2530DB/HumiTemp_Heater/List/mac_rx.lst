###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         11/Dec/2018  09:57:04 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Components\mac\low_level\srf04\mac_rx.c     #
#    Command line       =  -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1010                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03- #
#                          ≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas         #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\m #
#                          ac\low_level\srf04\mac_rx.c" -D NWK_AUTO_POLL -D   #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC        #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\HumiTemp_Heater\List\" -lA                  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\HumiTemp_Heater\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ #
#                          \03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                 #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\HumiTemp_Heat #
#                          er\Obj\" -e --no_code_motion --debug --core=plain  #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03 #
#                          -≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\" -I          #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\Source\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥ #
#                          £”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æ #
#                          ﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\hal\target\CC2530 #
#                          EB\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ #
#                          ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                        #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\" -I                      #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\mac\high_level\"  #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\mac\low_level\ #
#                          srf04\" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03- #
#                          œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas                     #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\mt\" -I           #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\"    #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc #
#                          \" -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥ #
#                          ˙¬Î\01-ZigBee–≠“È’ª\Texas                          #
#                          Instruments\ZStack-CC2530-2.4.0-1.4.0\Projects\zst #
#                          ack\Samples\HumiTemp_Heater\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\" -I                   #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\services\sdata\"  #
#                          -I "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î #
#                          \01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2 #
#                          .4.0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater #
#                          \CC2530DB\..\..\..\..\..\Components\stack\af\" -I  #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sapi\" -I   #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sec\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\sys\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\stack\zdo\" -I    #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\zmac\" -I         #
#                          "F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01 #
#                          -ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4. #
#                          0-1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC #
#                          2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz   #
#                          --require_prototypes                               #
#    List file          =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC2 #
#                          530DB\HumiTemp_Heater\List\mac_rx.lst              #
#    Object file        =  F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01- #
#                          ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0 #
#                          -1.4.0\Projects\zstack\Samples\HumiTemp_Heater\CC2 #
#                          530DB\HumiTemp_Heater\Obj\mac_rx.r51               #
#                                                                             #
#                                                                             #
###############################################################################

F:\¥ÛÀƒ\01Œ¬ “¥Û≈Ô◊ ¡œ\03-≥£”√π§æﬂ\03-œµÕ≥¥˙¬Î\01-ZigBee–≠“È’ª\Texas Instruments\ZStack-CC2530-2.4.0-1.4.0\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* high-level */
     50          #include "mac_high_level.h"
     51          #include "mac_spec.h"
     52          
     53          /* exported low-level */
     54          #include "mac_low_level.h"
     55          
     56          /* low-level specific */
     57          #include "mac_rx.h"
     58          #include "mac_tx.h"
     59          #include "mac_rx_onoff.h"
     60          #include "mac_radio.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     64          #include "mac_autopend.h"
     65          
     66          /* debug */
     67          #include "mac_assert.h"
     68          
     69          
     70          /* ------------------------------------------------------------------------------------------------
     71           *                                            Defines
     72           * ------------------------------------------------------------------------------------------------
     73           */
     74          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     75          
     76          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     77          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     78                                             MAC_FCF_FIELD_LEN      +  \
     79                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     80                                             MAC_FCS_FIELD_LEN)
     81          
     82          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     83          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     84          
     85          /* addressing mode reserved value */
     86          #define ADDR_MODE_RESERVERED  1
     87          
     88          /* length of command frame identifier */
     89          #define CMD_FRAME_ID_LEN      1
     90          
     91          /* packet size mask is equal to the maximum value */
     92          #define PHY_PACKET_SIZE_MASK  0x7F
     93          
     94          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
     95          #define PROMISCUOUS_MODE_OFF  0x00
     96          
     97          /* bit of proprietary FCS format that indicates if the CRC is OK */
     98          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
     99          
    100          /* dummy length value for unused entry in lookup table */
    101          #define DUMMY_LEN   0xBE
    102          
    103          /* value for rxThresholdIntState */
    104          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    105          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    106          #define RX_THRESHOLD_INT_STATE_RESET      2
    107          
    108          
    109          /* ------------------------------------------------------------------------------------------------
    110           *                                             Macros
    111           * ------------------------------------------------------------------------------------------------
    112           */
    113          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    114          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    115          
    116          /*
    117           *  Macro for encoding frame control information into internal flags format.
    118           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    119           *  format *or* the specification changes, this macro will need to be modified.
    120           */
    121          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    122          
    123          /*
    124           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    125           *  the same length as the original and includes:
    126           *    1) the RSSI value
    127           *    2) the average correlation value (used for LQI)
    128           *    3) a CRC passed bit
    129           *
    130           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    131           */
    132          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    133          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    134          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    135          
    136          
    137          /* ------------------------------------------------------------------------------------------------
    138           *                                       Global Variables
    139           * ------------------------------------------------------------------------------------------------
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          
    146          /* ------------------------------------------------------------------------------------------------
    147           *                                       Local Constants
    148           * ------------------------------------------------------------------------------------------------
    149           */

   \                                 In  segment CODE_C, align 1
    150          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    151          {
    152            0,                                                /* no address */
    153            DUMMY_LEN,                                        /* reserved */
    154            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    155            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    156          };
    157          
    158          
    159          /* ------------------------------------------------------------------------------------------------
    160           *                                       Local Prototypes
    161           * ------------------------------------------------------------------------------------------------
    162           */
    163          static void rxHaltCleanupFinalStep(void);
    164          
    165          static void rxStartIsr(void);
    166          static void rxAddrIsr(void);
    167          static void rxPayloadIsr(void);
    168          static void rxDiscardIsr(void);
    169          static void rxFcsIsr(void);
    170          
    171          static void rxPrepPayload(void);
    172          static void rxDiscardFrame(void);
    173          static void rxDone(void);
    174          static void rxPostRxUpdates(void);
    175          
    176          
    177          /* ------------------------------------------------------------------------------------------------
    178           *                                         Local Variables
    179           * ------------------------------------------------------------------------------------------------
    180           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          
    194          #ifdef PACKET_FILTER_STATS
    195            uint32      rxCrcFailure = 0;
    196            uint32      rxCrcSuccess = 0;
    197          #endif /* PACKET_FILTER_STATS */
    198          
    199          #ifdef CC2591_COMPRESSION_WORKAROUND
    200            void macRxResetRssi(void);
    201          #endif
    202          
    203          /**************************************************************************************************
    204           * @fn          macRxInit
    205           *
    206           * @brief       Initialize receive variable states.
    207           *
    208           * @param       none
    209           *
    210           * @return      none
    211           **************************************************************************************************
    212           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    214          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    215            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    216            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX    @DPTR,A
    217            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV     DPTR,#pRxBuf
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    218            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   12....       LCALL   ?Subroutine4 & 0xFFFF
    219            pFuncRxState         = &rxStartIsr;
    220            macRxOutgoingAckFlag = 0;
   \                     ??CrossCallReturnLabel_2:
   \   000019   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    221            rxIsrActiveFlag      = 0;
   \   00001E   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000021   F0           MOVX    @DPTR,A
    222            rxResetFlag          = 0;
   \   000022   90....       MOV     DPTR,#rxResetFlag
   \   000025   F0           MOVX    @DPTR,A
    223            rxFifoOverflowCount  = 0;
   \   000026   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000029   02....       LJMP    ?Subroutine0 & 0xFFFF
    224          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pFuncRxState
   \   000004   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine28_0
   \   000001                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    225          
    226          
    227          /**************************************************************************************************
    228           * @fn          macRxRadioPowerUpInit
    229           *
    230           * @brief       Initialization for after radio first powers up.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           **************************************************************************************************
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    238          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            /* set threshold at initial value */
    240            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   12....       LCALL   ?Subroutine7 & 0xFFFF
    241          
    242            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    243            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \                     ??CrossCallReturnLabel_6:
   \   00000C   75E9FB       MOV     0xe9,#-0x5
   \   00000F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000011   92AF         MOV     0xa8.7,C
    244          
    245            /* enable threshold interrupts */
    246            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   000013   9061A3       MOV     DPTR,#0x61a3
   \   000016   E0           MOVX    A,@DPTR
   \   000017   D2E2         SETB    0xE0 /* A   */.2
   \   000019   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE S1CON
   \   00001C                REQUIRE RFIRQF0
    247          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5A8         MOV     A,0xa8
   \   000003   C2AF         CLR     0xa8.7
   \   000005   759B00       MOV     0x9b,#0x0
   \   000008   22           RET
    248          
    249          
    250          /**************************************************************************************************
    251           * @fn          macRxTxReset
    252           *
    253           * @brief       Reset the receive state.
    254           *
    255           * @param       none
    256           *
    257           * @return      none
    258           **************************************************************************************************
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    261          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    262            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    263            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   ??macRxHardDisable?relay
    264          
    265            /*
    266             *   Note : transmit does not require any reset logic
    267             *          beyond what macRxHardDisable() provides.
    268             */
    269          
    270            /* restore deault filter mode to off */
    271            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
    272          
    273            /* return promiscuous mode to default off state */
    274            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??macRxPromiscuousMode?relay
    275          }
   \   000010   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    276          
    277          
    278          /**************************************************************************************************
    279           * @fn          macRxHaltCleanup
    280           *
    281           * @brief       Cleanup up the receive logic after receiver is forced off.
    282           *
    283           * @param       none
    284           *
    285           * @return      none
    286           **************************************************************************************************
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    291            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??CrossCallReturnLabel_35
    292            {
    293              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   ?Subroutine19 & 0xFFFF
    294              rxResetFlag = 0;
    295            }
    296          }
   \                     ??CrossCallReturnLabel_35:
   \   000013   02....       LJMP    ??Subroutine28_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??rxHaltCleanupFinalStep?relay
   \   000003   90....       MOV     DPTR,#rxResetFlag
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    297          
    298          
    299          /*=================================================================================================
    300           * @fn          rxHaltCleanupFinalStep
    301           *
    302           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    303           *
    304           * @param       none
    305           *
    306           * @return      none
    307           *=================================================================================================
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    311            /* cancel any upcoming ACK transmit complete callback */
    312            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV     DPTR,#0x61a4
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C2E0         CLR     0xE0 /* A   */.0
   \   00000A   F0           MOVX    @DPTR,A
    313          
    314            /* set start of frame threshold */
    315            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV     DPTR,#0x6194
   \   00000E   7405         MOV     A,#0x5
   \   000010   F0           MOVX    @DPTR,A
    316          
    317            /* flush the receive FIFO */
    318            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
    319          
    320            /* clear any receive interrupt that happened to squeak through */
    321            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   E5A8         MOV     A,0xa8
   \   000019   C2AF         CLR     0xa8.7
   \   00001B   759B00       MOV     0x9b,#0x0
   \   00001E   75E9FB       MOV     0xe9,#-0x5
   \   000021   A2E7         MOV     C,0xE0 /* A   */.7
   \   000023   92AF         MOV     0xa8.7,C
    322          
    323            /* if data buffer has been allocated, free it */
    324            if (pRxBuf != NULL)
   \   000025   90....       MOV     DPTR,#pRxBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6007         JZ      ??rxHaltCleanupFinalStep_0
    325            {
    326              MEM_FREE((uint8 **)&pRxBuf);
   \   000031                ; Setup parameters for call to function macDataRxMemFree
   \   000031   7A..         MOV     R2,#pRxBuf & 0xff
   \   000033   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   000035   12....       LCALL   ??macDataRxMemFree?relay
    327            }
    328            pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \                     ??rxHaltCleanupFinalStep_0:
   \   000038   90....       MOV     DPTR,#pRxBuf
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine4 & 0xFFFF
    329          
    330            pFuncRxState = &rxStartIsr;
    331          
    332            /* if receive was active, perform the post receive updates */
    333            if (macRxActive || macRxOutgoingAckFlag)
   \                     ??CrossCallReturnLabel_3:
   \   000041   90....       MOV     DPTR,#macRxActive
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   000047   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   600C         JZ      ??rxHaltCleanupFinalStep_2
    334            {
    335              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   00004D   90....       MOV     DPTR,#macRxActive
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
    336              macRxOutgoingAckFlag = 0;
   \   000052   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000055   F0           MOVX    @DPTR,A
    337          
    338              rxPostRxUpdates();
   \   000056                ; Setup parameters for call to function rxPostRxUpdates
   \   000056   12....       LCALL   ??rxPostRxUpdates?relay
    339            }
    340          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   000059   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   \   00005C                REQUIRE RFST
   \   00005C                REQUIRE _A_IEN0
   \   00005C                REQUIRE S1CON
   \   00005C                REQUIRE RFIRQF0
    341          
    342          
    343          /**************************************************************************************************
    344           * @fn          macRxThresholdIsr
    345           *
    346           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    347           *              It implements a state machine for receiving a packet.
    348           *
    349           * @param       none
    350           *
    351           * @return      none
    352           **************************************************************************************************
    353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    355          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    356            /* if currently reseting, do not execute receive ISR logic */
    357            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   701D         JNZ     ??CrossCallReturnLabel_36
    358            {
    359              return;
    360            }
    361          
    362            /*
    363             *  Call the function that handles the current receive state.
    364             *  A flag is set for the duration of the call to indicate
    365             *  the ISR is executing.  This is necessary for the reset
    366             *  logic so it does not perform a reset in the middle of
    367             *  executing the ISR.
    368             */
    369            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    370            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000016   12....       LCALL   ?CALL_IND
    371            rxIsrActiveFlag = 0;
   \   000019   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    372          
    373            /* if a reset occurred during the ISR, peform cleanup here */
    374            if (rxResetFlag)
   \   00001E   90....       MOV     DPTR,#rxResetFlag
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6003         JZ      ??CrossCallReturnLabel_36
    375            {
    376              rxHaltCleanupFinalStep();
   \   000024                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000024   12....       LCALL   ?Subroutine19 & 0xFFFF
    377              rxResetFlag = 0;
    378            }
   \                     ??CrossCallReturnLabel_36:
   \   000027   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    380          
    381          
    382          /*=================================================================================================
    383           * @fn          rxStartIsr
    384           *
    385           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    386           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    387           *              allocating a buffer.
    388           *
    389           * @param       none
    390           *
    391           * @return      none
    392           *=================================================================================================
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          static void rxStartIsr(void)
   \                     rxStartIsr:
    395          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    396            uint8  addrLen;
    397            uint8  ackWithPending;
    398            uint8  dstAddrMode;
    399            uint8  srcAddrMode;
    400          
    401            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      ??rxStartIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    402          
    403            /* indicate rx is active */
    404            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   7481         MOV     A,#-0x7f
   \   000018   F0           MOVX    @DPTR,A
    405          
    406            /*
    407             *  For bullet proof functionality, need to see if the receiver was just turned off.
    408             *  The logic to request turning off the receiver, disables interrupts and then checks
    409             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    410             *
    411             *  There is a small hole though.  It's possible to attempt turning off the receiver
    412             *  in the window from when the receive interrupt fires and the point where macRxActive
    413             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    414             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    415             *  in the RX fifo and the receive is simply aborted.
    416             *
    417             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    418             *  the receiver will just be off at this point after a hard disable.  The check described
    419             *  above will account for this case too.  However, if a hard disable were immediately
    420             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    421             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    422             */
    423            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   000019   90....       MOV     DPTR,#macRxOnFlag
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   600D         JZ      ??rxStartIsr_1
   \   00001F   906193       MOV     DPTR,#0x6193
   \   000022   E0           MOVX    A,@DPTR
   \   000023   A2E7         MOV     C,0xE0 /* A   */.7
   \   000025   4010         JC      ??rxStartIsr_2
   \   000027   E0           MOVX    A,@DPTR
   \   000028   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002A   400B         JC      ??rxStartIsr_2
    424            {
    425              /* reset active flag */
    426              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002C   90....       MOV     DPTR,#macRxActive
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
    427          
    428              /*
    429               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    430               *  the tiny, tiny window when macRxActive was not zero.
    431               */
    432              rxPostRxUpdates();
   \   000031                ; Setup parameters for call to function rxPostRxUpdates
   \   000031   12....       LCALL   ??rxPostRxUpdates?relay
    433          
    434              /* return immediately from here */
    435              return;
   \   000034   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    436            }
    437          
    438            /*
    439             *  If interrupts are held off for too long it's possible the previous "transmit done"
    440             *  callback is pending.  If this is the case, it needs to be completed before
    441             *  continuing with the receive logic.
    442             */
    443            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   000037                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   000037   12....       LCALL   ??macCspForceTxDoneIfPending?relay
    444          
    445            /*
    446             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    447             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    448             *  That callback execute receive cleanup logic that will run at the completion
    449             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    450             */
    451            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003A   12....       LCALL   ?Subroutine13 & 0xFFFF
    452            macRxOutgoingAckFlag = 0;
    453          
    454            /*
    455             *  Make a module-local copy of macRxFilter.  This prevents the selected
    456             *  filter from changing in the middle of a receive.
    457             */
    458            rxFilter = macRxFilter;
   \                     ??CrossCallReturnLabel_18:
   \   00003D   90....       MOV     DPTR,#macRxFilter
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#rxFilter
   \   000044   F0           MOVX    @DPTR,A
    459          
    460            /*-------------------------------------------------------------------------------
    461             *  Read initial frame information from FIFO.
    462             *
    463             *   This code is not triggered until the following are in the RX FIFO:
    464             *     frame length          - one byte containing length of MAC frame (excludes this field)
    465             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    466             *     sequence number       - one byte unique sequence identifier
    467             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    468             *                             if so, the frame can be verified and responded to immediately,
    469             *                             if not an ACK, these bytes will be processed normally
    470             */
    471          
    472            /* read frame length, frame control field, and sequence number from FIFO */
    473            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000045                ; Setup parameters for call to function macMemReadRxFifo
   \   000045   7904         MOV     R1,#0x4
   \   000047   7A..         MOV     R2,#rxBuf & 0xff
   \   000049   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00004B   12....       LCALL   ??macMemReadRxFifo?relay
    474          
    475            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    476            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00004E   90....       MOV     DPTR,#rxBuf
   \   000051   E0           MOVX    A,@DPTR
   \   000052   547F         ANL     A,#0x7f
   \   000054   24FD         ADD     A,#-0x3
   \   000056   90....       MOV     DPTR,#rxUnreadLen
   \   000059   F0           MOVX    @DPTR,A
    477          
    478            /*
    479             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    480             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    481             *  the entire receive buffer is flushed.
    482             *
    483             *  In the case that this workaround is not needed, an assert is used to make sure the
    484             *  receive length field is not corrupted.  This is important because a corrupted receive
    485             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    486             */
    487            if (macChipVersion == REV_A)
   \   00005A   90....       MOV     DPTR,#macChipVersion
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   90....       MOV     DPTR,#rxUnreadLen
   \   000061   701D         JNZ     ??rxStartIsr_4
    488            {
    489              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    490                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   947D         SUBB    A,#0x7d
   \   000067   500B         JNC     ??rxStartIsr_5
   \   000069   90....       MOV     DPTR,#rxBuf + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   5407         ANL     A,#0x7
   \   00006F   C3           CLR     C
   \   000070   9404         SUBB    A,#0x4
   \   000072   4015         JC      ??rxStartIsr_6
    491              {
    492                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_5:
   \   000074   75E1ED       MOV     0xe1,#-0x13
   \   000077   75E1ED       MOV     0xe1,#-0x13
    493                rxDone();
   \   00007A                ; Setup parameters for call to function rxDone
   \                     ??rxStartIsr_7:
   \   00007A   12....       LCALL   ??rxDone?relay
    494                return;
   \   00007D   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    495              }
    496            }
    497            else
    498            {
    499              /* radio supplied a corrupted receive buffer length */
    500              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
   \                     ??rxStartIsr_4:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C3           CLR     C
   \   000082   947D         SUBB    A,#0x7d
   \   000084   4003         JC      ??rxStartIsr_6
   \   000086                ; Setup parameters for call to function halAssertHandler
   \   000086   12....       LCALL   ??halAssertHandler?relay
    501            }
    502          
    503          
    504          
    505            /*-------------------------------------------------------------------------------
    506             *  Process ACKs.
    507             *
    508             *  If this frame is an ACK, process it immediately and exit from here.
    509             *  If this frame is not an ACK and transmit is listening for an ACK, let
    510             *  the transmit logic know an non-ACK was received so transmit can complete.
    511             *
    512             *  In promiscuous mode ACKs are treated like any other frame.
    513             */
    514            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_6:
   \   000089   90....       MOV     DPTR,#rxBuf + 1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   5407         ANL     A,#0x7
   \   00008F   6402         XRL     A,#0x2
   \   000091   6003         JZ      $+5
   \   000093   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
   \   000096   90....       MOV     DPTR,#rxPromiscuousMode
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6003         JZ      $+5
   \   00009C   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
    515            {
    516              halIntState_t  s;
    517              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    518              /*
    519               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    520               *  these two bytes will be the FCS.
    521               */
    522          
    523              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    524              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   00009F                ; Setup parameters for call to function macMemReadRxFifo
   \   00009F   7902         MOV     R1,#0x2
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   12....       LCALL   ??macMemReadRxFifo?relay
    525          
    526              /*
    527               *  This critical section ensures that the ACK timeout won't be triggered in the
    528               *  millde of receiving the ACK frame.
    529               */
    530              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000AE   A2AF         MOV     C,0xa8.7
   \   0000B0   E4           CLR     A
   \   0000B1   33           RLC     A
   \   0000B2   F5..         MOV     ?V0 + 0,A
   \   0000B4   C2AF         CLR     0xa8.7
    531          
    532              /* see if transmit is listening for an ACK */
    533              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000B6   90....       MOV     DPTR,#macTxActive
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6486         XRL     A,#0x86
   \   0000BC   7072         JNZ     ??rxStartIsr_9
    534              {
    535                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000BE   90....       MOV     DPTR,#pMacDataTx
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   E8           MOV     A,R0
   \   0000C7   49           ORL     A,R1
   \   0000C8   7003         JNZ     ??rxStartIsr_10
   \   0000CA                ; Setup parameters for call to function halAssertHandler
   \   0000CA   12....       LCALL   ??halAssertHandler?relay
    536          
    537                /* record link quality metrics for the receive ACK */
    538                {
    539                  int8 rssiDbm;
    540                  uint8 corr;
    541          
    542                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_10:
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   24B7         ADD     A,#-0x49
   \   0000D6   FE           MOV     R6,A
    543                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    544                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000D7   7401         MOV     A,#0x1
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   547F         ANL     A,#0x7f
   \   0000DF   FF           MOV     R7,A
    545          
    546                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000E0                ; Setup parameters for call to function macRadioComputeLQI
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   ??macRadioComputeLQI?relay
   \   0000E6   E9           MOV     A,R1
   \   0000E7   C0E0         PUSH    A
   \   0000E9   90....       MOV     DPTR,#pMacDataTx
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   2414         ADD     A,#0x14
   \   0000EF   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000F2   D0E0         POP     A
   \   0000F4   F0           MOVX    @DPTR,A
    547                  pMacDataTx->internal.correlation = corr;
   \   0000F5   90....       MOV     DPTR,#pMacDataTx
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   2415         ADD     A,#0x15
   \   0000FB   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000FE   EF           MOV     A,R7
   \   0000FF   F0           MOVX    @DPTR,A
    548                  pMacDataTx->internal.rssi= rssiDbm;
   \   000100   90....       MOV     DPTR,#pMacDataTx
   \   000103   E0           MOVX    A,@DPTR
   \   000104   2416         ADD     A,#0x16
   \   000106   12....       LCALL   ?Subroutine14 & 0xFFFF
    549                }
   \                     ??CrossCallReturnLabel_20:
   \   000109   F0           MOVX    @DPTR,A
    550          
    551                /*
    552                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    553                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    554                 */
    555                HAL_EXIT_CRITICAL_SECTION(s);
   \   00010A   E5..         MOV     A,?V0 + 0
   \   00010C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00010E   92AF         MOV     0xa8.7,C
    556          
    557                /*
    558                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    559                 *  the transmit logic still needs to know.  In that case, treat the frame
    560                 *  as a non-ACK to complete the active transmit.
    561                 */
    562                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E0           MOVX    A,@DPTR
   \   000116   A2E7         MOV     C,0xE0 /* A   */.7
   \   000118   5011         JNC     ??rxStartIsr_11
    563                {
    564                  /* call transmit logic to indicate ACK was received */
    565                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00011A                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00011A   90....       MOV     DPTR,#rxBuf + 1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   5410         ANL     A,#0x10
   \   000120   FA           MOV     R2,A
   \   000121   90....       MOV     DPTR,#rxBuf + 3
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F9           MOV     R1,A
   \   000126   12....       LCALL   ??macTxAckReceivedCallback?relay
   \   000129   800B         SJMP    ??rxStartIsr_12
    566                }
    567                else
    568                {
    569                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_11:
   \   00012B                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00012B   12....       LCALL   ??macTxAckNotReceivedCallback?relay
   \   00012E   8006         SJMP    ??rxStartIsr_12
    570                }
    571              }
    572              else
    573              {
    574                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_9:
   \   000130   E5..         MOV     A,?V0 + 0
   \   000132   A2E0         MOV     C,0xE0 /* A   */.0
   \   000134   92AF         MOV     0xa8.7,C
    575              }
    576          
    577              /* receive is done, exit from here */
    578              rxDone();
   \                     ??rxStartIsr_12:
   \   000136                ; Setup parameters for call to function rxDone
   \   000136   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    579              return;
    580            }
    581            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_8:
   \   000139   90....       MOV     DPTR,#macTxActive
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   6486         XRL     A,#0x86
   \   00013F   7003         JNZ     ??rxStartIsr_13
    582            {
    583              macTxAckNotReceivedCallback();
   \   000141                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000141   12....       LCALL   ??macTxAckNotReceivedCallback?relay
    584            }
    585          
    586            /*-------------------------------------------------------------------------------
    587             *  Apply filtering.
    588             *
    589             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    590             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    591             *  do not apply filtering.
    592             */
    593            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_13:
   \   000144   90....       MOV     DPTR,#rxFilter
   \   000147   E0           MOVX    A,@DPTR
   \   000148   6024         JZ      ??rxStartIsr_14
   \   00014A   90....       MOV     DPTR,#rxPromiscuousMode
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   701E         JNZ     ??rxStartIsr_14
    594            {
    595              if (/* filter all frames */
    596                   (rxFilter == RX_FILTER_ALL) ||
    597          
    598                   /* filter non-beacon frames */
    599                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    600                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    601          
    602                   /* filter non-command frames */
    603                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    604                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000150   90....       MOV     DPTR,#rxFilter
   \   000153   E0           MOVX    A,@DPTR
   \   000154   6401         XRL     A,#0x1
   \   000156   7003         JNZ     $+5
   \   000158   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   6402         XRL     A,#0x2
   \   00015E   6003         JZ      $+5
   \   000160   02....       LJMP    ??rxStartIsr_16 & 0xFFFF
   \   000163   90....       MOV     DPTR,#rxBuf + 1
   \   000166   E0           MOVX    A,@DPTR
   \   000167   5407         ANL     A,#0x7
   \   000169   6003         JZ      $+5
   \   00016B   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
    605              {
    606                /* discard rest of frame */
    607                rxDiscardFrame();
    608                return;
    609              }
    610            }
    611          
    612            /*-------------------------------------------------------------------------------
    613             *  Compute length of addressing fields.  Compute payload length.
    614             */
    615          
    616            /* decode addressing modes */
    617            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_14:
   \   00016E   90....       MOV     DPTR,#rxBuf + 2
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   13           RRC     A
   \   000174   13           RRC     A
   \   000175   543F         ANL     A,#0x3f
   \   000177   5403         ANL     A,#0x3
   \   000179   F5..         MOV     ?V0 + 2,A
    618            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   00017B   E8           MOV     A,R0
   \   00017C   C4           SWAP    A
   \   00017D   13           RRC     A
   \   00017E   13           RRC     A
   \   00017F   5403         ANL     A,#0x3
   \   000181   FF           MOV     R7,A
    619          
    620            /*
    621            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    622             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    623             *  the entire receive buffer is flushed.
    624             */
    625            if (macChipVersion == REV_A)
   \   000182   90....       MOV     DPTR,#macChipVersion
   \   000185   E0           MOVX    A,@DPTR
   \   000186   7011         JNZ     ??rxStartIsr_17
    626            {
    627              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   000188   7401         MOV     A,#0x1
   \   00018A   6F           XRL     A,R7
   \   00018B   7003         JNZ     $+5
   \   00018D   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
   \   000190   7401         MOV     A,#0x1
   \   000192   65..         XRL     A,?V0 + 2
   \   000194   7003         JNZ     $+5
   \   000196   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
    628              {
    629                MAC_RADIO_FLUSH_RX_FIFO();
    630                rxDone();
    631                return;
    632              }
    633            }
    634          
    635            /*
    636             *  Compute the addressing field length.  A lookup table based on addressing
    637             *  mode is used for efficiency.  If the source address is present and the
    638             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    639             *  length is adjusted to match the smaller length.
    640             */
    641            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_17:
   \   000199   8F..         MOV     ?V0 + 0,R7
   \   00019B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00019E   F8           MOV     R0,A
   \   00019F   85....       MOV     ?V0 + 0,?V0 + 2
   \   0001A2   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001A5   28           ADD     A,R0
   \   0001A6   FE           MOV     R6,A
    642            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   0001A7   EF           MOV     A,R7
   \   0001A8   600A         JZ      ??rxStartIsr_18
   \   0001AA   90....       MOV     DPTR,#rxBuf + 1
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001B0   5002         JNC     ??rxStartIsr_18
    643            {
    644              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001B2   1E           DEC     R6
   \   0001B3   1E           DEC     R6
    645            }
    646          
    647            /*
    648             *  If there are not enough unread bytes to include the computed address
    649             *  plus FCS field, the frame is corrupted and must be discarded.
    650             */
    651            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_18:
   \   0001B4   90....       MOV     DPTR,#rxUnreadLen
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   FA           MOV     R2,A
   \   0001B9   8E..         MOV     ?V0 + 0,R6
   \   0001BB   E5..         MOV     A,?V0 + 0
   \   0001BD   2402         ADD     A,#0x2
   \   0001BF   F8           MOV     R0,A
   \   0001C0   E4           CLR     A
   \   0001C1   3400         ADDC    A,#0x0
   \   0001C3   F9           MOV     R1,A
   \   0001C4   EA           MOV     A,R2
   \   0001C5   98           SUBB    A,R0
   \   0001C6   E4           CLR     A
   \   0001C7   99           SUBB    A,R1
   \   0001C8   C3           CLR     C
   \   0001C9   65D0         XRL     A,PSW
   \   0001CB   33           RLC     A
   \   0001CC   403F         JC      ??rxStartIsr_15
    652            {
    653              /* discard frame and exit */
    654              rxDiscardFrame();
    655              return;
    656            }
    657          
    658            /* payload length is equal to unread bytes minus address length, minus the FCS */
    659            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   C3           CLR     C
   \   0001D0   9E           SUBB    A,R6
   \   0001D1   24FE         ADD     A,#-0x2
   \   0001D3   90....       MOV     DPTR,#rxPayloadLen
   \   0001D6   F0           MOVX    @DPTR,A
    660          
    661            /*-------------------------------------------------------------------------------
    662             *  Allocate memory for the incoming frame.
    663             */
    664            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
   \   0001D7                ; Setup parameters for call to function macDataRxMemAlloc
   \   0001D7   2432         ADD     A,#0x32
   \   0001D9   FA           MOV     R2,A
   \   0001DA   E4           CLR     A
   \   0001DB   3400         ADDC    A,#0x0
   \   0001DD   FB           MOV     R3,A
   \   0001DE   12....       LCALL   ??macDataRxMemAlloc?relay
   \   0001E1   90....       MOV     DPTR,#pRxBuf
   \   0001E4   EA           MOV     A,R2
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   A3           INC     DPTR
   \   0001E7   EB           MOV     A,R3
   \   0001E8   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    665            if (pRxBuf == NULL)
   \                     ??CrossCallReturnLabel_57:
   \   0001EB   F8           MOV     R0,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   F9           MOV     R1,A
   \   0001EF   E8           MOV     A,R0
   \   0001F0   49           ORL     A,R1
   \   0001F1   7020         JNZ     ??rxStartIsr_19
    666            {
    667              /* Cancel the outgoing TX ACK */
    668              MAC_RADIO_CANCEL_TX_ACK();
   \   0001F3   75E1E8       MOV     0xe1,#-0x18
   \   0001F6   8015         SJMP    ??rxStartIsr_15
    669          
    670              /* buffer allocation failed, discard the frame and exit*/
    671              rxDiscardFrame();
    672              return;
    673            }
   \                     ??rxStartIsr_16:
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   6403         XRL     A,#0x3
   \   0001FB   6003         JZ      $+5
   \   0001FD   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \   000200   90....       MOV     DPTR,#rxBuf + 1
   \   000203   E0           MOVX    A,@DPTR
   \   000204   5407         ANL     A,#0x7
   \   000206   6403         XRL     A,#0x3
   \   000208   7003         JNZ     $+5
   \   00020A   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \                     ??rxStartIsr_15:
   \   00020D                ; Setup parameters for call to function rxDiscardFrame
   \   00020D   12....       LCALL   ??rxDiscardFrame?relay
   \   000210   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    674          
    675            /*-------------------------------------------------------------------------------
    676             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    677             */
    678            ackWithPending = 0;
   \                     ??rxStartIsr_19:
   \   000213   75..00       MOV     ?V0 + 0,#0x0
    679            if (!rxPromiscuousMode)
   \   000216   90....       MOV     DPTR,#rxPromiscuousMode
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   700A         JNZ     ??rxStartIsr_20
    680            {
    681              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   00021C   90....       MOV     DPTR,#rxBuf + 1
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   5420         ANL     A,#0x20
   \   000222   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000225   F0           MOVX    @DPTR,A
    682            }
    683          
    684            /*-------------------------------------------------------------------------------
    685             *  Process any ACK request.
    686             */
    687            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_20:
   \   000226   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000229   E0           MOVX    A,@DPTR
   \   00022A   6056         JZ      ??rxStartIsr_21
    688            {
    689              halIntState_t  s;
    690          
    691              /*
    692               *  This critical section ensures that the callback ISR is initiated within time
    693               *  to guarantee correlation with the strobe.
    694               */
    695              HAL_ENTER_CRITICAL_SECTION(s);
   \   00022C   A2AF         MOV     C,0xa8.7
   \   00022E   E4           CLR     A
   \   00022F   33           RLC     A
   \   000230   F5..         MOV     ?V0 + 1,A
   \   000232   C2AF         CLR     0xa8.7
    696          
    697              /* Do not ack data packet with pending more data */
    698              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   000234   90....       MOV     DPTR,#rxBuf + 1
   \   000237   E0           MOVX    A,@DPTR
   \   000238   5407         ANL     A,#0x7
   \   00023A   6403         XRL     A,#0x3
   \   00023C   7027         JNZ     ??rxStartIsr_22
    699              {
    700                if( macRxCheckMACPendingCallback())
   \   00023E                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   00023E   12....       LCALL   ??macRxCheckMACPendingCallback?relay
   \   000241   E9           MOV     A,R1
   \   000242   600B         JZ      ??rxStartIsr_23
    701                {
    702                  /* Check is any mac data pending for end devices */
    703                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \                     ??rxStartIsr_24:
   \   000244   75..04       MOV     ?V0 + 0,#0x4
    704                }
    705                else
    706                {
    707                  if( macSrcMatchIsEnabled )
    708                  {
    709                    /* When autopend is enabled, check if allpending is set to true */
    710                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
    711                    {
    712                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    713                    }
    714                  }
    715                  else
    716                  {
    717                    /* When autopend is disabled, check the application pending callback */
    718                    if( macRxCheckPendingCallback() )
    719                    {
    720                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    721                    }
    722                  }
    723                }
    724              }
    725          
    726              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    727              {
    728                MAC_RADIO_TX_ACK_PEND();
   \   000247   90618A       MOV     DPTR,#0x618a
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   D2E2         SETB    0xE0 /* A   */.2
   \   00024D   801C         SJMP    ??rxStartIsr_25
    729              }
   \                     ??rxStartIsr_23:
   \   00024F   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000252   E0           MOVX    A,@DPTR
   \   000253   600A         JZ      ??rxStartIsr_26
   \   000255                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000255   12....       LCALL   ??MAC_SrcMatchCheckAllPending?relay
   \   000258   E9           MOV     A,R1
   \   000259   64FE         XRL     A,#0xfe
   \   00025B   7008         JNZ     ??rxStartIsr_22
   \   00025D   80E5         SJMP    ??rxStartIsr_24
   \                     ??rxStartIsr_26:
   \   00025F                ; Setup parameters for call to function macRxCheckPendingCallback
   \   00025F   12....       LCALL   ??macRxCheckPendingCallback?relay
   \   000262   E9           MOV     A,R1
   \   000263   70DF         JNZ     ??rxStartIsr_24
    730              else
    731              {
    732                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_22:
   \   000265   90618A       MOV     DPTR,#0x618a
   \   000268   E0           MOVX    A,@DPTR
   \   000269   C2E2         CLR     0xE0 /* A   */.2
    733              }
   \                     ??rxStartIsr_25:
   \   00026B   12....       LCALL   ?Subroutine7 & 0xFFFF
    734          
    735          
    736              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    737              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??CrossCallReturnLabel_7:
   \   00026E   7591FE       MOV     0x91,#-0x2
   \   000271   A2E7         MOV     C,0xE0 /* A   */.7
   \   000273   92AF         MOV     0xa8.7,C
   \   000275   9061A4       MOV     DPTR,#0x61a4
   \   000278   E0           MOVX    A,@DPTR
   \   000279   D2E0         SETB    0xE0 /* A   */.0
   \   00027B   F0           MOVX    @DPTR,A
    738              HAL_EXIT_CRITICAL_SECTION(s);
   \   00027C   E5..         MOV     A,?V0 + 1
   \   00027E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000280   92AF         MOV     0xa8.7,C
    739            }
    740          
    741           /*-------------------------------------------------------------------------------
    742            *  Populate the receive buffer going up to high-level.
    743            */
    744          
    745            /* configure the payload buffer */
    746            pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_21:
   \   000282   90....       MOV     DPTR,#pRxBuf
   \   000285   E0           MOVX    A,@DPTR
   \   000286   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000289   F0           MOVX    @DPTR,A
    747            pRxBuf->msdu.len = rxPayloadLen;
   \   00028A   90....       MOV     DPTR,#rxPayloadLen
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   C0E0         PUSH    A
   \   000290   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000293   D0E0         POP     A
   \   000295   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    748          
    749            /* set internal values */
    750            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??CrossCallReturnLabel_58:
   \   000298   241A         ADD     A,#0x1a
   \   00029A   12....       LCALL   ?Subroutine2 & 0xFFFF
    751            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \                     ??CrossCallReturnLabel_55:
   \   00029D   2423         ADD     A,#0x23
   \   00029F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0002A2   E5..         MOV     A,?V0 + 2
   \   0002A4   F0           MOVX    @DPTR,A
    752            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   0002A5                ; Setup parameters for call to function macMcuOverflowCapture
   \   0002A5   12....       LCALL   ??macMcuOverflowCapture?relay
   \   0002A8   8A..         MOV     ?V0 + 4,R2
   \   0002AA   8B..         MOV     ?V0 + 5,R3
   \   0002AC   8C..         MOV     ?V0 + 6,R4
   \   0002AE   8D..         MOV     ?V0 + 7,R5
   \   0002B0   90....       MOV     DPTR,#pRxBuf
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   2424         ADD     A,#0x24
   \   0002B6   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0002B9   78..         MOV     R0,#?V0 + 4
   \   0002BB   12....       LCALL   ?L_MOV_TO_X
    753            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   0002BE                ; Setup parameters for call to function macMcuTimerCapture
   \   0002BE   12....       LCALL   ??macMcuTimerCapture?relay
   \   0002C1   90....       MOV     DPTR,#pRxBuf
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   2428         ADD     A,#0x28
   \   0002C7   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    754            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
   \                     ??CrossCallReturnLabel_50:
   \   0002CA   90....       MOV     DPTR,#rxBuf + 1
   \   0002CD   E0           MOVX    A,@DPTR
   \   0002CE   5407         ANL     A,#0x7
   \   0002D0   C0E0         PUSH    A
   \   0002D2   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0002D5   A3           INC     DPTR
   \   0002D6   D0E0         POP     A
   \   0002D8   F0           MOVX    @DPTR,A
    755            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   0002D9   90....       MOV     DPTR,#rxBuf + 3
   \   0002DC   E0           MOVX    A,@DPTR
   \   0002DD   C0E0         PUSH    A
   \   0002DF   90....       MOV     DPTR,#pRxBuf
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   2431         ADD     A,#0x31
   \   0002E5   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0002E8   D0E0         POP     A
   \   0002EA   F0           MOVX    @DPTR,A
    756            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0002EB   90....       MOV     DPTR,#rxBuf + 1
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   5478         ANL     A,#0x78
   \   0002F1   F8           MOV     R0,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   C4           SWAP    A
   \   0002F5   540F         ANL     A,#0xf
   \   0002F7   5403         ANL     A,#0x3
   \   0002F9   48           ORL     A,R0
   \   0002FA   45..         ORL     A,?V0 + 0
   \   0002FC   C0E0         PUSH    A
   \   0002FE   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000301   D0E0         POP     A
   \   000303   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    757            pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
   \                     ??CrossCallReturnLabel_59:
   \   000306   240F         ADD     A,#0xf
   \   000308   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00030B   E4           CLR     A
   \   00030C   F0           MOVX    @DPTR,A
    758          
    759            /*-------------------------------------------------------------------------------
    760             *  If the processing the addressing fields does not require more bytes from
    761             *  the FIFO go directly address processing function.  Otherwise, configure
    762             *  interrupt to jump there once bytes are received.
    763             */
    764            if (addrLen == 0)
   \   00030D   EE           MOV     A,R6
   \   00030E   7005         JNZ     ??rxStartIsr_27
    765            {
    766              /* no addressing fields to read, prepare for payload interrupts */
    767              pFuncRxState = &rxPayloadIsr;
   \   000310   12....       LCALL   ?Subroutine6 & 0xFFFF
    768              rxPrepPayload();
    769            }
   \                     ??CrossCallReturnLabel_4:
   \   000313   8013         SJMP    ??rxStartIsr_3
    770            else
    771            {
    772              /* need to read and process addressing fields, prepare for address interrupt */
    773              rxNextLen = addrLen;
   \                     ??rxStartIsr_27:
   \   000315   90....       MOV     DPTR,#rxNextLen
   \   000318   F0           MOVX    @DPTR,A
    774              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000319   14           DEC     A
   \   00031A   906194       MOV     DPTR,#0x6194
   \   00031D   F0           MOVX    @DPTR,A
    775              pFuncRxState = &rxAddrIsr;
   \   00031E   90....       MOV     DPTR,#pFuncRxState
   \   000321   74..         MOV     A,#??rxAddrIsr?relay & 0xff
   \   000323   F0           MOVX    @DPTR,A
   \   000324   A3           INC     DPTR
   \   000325   74..         MOV     A,#(??rxAddrIsr?relay >> 8) & 0xff
   \   000327   F0           MOVX    @DPTR,A
   \                     ??rxStartIsr_3:
   \   000328   7402         MOV     A,#0x2
   \   00032A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032D   7F08         MOV     R7,#0x8
   \   00032F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000332                REQUIRE RFST
   \   000332                REQUIRE _A_IEN0
   \   000332                REQUIRE S1CON
   \   000332                REQUIRE RFIRQF1
    776            }
    777          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   74..         MOV     A,#macRxAddrLen & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#pFuncRxState
   \   000003   74..         MOV     A,#??rxPayloadIsr?relay & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A   12....       LCALL   ??rxPrepPayload?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   EA           MOV     A,R2
   \   000005                REQUIRE ??Subroutine27_0
   \   000005                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   9061A4       MOV     DPTR,#0x61a4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C2E0         CLR     0xE0 /* A   */.0
   \   000006   F0           MOVX    @DPTR,A
   \   000007   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   2432         ADD     A,#0x32
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   90....       MOV     DPTR,#pRxBuf
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F583         MOV     DPH,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   EF           MOV     A,R7
   \   000004                REQUIRE ??Subroutine29_0
   \   000004                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function macRxCompleteCallback
   \   000001   90....       MOV     DPTR,#pRxBuf
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    778          
    779          
    780          /*=================================================================================================
    781           * @fn          rxAddrIsr
    782           *
    783           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    784           *              from the incoming packet.
    785           *
    786           * @param       none
    787           *
    788           * @return      none
    789           *=================================================================================================
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    792          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    793            uint8 buf[MAX_ADDR_FIELDS_LEN];
    794            uint8 dstAddrMode;
    795            uint8 srcAddrMode;
    796            uint8  * p;
    797          
    798            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    799          
    800            /*  read out address fields into local buffer in one shot */
    801            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   12....       LCALL   ?Subroutine9 & 0xFFFF
    802          
    803            /* set pointer to buffer with addressing fields */
    804            p = buf;
   \                     ??CrossCallReturnLabel_10:
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
    805          
    806            /* destination address */
    807            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   000020   90....       MOV     DPTR,#rxBuf + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   13           RRC     A
   \   000025   13           RRC     A
   \   000026   543F         ANL     A,#0x3f
   \   000028   5403         ANL     A,#0x3
   \   00002A   FE           MOV     R6,A
    808            if (dstAddrMode != SADDR_MODE_NONE)
   \   00002B   6064         JZ      ??rxAddrIsr_1
    809            {
    810              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00002D   90....       MOV     DPTR,#pRxBuf
   \   000030   E0           MOVX    A,@DPTR
   \   000031   242C         ADD     A,#0x2c
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   3400         ADDC    A,#0x0
   \   000038   F9           MOV     R1,A
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   EC           MOV     A,R4
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   12....       LCALL   ?Subroutine5 & 0xFFFF
    811              p += MAC_PAN_ID_FIELD_LEN;
    812              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??CrossCallReturnLabel_53:
   \   000059   7403         MOV     A,#0x3
   \   00005B   6E           XRL     A,R6
   \   00005C   7016         JNZ     ??rxAddrIsr_2
    813              {
    814                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   00005E                ; Setup parameters for call to function sAddrExtCpy
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   90....       MOV     DPTR,#pRxBuf
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   241B         ADD     A,#0x1b
   \   00006D   12....       LCALL   ?Subroutine17 & 0xFFFF
    815                p += MAC_EXT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_31:
   \   000070   740A         MOV     A,#0xa
   \   000072   8016         SJMP    ??rxAddrIsr_3
    816              }
    817              else
    818              {
    819                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000083   241B         ADD     A,#0x1b
   \   000085   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    820                p += MAC_SHORT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_51:
   \   000088   7404         MOV     A,#0x4
   \                     ??rxAddrIsr_3:
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AC82         MOV     R4,DPL
   \   00008F   AD83         MOV     R5,DPH
    821              }
    822            }
    823          
    824            /* sources address */
    825            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   000091   90....       MOV     DPTR,#rxBuf + 2
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C4           SWAP    A
   \   000096   13           RRC     A
   \   000097   13           RRC     A
   \   000098   5403         ANL     A,#0x3
   \   00009A   FE           MOV     R6,A
    826            if (srcAddrMode != SADDR_MODE_NONE)
   \   00009B   603D         JZ      ??CrossCallReturnLabel_52
    827            {
    828              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   00009D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000A3   4016         JC      ??rxAddrIsr_4
    829              {
    830                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000A5   8C82         MOV     DPL,R4
   \   0000A7   8D83         MOV     DPH,R5
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000AF   12....       LCALL   ?Subroutine5 & 0xFFFF
    831                p += MAC_PAN_ID_FIELD_LEN;
   \                     ??CrossCallReturnLabel_54:
   \   0000B2   EC           MOV     A,R4
   \   0000B3   2402         ADD     A,#0x2
   \   0000B5   0C           INC     R4
   \   0000B6   0C           INC     R4
   \   0000B7   ED           MOV     A,R5
   \   0000B8   3400         ADDC    A,#0x0
   \   0000BA   FD           MOV     R5,A
    832              }
    833              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_4:
   \   0000BB   7403         MOV     A,#0x3
   \   0000BD   6E           XRL     A,R6
   \   0000BE   700B         JNZ     ??rxAddrIsr_5
    834              {
    835                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   0000C0                ; Setup parameters for call to function sAddrExtCpy
   \   0000C0   90....       MOV     DPTR,#pRxBuf
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   2412         ADD     A,#0x12
   \   0000C6   12....       LCALL   ?Subroutine17 & 0xFFFF
    836              }
   \                     ??CrossCallReturnLabel_32:
   \   0000C9   800F         SJMP    ??CrossCallReturnLabel_52
    837              else
    838              {
    839                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_5:
   \   0000CB   8C82         MOV     DPL,R4
   \   0000CD   8D83         MOV     DPH,R5
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FA           MOV     R2,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   12....       LCALL   ?Subroutine12 & 0xFFFF
    840              }
    841            }
   \                     ??CrossCallReturnLabel_17:
   \   0000D5   2412         ADD     A,#0x12
   \   0000D7   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    842          
    843            /*-------------------------------------------------------------------------------
    844             *  Prepare for payload interrupts.
    845             */
    846            pFuncRxState = &rxPayloadIsr;
   \                     ??CrossCallReturnLabel_52:
   \   0000DA   12....       LCALL   ?Subroutine6 & 0xFFFF
    847            rxPrepPayload();
    848          }
   \                     ??CrossCallReturnLabel_5:
   \   0000DD   7414         MOV     A,#0x14
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2                REQUIRE ?Subroutine1
   \   0000E2                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??sAddrExtCpy?relay
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   90....       MOV     DPTR,#pRxBuf
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   EA           MOV     A,R2
   \   000003   2400         ADD     A,#0x0
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242A         ADD     A,#0x2a
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#rxNextLen
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   AA82         MOV     R2,DPL
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   12....       LCALL   ??macMemReadRxFifo?relay
   \   000012   22           RET
    849          
    850          
    851          /*=================================================================================================
    852           * @fn          rxPrepPayload
    853           *
    854           * @brief       Common code to prepare for the payload ISR.
    855           *
    856           * @param       none
    857           *
    858           * @return      none
    859           *=================================================================================================
    860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          static void rxPrepPayload(void)
   \                     rxPrepPayload:
    862          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    863            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7011         JNZ     ??rxPrepPayload_0
    864            {
    865              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV     DPTR,#0x6194
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    866              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#??rxFcsIsr?relay & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(??rxFcsIsr?relay >> 8) & 0xff
   \   000019   8016         SJMP    ??rxPrepPayload_1
    867            }
    868            else
    869            {
    870              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001B   C3           CLR     C
   \   00001C   9410         SUBB    A,#0x10
   \   00001E   5006         JNC     ??rxPrepPayload_2
   \   000020   E0           MOVX    A,@DPTR
   \   000021   90....       MOV     DPTR,#rxNextLen
   \   000024   8005         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   000026   90....       MOV     DPTR,#rxNextLen
   \   000029   7410         MOV     A,#0x10
   \                     ??rxPrepPayload_3:
   \   00002B   F0           MOVX    @DPTR,A
    871              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   14           DEC     A
   \   00002E   906194       MOV     DPTR,#0x6194
    872            }
   \                     ??rxPrepPayload_1:
   \   000031   80..         SJMP    ?Subroutine0
    873          }
    874          
    875          
    876          /*=================================================================================================
    877           * @fn          rxPayloadIsr
    878           *
    879           * @brief       Receive ISR state for reading out and storing the packet payload.
    880           *
    881           * @param       none
    882           *
    883           * @return      none
    884           *=================================================================================================
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
    887          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    888            MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#pRxBuf
   \   00000C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??macMemReadRxFifo?relay
    889            pRxBuf->msdu.p += rxNextLen;
   \   000019   90....       MOV     DPTR,#pRxBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   2402         ADD     A,#0x2
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \   000025   90....       MOV     DPTR,#rxNextLen
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    890            rxPayloadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_49:
   \   000039   90....       MOV     DPTR,#rxNextLen
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   90....       MOV     DPTR,#rxPayloadLen
   \   000041   E0           MOVX    A,@DPTR
   \   000042   C3           CLR     C
   \   000043   98           SUBB    A,R0
   \   000044   F0           MOVX    @DPTR,A
    891          
    892            rxPrepPayload();
   \   000045                ; Setup parameters for call to function rxPrepPayload
   \   000045   12....       LCALL   ??rxPrepPayload?relay
    893          }
   \   000048   80..         SJMP    ??Subroutine28_0
    894          
    895          
    896          /*=================================================================================================
    897           * @fn          rxFcsIsr
    898           *
    899           * @brief       Receive ISR state for handling the FCS.
    900           *
    901           * @param       none
    902           *
    903           * @return      none
    904           *=================================================================================================
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          static void rxFcsIsr(void)
   \                     rxFcsIsr:
    907          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    908            uint8 crcOK;
    909            uint8 ackWithPending = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
    910          
    911            /* read FCS, rxBuf is now available storage */
    912            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000008                ; Setup parameters for call to function macMemReadRxFifo
   \   000008   7902         MOV     R1,#0x2
   \   00000A   7A..         MOV     R2,#rxBuf & 0xff
   \   00000C   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000E   12....       LCALL   ??macMemReadRxFifo?relay
    913          
    914            /*
    915             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
    916             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
    917             *    1) the RSSI value
    918             *    2) the average correlation value (used for LQI)
    919             *    3) a CRC passed bit
    920             */
    921          
    922            /* save the "CRC-is-OK" status */
    923            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000011   90....       MOV     DPTR,#rxBuf + 1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5480         ANL     A,#0x80
   \   000017   F5..         MOV     ?V0 + 1,A
    924          
    925            /*
    926             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
    927             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
    928             *  a special variant of promiscuous mode is active.
    929             */
    930            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000019   7008         JNZ     ??rxFcsIsr_0
   \   00001B   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7071         JNZ     ??rxFcsIsr_1
    931            {
    932              int8 rssiDbm;
    933              uint8 corr;
    934          
    935          #ifdef PACKET_FILTER_STATS
    936              rxCrcSuccess++;
    937          #endif /* PACKET_FILTER_STATS */
    938          
    939              /*
    940               *  As power saving optimization, set state variable to indicate physical receive
    941               *  has completed and then request turning of the receiver.  This means the receiver
    942               *  can be off (if other conditions permit) during execution of the callback function.
    943               *
    944               *  The receiver will be requested to turn off once again at the end of the receive
    945               *  logic.  There is no harm in doing this.
    946               */
    947              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000023   90....       MOV     DPTR,#macRxActive
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    948              macRxOffRequest();
   \   000029                ; Setup parameters for call to function macRxOffRequest
   \   000029   12....       LCALL   ??macRxOffRequest?relay
    949          
    950              /* decode RSSI and correlation values */
    951              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   00002C   90....       MOV     DPTR,#rxBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   24B7         ADD     A,#-0x49
   \   000032   FF           MOV     R7,A
    952              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    953              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   547F         ANL     A,#0x7f
   \   000037   FE           MOV     R6,A
    954          
    955              /* Read the source matching result back */
    956              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \   000038   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6009         JZ      ??rxFcsIsr_2
   \   00003E                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   00003E   12....       LCALL   ??MAC_SrcMatchCheckResult?relay
   \   000041   E9           MOV     A,R1
   \   000042   6003         JZ      ??rxFcsIsr_2
    957              {
    958                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
    959                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   000044   75..04       MOV     ?V0 + 0,#0x4
    960              }
    961          
    962              /* record parameters that get passed up to high-level */
    963              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_2:
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   45..         ORL     A,?V0 + 0
   \   00004B   F8           MOV     R0,A
   \   00004C   90....       MOV     DPTR,#pRxBuf
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8982         MOV     DPL,R1
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   48           ORL     A,R0
   \   00005F   F0           MOVX    @DPTR,A
    964              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000060                ; Setup parameters for call to function macRadioComputeLQI
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   ??macRadioComputeLQI?relay
   \   000067   E9           MOV     A,R1
   \   000068   C0E0         PUSH    A
   \   00006A   90....       MOV     DPTR,#pRxBuf
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   242E         ADD     A,#0x2e
   \   000070   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000073   D0E0         POP     A
   \   000075   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    965              pRxBuf->mac.rssi = rssiDbm;
   \                     ??CrossCallReturnLabel_60:
   \   000078   2430         ADD     A,#0x30
   \   00007A   12....       LCALL   ?Subroutine2 & 0xFFFF
    966              pRxBuf->mac.correlation = corr;
   \                     ??CrossCallReturnLabel_56:
   \   00007D   242F         ADD     A,#0x2f
   \   00007F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000082   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    967          
    968              /* set the MSDU pointer to point at start of data */
    969              pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \                     ??CrossCallReturnLabel_61:
   \   000085   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000088   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    970          
    971              /* finally... execute callback function */
    972              macRxCompleteCallback(pRxBuf);
   \                     ??CrossCallReturnLabel_62:
   \   00008B   FA           MOV     R2,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??macRxCompleteCallback?relay
    973              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   000092   800A         SJMP    ??rxFcsIsr_3
    974            }
    975            else
    976            {
    977          #ifdef PACKET_FILTER_STATS
    978              rxCrcFailure++;
    979          #endif /* PACKET_FILTER_STATS */
    980          
    981              /*
    982               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
    983               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
    984               *  slightly more efficient to do so.)
    985               */
    986              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   000094   12....       LCALL   ?Subroutine13 & 0xFFFF
    987              macRxOutgoingAckFlag = 0;
    988          
    989              /* the CRC failed so the packet must be discarded */
    990              MEM_FREE((uint8 **)&pRxBuf);
   \                     ??CrossCallReturnLabel_19:
   \   000097                ; Setup parameters for call to function macDataRxMemFree
   \   000097   7A..         MOV     R2,#pRxBuf & 0xff
   \   000099   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   00009B   12....       LCALL   ??macDataRxMemFree?relay
    991              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_3:
   \   00009E   90....       MOV     DPTR,#pRxBuf
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
    992            }
    993          
    994            /* reset threshold level, reset receive state, and complete receive logic */
    995            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   0000A5   12....       LCALL   ?Subroutine3 & 0xFFFF
    996            pFuncRxState = &rxStartIsr;
    997            rxDone();
    998          }
   \                     ??CrossCallReturnLabel_0:
   \   0000A8   7F02         MOV     R7,#0x2
   \   0000AA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   906194       MOV     DPTR,#0x6194
   \   000003   7405         MOV     A,#0x5
   \   000005   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000008                ; Setup parameters for call to function rxDone
   \   000008                ; Setup parameters for call to function rxDone
   \   000008   12....       LCALL   ??rxDone?relay
   \   00000B   22           RET
    999          
   1000          
   1001          /*=================================================================================================
   1002           * @fn          rxDone
   1003           *
   1004           * @brief       Common exit point for receive.
   1005           *
   1006           * @param       none
   1007           *
   1008           * @return      none
   1009           *=================================================================================================
   1010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1011          static void rxDone(void)
   \                     rxDone:
   1012          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1013            /* Make sure the peak RSSI is reset */
   1014            COMPRESSION_WORKAROUND_RESET_RSSI();
   1015            
   1016            /* if the receive FIFO has overflowed, flush it here */
   1017            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500B         JNC     ??rxDone_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   4006         JC      ??rxDone_0
   1018            {
   1019              MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
   1020            }
   1021          
   1022            /* mark receive as inactive */
   1023            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   000017   90....       MOV     DPTR,#macRxActive
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   1024          
   1025            /* if there is no outgoing ACK, run the post receive updates */
   1026            if (!macRxOutgoingAckFlag)
   \   00001C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7003         JNZ     ??rxDone_1
   1027            {
   1028              rxPostRxUpdates();
   \   000022                ; Setup parameters for call to function rxPostRxUpdates
   \   000022   12....       LCALL   ??rxPostRxUpdates?relay
   1029            }
   1030          }
   \                     ??rxDone_1:
   \   000025   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   \   000028                REQUIRE RFST
   1031          
   1032          
   1033          /**************************************************************************************************
   1034           * @fn          macRxAckTxDoneCallback
   1035           *
   1036           * @brief       Function called when the outoing ACK has completed transmitting.
   1037           *
   1038           * @param       none
   1039           *
   1040           * @return      none
   1041           **************************************************************************************************
   1042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1043          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1044          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1045            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   1046          
   1047            /*
   1048             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1049             *  could be executed before the primary receive logic completes.  To prevent this, the
   1050             *  post updates are only executed if receive logic is no longer active.  In the case the
   1051             *  post updates are not executed here, they will execute when the main receive logic
   1052             *  completes.
   1053             */
   1054            if (!macRxActive)
   \   000009   90....       MOV     DPTR,#macRxActive
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7003         JNZ     ??macRxAckTxDoneCallback_0
   1055            {
   1056              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function rxPostRxUpdates
   \   00000F   12....       LCALL   ??rxPostRxUpdates?relay
   1057            }
   1058          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000012   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   1059          
   1060          
   1061          /*=================================================================================================
   1062           * @fn          rxPostRxUpdates
   1063           *
   1064           * @brief       Updates that need to be performed once receive is complete.
   1065           *
   1066           *              It is not fatal to execute this function if somehow receive is active.  Under
   1067           *              certain timing/interrupt conditions a new receive may have started before this
   1068           *              function executes.  This should happen very rarely (if it happens at all) and
   1069           *              would cause no problems.
   1070           *
   1071           * @param       none
   1072           *
   1073           * @return      none
   1074           *=================================================================================================
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1077          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1078            /* turn off receiver if permitted */
   1079            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   ??macRxOffRequest?relay
   1080          
   1081            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1082            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   ??macRadioUpdateTxPower?relay
   1083          
   1084            /* initiate and transmit that was queued during receive */
   1085            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   ??macTxStartQueuedFrame?relay
   1086          }
   \   00000D   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   1087          
   1088          
   1089          /*=================================================================================================
   1090           * @fn          rxDiscardFrame
   1091           *
   1092           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1093           *
   1094           * @param       none
   1095           *
   1096           * @return      none
   1097           *=================================================================================================
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1101            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#??rxStartIsr?relay & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(??rxStartIsr?relay >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay
   1102          
   1103            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1104            {
   1105              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   ??rxDone?relay
   \   00001E   8021         SJMP    ??rxDiscardFrame_3
   1106            }
   1107            else
   1108            {
   1109              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   5006         JNC     ??rxDiscardFrame_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#rxNextLen
   \   000029   8005         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   00002B   90....       MOV     DPTR,#rxNextLen
   \   00002E   7410         MOV     A,#0x10
   \                     ??rxDiscardFrame_5:
   \   000030   F0           MOVX    @DPTR,A
   1110              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000031   E0           MOVX    A,@DPTR
   \   000032   14           DEC     A
   \   000033   906194       MOV     DPTR,#0x6194
   \   000036   F0           MOVX    @DPTR,A
   1111              pFuncRxState = &rxDiscardIsr;
   \   000037   90....       MOV     DPTR,#pFuncRxState
   \   00003A   74..         MOV     A,#??rxDiscardIsr?relay & 0xff
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#(??rxDiscardIsr?relay >> 8) & 0xff
   \   000040   F0           MOVX    @DPTR,A
   1112            }
   1113          }
   \                     ??rxDiscardFrame_3:
   \   000041   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   1114          
   1115          
   1116          /*=================================================================================================
   1117           * @fn          rxDiscardIsr
   1118           *
   1119           * @brief       Receive ISR state for discarding a packet.
   1120           *
   1121           * @param       none
   1122           *
   1123           * @return      none
   1124           *=================================================================================================
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1127          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1128            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1129          
   1130            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   12....       LCALL   ?Subroutine9 & 0xFFFF
   1131            rxUnreadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_11:
   \   00000C   90....       MOV     DPTR,#rxNextLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#rxUnreadLen
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C3           CLR     C
   \   000016   98           SUBB    A,R0
   \   000017   F0           MOVX    @DPTR,A
   1132          
   1133            /* read out and discard bytes until all bytes of packet are disposed of */
   1134            if (rxUnreadLen != 0)
   \   000018   6011         JZ      ??rxDiscardIsr_0
   1135            {
   1136              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   00001A   C3           CLR     C
   \   00001B   9410         SUBB    A,#0x10
   \   00001D   500F         JNC     ??CrossCallReturnLabel_1
   1137              {
   1138                rxNextLen = rxUnreadLen;
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#rxNextLen
   \   000023   F0           MOVX    @DPTR,A
   1139                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000024   14           DEC     A
   \   000025   906194       MOV     DPTR,#0x6194
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8003         SJMP    ??CrossCallReturnLabel_1
   1140              }
   1141            }
   1142            else
   1143            {
   1144              /* reset threshold level, reset receive state, and complete receive logic */
   1145              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   00002B   12....       LCALL   ?Subroutine3 & 0xFFFF
   1146              pFuncRxState = &rxStartIsr;
   1147              rxDone();
   1148            }
   1149          }
   \                     ??CrossCallReturnLabel_1:
   \   00002E   7410         MOV     A,#0x10
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   1150          
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          maxRxRifoOverflowIsr
   1154           *
   1155           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1156           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1157           *              It simply halts and cleanup the RX.
   1158           *
   1159           * @param       none
   1160           *
   1161           * @return      none
   1162           **************************************************************************************************
   1163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1164          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1166            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   1167            macRxHaltCleanup();
   \   00000A                ; Setup parameters for call to function macRxHaltCleanup
   \   00000A   12....       LCALL   ??macRxHaltCleanup?relay
   1168          }
   \   00000D   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   1169          
   1170          
   1171          /**************************************************************************************************
   1172           * @fn          macRxPromiscuousMode
   1173           *
   1174           * @brief       Sets promiscuous mode - enabling or disabling it.
   1175           *
   1176           * @param       none
   1177           *
   1178           * @return      none
   1179           **************************************************************************************************
   1180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1181          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1182          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1183            rxPromiscuousMode = mode;
   \   000007   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX    @DPTR,A
   1184          
   1185            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   700A         JNZ     ??macRxPromiscuousMode_0
   1186            {
   1187                MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000D   906180       MOV     DPTR,#0x6180
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   4405         ORL     A,#0x5
   \   000015   8013         SJMP    ??macRxPromiscuousMode_1
   1188            }
   1189            else
   1190            {
   1191              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1192                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000017   7402         MOV     A,#0x2
   \   000019   6E           XRL     A,R6
   \   00001A   6008         JZ      ??macRxPromiscuousMode_2
   \   00001C   7401         MOV     A,#0x1
   \   00001E   6E           XRL     A,R6
   \   00001F   6003         JZ      ??macRxPromiscuousMode_2
   \   000021                ; Setup parameters for call to function halAssertHandler
   \   000021   12....       LCALL   ??halAssertHandler?relay
   1193          
   1194              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000024   906180       MOV     DPTR,#0x6180
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002A   F0           MOVX    @DPTR,A
   1195            }
   1196          }
   \   00002B   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxRadioPowerUpInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxTxReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxHaltCleanupFinalStep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxThresholdIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxStartIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxAddrIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPrepPayload?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPayloadIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxFcsIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDone?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxAckTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPostRxUpdates?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxFifoOverflowIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxPromiscuousMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1197          
   1198          #ifdef CC2591_COMPRESSION_WORKAROUND
   1199          /**************************************************************************************************
   1200           * @fn          macRxResetRssi
   1201           *
   1202           * @brief       This function reset RSSI peak if the device is not actively in TX or RX.
   1203           *
   1204           * @param       none
   1205           *
   1206           * @return      none
   1207           **************************************************************************************************
   1208           */
   1209          void macRxResetRssi(void)
   1210          {
   1211            if ( !(macRxActive || macRxOutgoingAckFlag || macTxActive) )
   1212            {
   1213              COMPRESSION_WORKAROUND_RESET_RSSI();
   1214            }
   1215          }
   1216          #endif /* CC2591_COMPRESSION_WORKAROUND */
   1217          
   1218          /**************************************************************************************************
   1219           *                                  Compile Time Integrity Checks
   1220           **************************************************************************************************
   1221           */
   1222          
   1223          /* check for changes to the spec that would affect the source code */
   1224          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1225               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1226               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1227               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1228               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1229               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1230               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1231               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1232               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1233          #error "ERROR!  Change to the spec that requires modification of source code."
   1234          #endif
   1235          
   1236          /* check for changes to the internal flags format */
   1237          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1238               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1239               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1240               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1241               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1242               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1243          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1244          #endif
   1245          
   1246          /* validate CRC OK bit optimization */
   1247          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1248          #error "ERROR!  Optimization relies on these bits having the same position."
   1249          #endif
   1250          
   1251          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1252          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1253          #endif
   1254          
   1255          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1256          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1257          #endif
   1258          
   1259          
   1260          /**************************************************************************************************
   1261          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macRxAckTxDoneCallback             2      0      0
       -> rxPostRxUpdates               4      0      0
     macRxFifoOverflowIsr               2      0      0
       -> macRxHaltCleanup              4      0      0
     macRxHaltCleanup                   2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxInit                          2      0      0
     macRxPromiscuousMode               0      0      9
       -> halAssertHandler              0      0     18
     macRxRadioPowerUpInit              2      0      0
     macRxThresholdIsr                  2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxTxReset                       2      0      0
       -> macRxHardDisable              4      0      0
       -> macRxPromiscuousMode          4      0      0
     rxAddrIsr                          0      0     29
       -> halAssertHandler              0      0     58
       -> macMemReadRxFifo              0      0     58
       -> sAddrExtCpy                   0      0     58
       -> sAddrExtCpy                   0      0     58
       -> rxPrepPayload                 0      0     58
     rxDiscardFrame                     2      0     18
       -> halAssertHandler              4      0      0
       -> rxDone                        4      0      0
     rxDiscardIsr                       2      0     16
       -> macMemReadRxFifo              4      0     32
       -> rxDone                        4      0     32
     rxDone                             2      0     18
       -> rxPostRxUpdates               4      0      0
     rxFcsIsr                           1      0     10
       -> macMemReadRxFifo              0      0     20
       -> macRxOffRequest               0      0     20
       -> MAC_SrcMatchCheckResult       0      0     20
       -> macRadioComputeLQI            0      0     20
       -> macRxCompleteCallback         0      0     20
       -> macDataRxMemFree              0      0     20
       -> rxDone                        0      0     20
     rxHaltCleanupFinalStep             2      0      0
       -> macDataRxMemFree              4      0      0
       -> rxPostRxUpdates               4      0      0
     rxPayloadIsr                       2      0      0
       -> macMemReadRxFifo              4      0      0
       -> rxPrepPayload                 4      0      0
     rxPostRxUpdates                    2      0     18
       -> macRxOffRequest               4      0      0
       -> macRadioUpdateTxPower         4      0      0
       -> macTxStartQueuedFrame         4      0      0
     rxPrepPayload                      2      0     29
     rxStartIsr                         1      0     18
       -> halAssertHandler              0      0     36
       -> rxPostRxUpdates               0      0     36
       -> macCspForceTxDoneIfPending
                                        0      0     36
       -> macMemReadRxFifo              0      0     36
       -> rxDone                        0      0     36
       -> halAssertHandler              0      0     36
       -> macMemReadRxFifo              0      0     36
       -> halAssertHandler              0      0     36
       -> macRadioComputeLQI            0      0     36
       -> macTxAckReceivedCallback      0      0     36
       -> macTxAckNotReceivedCallback
                                        0      0     36
       -> rxDone                        0      0     36
       -> macTxAckNotReceivedCallback
                                        0      0     36
       -> macDataRxMemAlloc             0      0     36
       -> rxDiscardFrame                0      0     36
       -> macRxCheckMACPendingCallback
                                        0      0     36
       -> MAC_SrcMatchCheckAllPending
                                        0      0     36
       -> macRxCheckPendingCallback     0      0     36
       -> macMcuOverflowCapture         0      0     36
       -> macMcuTimerCapture            0      0     36
       -> rxPrepPayload                 0      0     36


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RFIRQF1                           1
     S1CON                             1
     _A_IEN0                           1
     RFST                              1
     RFIRQF0                           1
     macRxActive                       1
     macRxFilter                       1
     macRxOutgoingAckFlag              1
     macRxAddrLen                      4
     pFuncRxState                      2
     pRxBuf                            2
     rxBuf                             4
     rxUnreadLen                       1
     rxNextLen                         1
     rxPayloadLen                      1
     rxFilter                          1
     rxPromiscuousMode                 1
     rxIsrActiveFlag                   1
     rxResetFlag                       1
     rxFifoOverflowCount               1
     macRxInit                        44
     ?Subroutine4                      4
     ?Subroutine20                    12
     ?Subroutine0                      1
     ??Subroutine28_0                  7
     macRxRadioPowerUpInit            28
     ?Subroutine7                      9
     macRxTxReset                     19
     macRxHaltCleanup                 22
     ?Subroutine19                     9
     rxHaltCleanupFinalStep           92
     macRxThresholdIsr                42
     ?Subroutine16                     4
     ?Subroutine24                     9
     rxStartIsr                      818
     ?Subroutine18                    15
     ?Subroutine11                     4
     ?Subroutine22                    11
     ?Subroutine10                     6
     ?Subroutine6                     14
     ??Subroutine25_0                  6
     ??Subroutine26_0                  5
     ??Subroutine27_0                  5
     ?Subroutine15                     4
     ?Subroutine21                    11
     ?Subroutine14                     5
     ?Subroutine13                    13
     ?Subroutine8                     26
     ?Subroutine2                      4
     ??Subroutine29_0                  6
     rxAddrIsr                       226
     ?Subroutine1                      5
     ?Subroutine17                    10
     ?Subroutine12                     8
     ?Subroutine23                     9
     ?Subroutine5                      6
     ?Subroutine9                     19
     rxPrepPayload                    51
     rxPayloadIsr                     74
     rxFcsIsr                        173
     ?Subroutine3                     12
     rxDone                           40
     macRxAckTxDoneCallback           21
     rxPostRxUpdates                  16
     rxDiscardFrame                   68
     rxDiscardIsr                     54
     macRxFifoOverflowIsr             16
     macRxPromiscuousMode             46
     ??macRxInit?relay                 6
     ??macRxRadioPowerUpInit?relay     6
     ??macRxTxReset?relay              6
     ??macRxHaltCleanup?relay          6
     ??rxHaltCleanupFinalStep?relay    6
     ??macRxThresholdIsr?relay         6
     ??rxStartIsr?relay                6
     ??rxAddrIsr?relay                 6
     ??rxPrepPayload?relay             6
     ??rxPayloadIsr?relay              6
     ??rxFcsIsr?relay                  6
     ??rxDone?relay                    6
     ??macRxAckTxDoneCallback?relay    6
     ??rxPostRxUpdates?relay           6
     ??rxDiscardFrame?relay            6
     ??rxDiscardIsr?relay              6
     ??macRxFifoOverflowIsr?relay      6
     ??macRxPromiscuousMode?relay      6

 
 2 109 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 2 221 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
